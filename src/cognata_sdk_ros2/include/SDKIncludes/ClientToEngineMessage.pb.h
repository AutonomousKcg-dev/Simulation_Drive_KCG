// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientToEngineMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ClientToEngineMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ClientToEngineMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vectors.pb.h"
#include "CarConfiguration.pb.h"
#include "DrivingCommand.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ClientToEngineMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ClientToEngineMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[44]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ClientToEngineMessage_2eproto;
namespace Cognata {
namespace SDK {
class AIDriveConf;
class AIDriveConfDefaultTypeInternal;
extern AIDriveConfDefaultTypeInternal _AIDriveConf_default_instance_;
class CarCommand;
class CarCommandDefaultTypeInternal;
extern CarCommandDefaultTypeInternal _CarCommand_default_instance_;
class CarReportCommand;
class CarReportCommandDefaultTypeInternal;
extern CarReportCommandDefaultTypeInternal _CarReportCommand_default_instance_;
class CarsQuery;
class CarsQueryDefaultTypeInternal;
extern CarsQueryDefaultTypeInternal _CarsQuery_default_instance_;
class ClientToEngineMessage;
class ClientToEngineMessageDefaultTypeInternal;
extern ClientToEngineMessageDefaultTypeInternal _ClientToEngineMessage_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class ConfigurationCommand;
class ConfigurationCommandDefaultTypeInternal;
extern ConfigurationCommandDefaultTypeInternal _ConfigurationCommand_default_instance_;
class ControlTrafficLightsCommand;
class ControlTrafficLightsCommandDefaultTypeInternal;
extern ControlTrafficLightsCommandDefaultTypeInternal _ControlTrafficLightsCommand_default_instance_;
class DOGTModifiable;
class DOGTModifiableDefaultTypeInternal;
extern DOGTModifiableDefaultTypeInternal _DOGTModifiable_default_instance_;
class DespawnObject;
class DespawnObjectDefaultTypeInternal;
extern DespawnObjectDefaultTypeInternal _DespawnObject_default_instance_;
class DespawnObjects;
class DespawnObjectsDefaultTypeInternal;
extern DespawnObjectsDefaultTypeInternal _DespawnObjects_default_instance_;
class EngineVersionQuery;
class EngineVersionQueryDefaultTypeInternal;
extern EngineVersionQueryDefaultTypeInternal _EngineVersionQuery_default_instance_;
class GlobalSensorCommand;
class GlobalSensorCommandDefaultTypeInternal;
extern GlobalSensorCommandDefaultTypeInternal _GlobalSensorCommand_default_instance_;
class GlobalSensorsQuery;
class GlobalSensorsQueryDefaultTypeInternal;
extern GlobalSensorsQueryDefaultTypeInternal _GlobalSensorsQuery_default_instance_;
class LidarModifiable;
class LidarModifiableDefaultTypeInternal;
extern LidarModifiableDefaultTypeInternal _LidarModifiable_default_instance_;
class LogCommand;
class LogCommandDefaultTypeInternal;
extern LogCommandDefaultTypeInternal _LogCommand_default_instance_;
class ModifySensor;
class ModifySensorDefaultTypeInternal;
extern ModifySensorDefaultTypeInternal _ModifySensor_default_instance_;
class MovingObjectsQuery;
class MovingObjectsQueryDefaultTypeInternal;
extern MovingObjectsQueryDefaultTypeInternal _MovingObjectsQuery_default_instance_;
class NextFrame;
class NextFrameDefaultTypeInternal;
extern NextFrameDefaultTypeInternal _NextFrame_default_instance_;
class PidControlConfig;
class PidControlConfigDefaultTypeInternal;
extern PidControlConfigDefaultTypeInternal _PidControlConfig_default_instance_;
class PortQuery;
class PortQueryDefaultTypeInternal;
extern PortQueryDefaultTypeInternal _PortQuery_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class RGBCameraModifiable;
class RGBCameraModifiableDefaultTypeInternal;
extern RGBCameraModifiableDefaultTypeInternal _RGBCameraModifiable_default_instance_;
class RegisterSensor;
class RegisterSensorDefaultTypeInternal;
extern RegisterSensorDefaultTypeInternal _RegisterSensor_default_instance_;
class RunIdQuery;
class RunIdQueryDefaultTypeInternal;
extern RunIdQueryDefaultTypeInternal _RunIdQuery_default_instance_;
class Script;
class ScriptDefaultTypeInternal;
extern ScriptDefaultTypeInternal _Script_default_instance_;
class SdkDriveConf;
class SdkDriveConfDefaultTypeInternal;
extern SdkDriveConfDefaultTypeInternal _SdkDriveConf_default_instance_;
class SensorCommand;
class SensorCommandDefaultTypeInternal;
extern SensorCommandDefaultTypeInternal _SensorCommand_default_instance_;
class SensorPresetCloneCommand;
class SensorPresetCloneCommandDefaultTypeInternal;
extern SensorPresetCloneCommandDefaultTypeInternal _SensorPresetCloneCommand_default_instance_;
class SensorsQuery;
class SensorsQueryDefaultTypeInternal;
extern SensorsQueryDefaultTypeInternal _SensorsQuery_default_instance_;
class SimulationCommand;
class SimulationCommandDefaultTypeInternal;
extern SimulationCommandDefaultTypeInternal _SimulationCommand_default_instance_;
class SimulationTimeTrigger;
class SimulationTimeTriggerDefaultTypeInternal;
extern SimulationTimeTriggerDefaultTypeInternal _SimulationTimeTrigger_default_instance_;
class SpawnObject;
class SpawnObjectDefaultTypeInternal;
extern SpawnObjectDefaultTypeInternal _SpawnObject_default_instance_;
class SpawnObjects;
class SpawnObjectsDefaultTypeInternal;
extern SpawnObjectsDefaultTypeInternal _SpawnObjects_default_instance_;
class StartSimulation;
class StartSimulationDefaultTypeInternal;
extern StartSimulationDefaultTypeInternal _StartSimulation_default_instance_;
class StopSimulation;
class StopSimulationDefaultTypeInternal;
extern StopSimulationDefaultTypeInternal _StopSimulation_default_instance_;
class TeleportConfig;
class TeleportConfigDefaultTypeInternal;
extern TeleportConfigDefaultTypeInternal _TeleportConfig_default_instance_;
class Teleportation;
class TeleportationDefaultTypeInternal;
extern TeleportationDefaultTypeInternal _Teleportation_default_instance_;
class TerrainQuery;
class TerrainQueryDefaultTypeInternal;
extern TerrainQueryDefaultTypeInternal _TerrainQuery_default_instance_;
class TimeStepConfig;
class TimeStepConfigDefaultTypeInternal;
extern TimeStepConfigDefaultTypeInternal _TimeStepConfig_default_instance_;
class TrafficLightJunction;
class TrafficLightJunctionDefaultTypeInternal;
extern TrafficLightJunctionDefaultTypeInternal _TrafficLightJunction_default_instance_;
class TrafficLightState;
class TrafficLightStateDefaultTypeInternal;
extern TrafficLightStateDefaultTypeInternal _TrafficLightState_default_instance_;
class TrafficLightsCommand;
class TrafficLightsCommandDefaultTypeInternal;
extern TrafficLightsCommandDefaultTypeInternal _TrafficLightsCommand_default_instance_;
class VersionCommand;
class VersionCommandDefaultTypeInternal;
extern VersionCommandDefaultTypeInternal _VersionCommand_default_instance_;
}  // namespace SDK
}  // namespace Cognata
PROTOBUF_NAMESPACE_OPEN
template<> ::Cognata::SDK::AIDriveConf* Arena::CreateMaybeMessage<::Cognata::SDK::AIDriveConf>(Arena*);
template<> ::Cognata::SDK::CarCommand* Arena::CreateMaybeMessage<::Cognata::SDK::CarCommand>(Arena*);
template<> ::Cognata::SDK::CarReportCommand* Arena::CreateMaybeMessage<::Cognata::SDK::CarReportCommand>(Arena*);
template<> ::Cognata::SDK::CarsQuery* Arena::CreateMaybeMessage<::Cognata::SDK::CarsQuery>(Arena*);
template<> ::Cognata::SDK::ClientToEngineMessage* Arena::CreateMaybeMessage<::Cognata::SDK::ClientToEngineMessage>(Arena*);
template<> ::Cognata::SDK::Command* Arena::CreateMaybeMessage<::Cognata::SDK::Command>(Arena*);
template<> ::Cognata::SDK::ConfigurationCommand* Arena::CreateMaybeMessage<::Cognata::SDK::ConfigurationCommand>(Arena*);
template<> ::Cognata::SDK::ControlTrafficLightsCommand* Arena::CreateMaybeMessage<::Cognata::SDK::ControlTrafficLightsCommand>(Arena*);
template<> ::Cognata::SDK::DOGTModifiable* Arena::CreateMaybeMessage<::Cognata::SDK::DOGTModifiable>(Arena*);
template<> ::Cognata::SDK::DespawnObject* Arena::CreateMaybeMessage<::Cognata::SDK::DespawnObject>(Arena*);
template<> ::Cognata::SDK::DespawnObjects* Arena::CreateMaybeMessage<::Cognata::SDK::DespawnObjects>(Arena*);
template<> ::Cognata::SDK::EngineVersionQuery* Arena::CreateMaybeMessage<::Cognata::SDK::EngineVersionQuery>(Arena*);
template<> ::Cognata::SDK::GlobalSensorCommand* Arena::CreateMaybeMessage<::Cognata::SDK::GlobalSensorCommand>(Arena*);
template<> ::Cognata::SDK::GlobalSensorsQuery* Arena::CreateMaybeMessage<::Cognata::SDK::GlobalSensorsQuery>(Arena*);
template<> ::Cognata::SDK::LidarModifiable* Arena::CreateMaybeMessage<::Cognata::SDK::LidarModifiable>(Arena*);
template<> ::Cognata::SDK::LogCommand* Arena::CreateMaybeMessage<::Cognata::SDK::LogCommand>(Arena*);
template<> ::Cognata::SDK::ModifySensor* Arena::CreateMaybeMessage<::Cognata::SDK::ModifySensor>(Arena*);
template<> ::Cognata::SDK::MovingObjectsQuery* Arena::CreateMaybeMessage<::Cognata::SDK::MovingObjectsQuery>(Arena*);
template<> ::Cognata::SDK::NextFrame* Arena::CreateMaybeMessage<::Cognata::SDK::NextFrame>(Arena*);
template<> ::Cognata::SDK::PidControlConfig* Arena::CreateMaybeMessage<::Cognata::SDK::PidControlConfig>(Arena*);
template<> ::Cognata::SDK::PortQuery* Arena::CreateMaybeMessage<::Cognata::SDK::PortQuery>(Arena*);
template<> ::Cognata::SDK::Query* Arena::CreateMaybeMessage<::Cognata::SDK::Query>(Arena*);
template<> ::Cognata::SDK::RGBCameraModifiable* Arena::CreateMaybeMessage<::Cognata::SDK::RGBCameraModifiable>(Arena*);
template<> ::Cognata::SDK::RegisterSensor* Arena::CreateMaybeMessage<::Cognata::SDK::RegisterSensor>(Arena*);
template<> ::Cognata::SDK::RunIdQuery* Arena::CreateMaybeMessage<::Cognata::SDK::RunIdQuery>(Arena*);
template<> ::Cognata::SDK::Script* Arena::CreateMaybeMessage<::Cognata::SDK::Script>(Arena*);
template<> ::Cognata::SDK::SdkDriveConf* Arena::CreateMaybeMessage<::Cognata::SDK::SdkDriveConf>(Arena*);
template<> ::Cognata::SDK::SensorCommand* Arena::CreateMaybeMessage<::Cognata::SDK::SensorCommand>(Arena*);
template<> ::Cognata::SDK::SensorPresetCloneCommand* Arena::CreateMaybeMessage<::Cognata::SDK::SensorPresetCloneCommand>(Arena*);
template<> ::Cognata::SDK::SensorsQuery* Arena::CreateMaybeMessage<::Cognata::SDK::SensorsQuery>(Arena*);
template<> ::Cognata::SDK::SimulationCommand* Arena::CreateMaybeMessage<::Cognata::SDK::SimulationCommand>(Arena*);
template<> ::Cognata::SDK::SimulationTimeTrigger* Arena::CreateMaybeMessage<::Cognata::SDK::SimulationTimeTrigger>(Arena*);
template<> ::Cognata::SDK::SpawnObject* Arena::CreateMaybeMessage<::Cognata::SDK::SpawnObject>(Arena*);
template<> ::Cognata::SDK::SpawnObjects* Arena::CreateMaybeMessage<::Cognata::SDK::SpawnObjects>(Arena*);
template<> ::Cognata::SDK::StartSimulation* Arena::CreateMaybeMessage<::Cognata::SDK::StartSimulation>(Arena*);
template<> ::Cognata::SDK::StopSimulation* Arena::CreateMaybeMessage<::Cognata::SDK::StopSimulation>(Arena*);
template<> ::Cognata::SDK::TeleportConfig* Arena::CreateMaybeMessage<::Cognata::SDK::TeleportConfig>(Arena*);
template<> ::Cognata::SDK::Teleportation* Arena::CreateMaybeMessage<::Cognata::SDK::Teleportation>(Arena*);
template<> ::Cognata::SDK::TerrainQuery* Arena::CreateMaybeMessage<::Cognata::SDK::TerrainQuery>(Arena*);
template<> ::Cognata::SDK::TimeStepConfig* Arena::CreateMaybeMessage<::Cognata::SDK::TimeStepConfig>(Arena*);
template<> ::Cognata::SDK::TrafficLightJunction* Arena::CreateMaybeMessage<::Cognata::SDK::TrafficLightJunction>(Arena*);
template<> ::Cognata::SDK::TrafficLightState* Arena::CreateMaybeMessage<::Cognata::SDK::TrafficLightState>(Arena*);
template<> ::Cognata::SDK::TrafficLightsCommand* Arena::CreateMaybeMessage<::Cognata::SDK::TrafficLightsCommand>(Arena*);
template<> ::Cognata::SDK::VersionCommand* Arena::CreateMaybeMessage<::Cognata::SDK::VersionCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Cognata {
namespace SDK {

enum Teleportation_NextLaneChoice : int {
  Teleportation_NextLaneChoice_NoChange = 0,
  Teleportation_NextLaneChoice_Left = 1,
  Teleportation_NextLaneChoice_Right = 2,
  Teleportation_NextLaneChoice_Teleportation_NextLaneChoice_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Teleportation_NextLaneChoice_Teleportation_NextLaneChoice_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Teleportation_NextLaneChoice_IsValid(int value);
constexpr Teleportation_NextLaneChoice Teleportation_NextLaneChoice_NextLaneChoice_MIN = Teleportation_NextLaneChoice_NoChange;
constexpr Teleportation_NextLaneChoice Teleportation_NextLaneChoice_NextLaneChoice_MAX = Teleportation_NextLaneChoice_Right;
constexpr int Teleportation_NextLaneChoice_NextLaneChoice_ARRAYSIZE = Teleportation_NextLaneChoice_NextLaneChoice_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Teleportation_NextLaneChoice_descriptor();
template<typename T>
inline const std::string& Teleportation_NextLaneChoice_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Teleportation_NextLaneChoice>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Teleportation_NextLaneChoice_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Teleportation_NextLaneChoice_descriptor(), enum_t_value);
}
inline bool Teleportation_NextLaneChoice_Parse(
    const std::string& name, Teleportation_NextLaneChoice* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Teleportation_NextLaneChoice>(
    Teleportation_NextLaneChoice_descriptor(), name, value);
}
enum RGBCameraModifiable_FrameGrabbingMode : int {
  RGBCameraModifiable_FrameGrabbingMode_Disabled = 0,
  RGBCameraModifiable_FrameGrabbingMode_CUDA = 1,
  RGBCameraModifiable_FrameGrabbingMode_RGBCameraModifiable_FrameGrabbingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RGBCameraModifiable_FrameGrabbingMode_RGBCameraModifiable_FrameGrabbingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RGBCameraModifiable_FrameGrabbingMode_IsValid(int value);
constexpr RGBCameraModifiable_FrameGrabbingMode RGBCameraModifiable_FrameGrabbingMode_FrameGrabbingMode_MIN = RGBCameraModifiable_FrameGrabbingMode_Disabled;
constexpr RGBCameraModifiable_FrameGrabbingMode RGBCameraModifiable_FrameGrabbingMode_FrameGrabbingMode_MAX = RGBCameraModifiable_FrameGrabbingMode_CUDA;
constexpr int RGBCameraModifiable_FrameGrabbingMode_FrameGrabbingMode_ARRAYSIZE = RGBCameraModifiable_FrameGrabbingMode_FrameGrabbingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RGBCameraModifiable_FrameGrabbingMode_descriptor();
template<typename T>
inline const std::string& RGBCameraModifiable_FrameGrabbingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RGBCameraModifiable_FrameGrabbingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RGBCameraModifiable_FrameGrabbingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RGBCameraModifiable_FrameGrabbingMode_descriptor(), enum_t_value);
}
inline bool RGBCameraModifiable_FrameGrabbingMode_Parse(
    const std::string& name, RGBCameraModifiable_FrameGrabbingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RGBCameraModifiable_FrameGrabbingMode>(
    RGBCameraModifiable_FrameGrabbingMode_descriptor(), name, value);
}
enum TeleportConfig_Dimensions : int {
  TeleportConfig_Dimensions_TwoD = 0,
  TeleportConfig_Dimensions_ThreeD = 1,
  TeleportConfig_Dimensions_TeleportConfig_Dimensions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TeleportConfig_Dimensions_TeleportConfig_Dimensions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TeleportConfig_Dimensions_IsValid(int value);
constexpr TeleportConfig_Dimensions TeleportConfig_Dimensions_Dimensions_MIN = TeleportConfig_Dimensions_TwoD;
constexpr TeleportConfig_Dimensions TeleportConfig_Dimensions_Dimensions_MAX = TeleportConfig_Dimensions_ThreeD;
constexpr int TeleportConfig_Dimensions_Dimensions_ARRAYSIZE = TeleportConfig_Dimensions_Dimensions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleportConfig_Dimensions_descriptor();
template<typename T>
inline const std::string& TeleportConfig_Dimensions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeleportConfig_Dimensions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeleportConfig_Dimensions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeleportConfig_Dimensions_descriptor(), enum_t_value);
}
inline bool TeleportConfig_Dimensions_Parse(
    const std::string& name, TeleportConfig_Dimensions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeleportConfig_Dimensions>(
    TeleportConfig_Dimensions_descriptor(), name, value);
}
enum TrafficLightState_State : int {
  TrafficLightState_State_Green = 0,
  TrafficLightState_State_Yellow = 1,
  TrafficLightState_State_Red = 2,
  TrafficLightState_State_Off = 3,
  TrafficLightState_State_TrafficLightState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrafficLightState_State_TrafficLightState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrafficLightState_State_IsValid(int value);
constexpr TrafficLightState_State TrafficLightState_State_State_MIN = TrafficLightState_State_Green;
constexpr TrafficLightState_State TrafficLightState_State_State_MAX = TrafficLightState_State_Off;
constexpr int TrafficLightState_State_State_ARRAYSIZE = TrafficLightState_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLightState_State_descriptor();
template<typename T>
inline const std::string& TrafficLightState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficLightState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficLightState_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficLightState_State_descriptor(), enum_t_value);
}
inline bool TrafficLightState_State_Parse(
    const std::string& name, TrafficLightState_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficLightState_State>(
    TrafficLightState_State_descriptor(), name, value);
}
enum SpawnObjectType : int {
  DYNAMIC_OBJECT = 0,
  MOVING_OBJECT = 1,
  SpawnObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SpawnObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SpawnObjectType_IsValid(int value);
constexpr SpawnObjectType SpawnObjectType_MIN = DYNAMIC_OBJECT;
constexpr SpawnObjectType SpawnObjectType_MAX = MOVING_OBJECT;
constexpr int SpawnObjectType_ARRAYSIZE = SpawnObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpawnObjectType_descriptor();
template<typename T>
inline const std::string& SpawnObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpawnObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpawnObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpawnObjectType_descriptor(), enum_t_value);
}
inline bool SpawnObjectType_Parse(
    const std::string& name, SpawnObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpawnObjectType>(
    SpawnObjectType_descriptor(), name, value);
}
enum UniqueSensorID : int {
  UNKNOWN = 0,
  ROIID = 100,
  GPSID = 101,
  CARTELEMETRYID = 102,
  DOGTID = 200,
  UniqueSensorID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UniqueSensorID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UniqueSensorID_IsValid(int value);
constexpr UniqueSensorID UniqueSensorID_MIN = UNKNOWN;
constexpr UniqueSensorID UniqueSensorID_MAX = DOGTID;
constexpr int UniqueSensorID_ARRAYSIZE = UniqueSensorID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UniqueSensorID_descriptor();
template<typename T>
inline const std::string& UniqueSensorID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UniqueSensorID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UniqueSensorID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UniqueSensorID_descriptor(), enum_t_value);
}
inline bool UniqueSensorID_Parse(
    const std::string& name, UniqueSensorID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UniqueSensorID>(
    UniqueSensorID_descriptor(), name, value);
}
// ===================================================================

class ClientToEngineMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ClientToEngineMessage) */ {
 public:
  ClientToEngineMessage();
  virtual ~ClientToEngineMessage();

  ClientToEngineMessage(const ClientToEngineMessage& from);
  ClientToEngineMessage(ClientToEngineMessage&& from) noexcept
    : ClientToEngineMessage() {
    *this = ::std::move(from);
  }

  inline ClientToEngineMessage& operator=(const ClientToEngineMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientToEngineMessage& operator=(ClientToEngineMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientToEngineMessage& default_instance();

  enum MsgCase {
    kQuery = 10,
    kCommand = 11,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientToEngineMessage* internal_default_instance() {
    return reinterpret_cast<const ClientToEngineMessage*>(
               &_ClientToEngineMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientToEngineMessage* other);
  friend void swap(ClientToEngineMessage& a, ClientToEngineMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientToEngineMessage* New() const final {
    return CreateMaybeMessage<ClientToEngineMessage>(nullptr);
  }

  ClientToEngineMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientToEngineMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientToEngineMessage& from);
  void MergeFrom(const ClientToEngineMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientToEngineMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ClientToEngineMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.Query query = 10;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 10;
  const ::Cognata::SDK::Query& query() const;
  ::Cognata::SDK::Query* release_query();
  ::Cognata::SDK::Query* mutable_query();
  void set_allocated_query(::Cognata::SDK::Query* query);

  // .Cognata.SDK.Command command = 11;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 11;
  const ::Cognata::SDK::Command& command() const;
  ::Cognata::SDK::Command* release_command();
  ::Cognata::SDK::Command* mutable_command();
  void set_allocated_command(::Cognata::SDK::Command* command);

  void clear_Msg();
  MsgCase Msg_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.ClientToEngineMessage)
 private:
  class HasBitSetters;
  void set_has_query();
  void set_has_command();

  inline bool has_Msg() const;
  inline void clear_has_Msg();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union MsgUnion {
    MsgUnion() {}
    ::Cognata::SDK::Query* query_;
    ::Cognata::SDK::Command* command_;
  } Msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class Query :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Query& default_instance();

  enum QueryTypeCase {
    kSensorsQuery = 10,
    kEngineVersionQuery = 11,
    kCarsQuery = 12,
    kTerrainQuery = 13,
    kMovingObjectsQuery = 14,
    kGlobalSensorsQuery = 15,
    kPortQuery = 16,
    kRunIdQuery = 17,
    QUERYTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Query* other);
  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(nullptr);
  }

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Query";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.SensorsQuery sensorsQuery = 10;
  bool has_sensorsquery() const;
  void clear_sensorsquery();
  static const int kSensorsQueryFieldNumber = 10;
  const ::Cognata::SDK::SensorsQuery& sensorsquery() const;
  ::Cognata::SDK::SensorsQuery* release_sensorsquery();
  ::Cognata::SDK::SensorsQuery* mutable_sensorsquery();
  void set_allocated_sensorsquery(::Cognata::SDK::SensorsQuery* sensorsquery);

  // .Cognata.SDK.EngineVersionQuery engineVersionQuery = 11;
  bool has_engineversionquery() const;
  void clear_engineversionquery();
  static const int kEngineVersionQueryFieldNumber = 11;
  const ::Cognata::SDK::EngineVersionQuery& engineversionquery() const;
  ::Cognata::SDK::EngineVersionQuery* release_engineversionquery();
  ::Cognata::SDK::EngineVersionQuery* mutable_engineversionquery();
  void set_allocated_engineversionquery(::Cognata::SDK::EngineVersionQuery* engineversionquery);

  // .Cognata.SDK.CarsQuery carsQuery = 12;
  bool has_carsquery() const;
  void clear_carsquery();
  static const int kCarsQueryFieldNumber = 12;
  const ::Cognata::SDK::CarsQuery& carsquery() const;
  ::Cognata::SDK::CarsQuery* release_carsquery();
  ::Cognata::SDK::CarsQuery* mutable_carsquery();
  void set_allocated_carsquery(::Cognata::SDK::CarsQuery* carsquery);

  // .Cognata.SDK.TerrainQuery terrainQuery = 13;
  bool has_terrainquery() const;
  void clear_terrainquery();
  static const int kTerrainQueryFieldNumber = 13;
  const ::Cognata::SDK::TerrainQuery& terrainquery() const;
  ::Cognata::SDK::TerrainQuery* release_terrainquery();
  ::Cognata::SDK::TerrainQuery* mutable_terrainquery();
  void set_allocated_terrainquery(::Cognata::SDK::TerrainQuery* terrainquery);

  // .Cognata.SDK.MovingObjectsQuery movingObjectsQuery = 14;
  bool has_movingobjectsquery() const;
  void clear_movingobjectsquery();
  static const int kMovingObjectsQueryFieldNumber = 14;
  const ::Cognata::SDK::MovingObjectsQuery& movingobjectsquery() const;
  ::Cognata::SDK::MovingObjectsQuery* release_movingobjectsquery();
  ::Cognata::SDK::MovingObjectsQuery* mutable_movingobjectsquery();
  void set_allocated_movingobjectsquery(::Cognata::SDK::MovingObjectsQuery* movingobjectsquery);

  // .Cognata.SDK.GlobalSensorsQuery globalSensorsQuery = 15;
  bool has_globalsensorsquery() const;
  void clear_globalsensorsquery();
  static const int kGlobalSensorsQueryFieldNumber = 15;
  const ::Cognata::SDK::GlobalSensorsQuery& globalsensorsquery() const;
  ::Cognata::SDK::GlobalSensorsQuery* release_globalsensorsquery();
  ::Cognata::SDK::GlobalSensorsQuery* mutable_globalsensorsquery();
  void set_allocated_globalsensorsquery(::Cognata::SDK::GlobalSensorsQuery* globalsensorsquery);

  // .Cognata.SDK.PortQuery portQuery = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_portquery() const;
  PROTOBUF_DEPRECATED void clear_portquery();
  PROTOBUF_DEPRECATED static const int kPortQueryFieldNumber = 16;
  PROTOBUF_DEPRECATED const ::Cognata::SDK::PortQuery& portquery() const;
  PROTOBUF_DEPRECATED ::Cognata::SDK::PortQuery* release_portquery();
  PROTOBUF_DEPRECATED ::Cognata::SDK::PortQuery* mutable_portquery();
  PROTOBUF_DEPRECATED void set_allocated_portquery(::Cognata::SDK::PortQuery* portquery);

  // .Cognata.SDK.RunIdQuery RunIdQuery = 17;
  bool has_runidquery() const;
  void clear_runidquery();
  static const int kRunIdQueryFieldNumber = 17;
  const ::Cognata::SDK::RunIdQuery& runidquery() const;
  ::Cognata::SDK::RunIdQuery* release_runidquery();
  ::Cognata::SDK::RunIdQuery* mutable_runidquery();
  void set_allocated_runidquery(::Cognata::SDK::RunIdQuery* runidquery);

  void clear_QueryType();
  QueryTypeCase QueryType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.Query)
 private:
  class HasBitSetters;
  void set_has_sensorsquery();
  void set_has_engineversionquery();
  void set_has_carsquery();
  void set_has_terrainquery();
  void set_has_movingobjectsquery();
  void set_has_globalsensorsquery();
  void set_has_portquery();
  void set_has_runidquery();

  inline bool has_QueryType() const;
  inline void clear_has_QueryType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union QueryTypeUnion {
    QueryTypeUnion() {}
    ::Cognata::SDK::SensorsQuery* sensorsquery_;
    ::Cognata::SDK::EngineVersionQuery* engineversionquery_;
    ::Cognata::SDK::CarsQuery* carsquery_;
    ::Cognata::SDK::TerrainQuery* terrainquery_;
    ::Cognata::SDK::MovingObjectsQuery* movingobjectsquery_;
    ::Cognata::SDK::GlobalSensorsQuery* globalsensorsquery_;
    ::Cognata::SDK::PortQuery* portquery_;
    ::Cognata::SDK::RunIdQuery* runidquery_;
  } QueryType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  enum CommandTypeCase {
    kCarCommand = 10,
    kSimulationCommand = 11,
    kSensorCommand = 12,
    kLogCommand = 13,
    kConfigurationCommand = 14,
    kGlobalSensorCommand = 15,
    kVersionCommand = 16,
    kSpawnObjects = 17,
    kDespawnObjects = 18,
    kCarReportCommand = 19,
    kControlTrafficLightsCommand = 20,
    kTrafficLightsCommand = 21,
    COMMANDTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.CarCommand carCommand = 10;
  bool has_carcommand() const;
  void clear_carcommand();
  static const int kCarCommandFieldNumber = 10;
  const ::Cognata::SDK::CarCommand& carcommand() const;
  ::Cognata::SDK::CarCommand* release_carcommand();
  ::Cognata::SDK::CarCommand* mutable_carcommand();
  void set_allocated_carcommand(::Cognata::SDK::CarCommand* carcommand);

  // .Cognata.SDK.SimulationCommand simulationCommand = 11;
  bool has_simulationcommand() const;
  void clear_simulationcommand();
  static const int kSimulationCommandFieldNumber = 11;
  const ::Cognata::SDK::SimulationCommand& simulationcommand() const;
  ::Cognata::SDK::SimulationCommand* release_simulationcommand();
  ::Cognata::SDK::SimulationCommand* mutable_simulationcommand();
  void set_allocated_simulationcommand(::Cognata::SDK::SimulationCommand* simulationcommand);

  // .Cognata.SDK.SensorCommand sensorCommand = 12;
  bool has_sensorcommand() const;
  void clear_sensorcommand();
  static const int kSensorCommandFieldNumber = 12;
  const ::Cognata::SDK::SensorCommand& sensorcommand() const;
  ::Cognata::SDK::SensorCommand* release_sensorcommand();
  ::Cognata::SDK::SensorCommand* mutable_sensorcommand();
  void set_allocated_sensorcommand(::Cognata::SDK::SensorCommand* sensorcommand);

  // .Cognata.SDK.LogCommand logCommand = 13;
  bool has_logcommand() const;
  void clear_logcommand();
  static const int kLogCommandFieldNumber = 13;
  const ::Cognata::SDK::LogCommand& logcommand() const;
  ::Cognata::SDK::LogCommand* release_logcommand();
  ::Cognata::SDK::LogCommand* mutable_logcommand();
  void set_allocated_logcommand(::Cognata::SDK::LogCommand* logcommand);

  // .Cognata.SDK.ConfigurationCommand configurationCommand = 14;
  bool has_configurationcommand() const;
  void clear_configurationcommand();
  static const int kConfigurationCommandFieldNumber = 14;
  const ::Cognata::SDK::ConfigurationCommand& configurationcommand() const;
  ::Cognata::SDK::ConfigurationCommand* release_configurationcommand();
  ::Cognata::SDK::ConfigurationCommand* mutable_configurationcommand();
  void set_allocated_configurationcommand(::Cognata::SDK::ConfigurationCommand* configurationcommand);

  // .Cognata.SDK.GlobalSensorCommand globalSensorCommand = 15;
  bool has_globalsensorcommand() const;
  void clear_globalsensorcommand();
  static const int kGlobalSensorCommandFieldNumber = 15;
  const ::Cognata::SDK::GlobalSensorCommand& globalsensorcommand() const;
  ::Cognata::SDK::GlobalSensorCommand* release_globalsensorcommand();
  ::Cognata::SDK::GlobalSensorCommand* mutable_globalsensorcommand();
  void set_allocated_globalsensorcommand(::Cognata::SDK::GlobalSensorCommand* globalsensorcommand);

  // .Cognata.SDK.VersionCommand versionCommand = 16;
  bool has_versioncommand() const;
  void clear_versioncommand();
  static const int kVersionCommandFieldNumber = 16;
  const ::Cognata::SDK::VersionCommand& versioncommand() const;
  ::Cognata::SDK::VersionCommand* release_versioncommand();
  ::Cognata::SDK::VersionCommand* mutable_versioncommand();
  void set_allocated_versioncommand(::Cognata::SDK::VersionCommand* versioncommand);

  // .Cognata.SDK.SpawnObjects spawnObjects = 17;
  bool has_spawnobjects() const;
  void clear_spawnobjects();
  static const int kSpawnObjectsFieldNumber = 17;
  const ::Cognata::SDK::SpawnObjects& spawnobjects() const;
  ::Cognata::SDK::SpawnObjects* release_spawnobjects();
  ::Cognata::SDK::SpawnObjects* mutable_spawnobjects();
  void set_allocated_spawnobjects(::Cognata::SDK::SpawnObjects* spawnobjects);

  // .Cognata.SDK.DespawnObjects despawnObjects = 18;
  bool has_despawnobjects() const;
  void clear_despawnobjects();
  static const int kDespawnObjectsFieldNumber = 18;
  const ::Cognata::SDK::DespawnObjects& despawnobjects() const;
  ::Cognata::SDK::DespawnObjects* release_despawnobjects();
  ::Cognata::SDK::DespawnObjects* mutable_despawnobjects();
  void set_allocated_despawnobjects(::Cognata::SDK::DespawnObjects* despawnobjects);

  // .Cognata.SDK.CarReportCommand carReportCommand = 19;
  bool has_carreportcommand() const;
  void clear_carreportcommand();
  static const int kCarReportCommandFieldNumber = 19;
  const ::Cognata::SDK::CarReportCommand& carreportcommand() const;
  ::Cognata::SDK::CarReportCommand* release_carreportcommand();
  ::Cognata::SDK::CarReportCommand* mutable_carreportcommand();
  void set_allocated_carreportcommand(::Cognata::SDK::CarReportCommand* carreportcommand);

  // .Cognata.SDK.ControlTrafficLightsCommand controlTrafficLightsCommand = 20;
  bool has_controltrafficlightscommand() const;
  void clear_controltrafficlightscommand();
  static const int kControlTrafficLightsCommandFieldNumber = 20;
  const ::Cognata::SDK::ControlTrafficLightsCommand& controltrafficlightscommand() const;
  ::Cognata::SDK::ControlTrafficLightsCommand* release_controltrafficlightscommand();
  ::Cognata::SDK::ControlTrafficLightsCommand* mutable_controltrafficlightscommand();
  void set_allocated_controltrafficlightscommand(::Cognata::SDK::ControlTrafficLightsCommand* controltrafficlightscommand);

  // .Cognata.SDK.TrafficLightsCommand trafficLightsCommand = 21;
  bool has_trafficlightscommand() const;
  void clear_trafficlightscommand();
  static const int kTrafficLightsCommandFieldNumber = 21;
  const ::Cognata::SDK::TrafficLightsCommand& trafficlightscommand() const;
  ::Cognata::SDK::TrafficLightsCommand* release_trafficlightscommand();
  ::Cognata::SDK::TrafficLightsCommand* mutable_trafficlightscommand();
  void set_allocated_trafficlightscommand(::Cognata::SDK::TrafficLightsCommand* trafficlightscommand);

  void clear_CommandType();
  CommandTypeCase CommandType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.Command)
 private:
  class HasBitSetters;
  void set_has_carcommand();
  void set_has_simulationcommand();
  void set_has_sensorcommand();
  void set_has_logcommand();
  void set_has_configurationcommand();
  void set_has_globalsensorcommand();
  void set_has_versioncommand();
  void set_has_spawnobjects();
  void set_has_despawnobjects();
  void set_has_carreportcommand();
  void set_has_controltrafficlightscommand();
  void set_has_trafficlightscommand();

  inline bool has_CommandType() const;
  inline void clear_has_CommandType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union CommandTypeUnion {
    CommandTypeUnion() {}
    ::Cognata::SDK::CarCommand* carcommand_;
    ::Cognata::SDK::SimulationCommand* simulationcommand_;
    ::Cognata::SDK::SensorCommand* sensorcommand_;
    ::Cognata::SDK::LogCommand* logcommand_;
    ::Cognata::SDK::ConfigurationCommand* configurationcommand_;
    ::Cognata::SDK::GlobalSensorCommand* globalsensorcommand_;
    ::Cognata::SDK::VersionCommand* versioncommand_;
    ::Cognata::SDK::SpawnObjects* spawnobjects_;
    ::Cognata::SDK::DespawnObjects* despawnobjects_;
    ::Cognata::SDK::CarReportCommand* carreportcommand_;
    ::Cognata::SDK::ControlTrafficLightsCommand* controltrafficlightscommand_;
    ::Cognata::SDK::TrafficLightsCommand* trafficlightscommand_;
  } CommandType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class RunIdQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RunIdQuery) */ {
 public:
  RunIdQuery();
  virtual ~RunIdQuery();

  RunIdQuery(const RunIdQuery& from);
  RunIdQuery(RunIdQuery&& from) noexcept
    : RunIdQuery() {
    *this = ::std::move(from);
  }

  inline RunIdQuery& operator=(const RunIdQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunIdQuery& operator=(RunIdQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunIdQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunIdQuery* internal_default_instance() {
    return reinterpret_cast<const RunIdQuery*>(
               &_RunIdQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RunIdQuery* other);
  friend void swap(RunIdQuery& a, RunIdQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunIdQuery* New() const final {
    return CreateMaybeMessage<RunIdQuery>(nullptr);
  }

  RunIdQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunIdQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunIdQuery& from);
  void MergeFrom(const RunIdQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunIdQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RunIdQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RunIdQuery)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class PortQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.PortQuery) */ {
 public:
  PortQuery();
  virtual ~PortQuery();

  PortQuery(const PortQuery& from);
  PortQuery(PortQuery&& from) noexcept
    : PortQuery() {
    *this = ::std::move(from);
  }

  inline PortQuery& operator=(const PortQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortQuery& operator=(PortQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortQuery* internal_default_instance() {
    return reinterpret_cast<const PortQuery*>(
               &_PortQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PortQuery* other);
  friend void swap(PortQuery& a, PortQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PortQuery* New() const final {
    return CreateMaybeMessage<PortQuery>(nullptr);
  }

  PortQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortQuery& from);
  void MergeFrom(const PortQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.PortQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.PortQuery)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class SensorsQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SensorsQuery) */ {
 public:
  SensorsQuery();
  virtual ~SensorsQuery();

  SensorsQuery(const SensorsQuery& from);
  SensorsQuery(SensorsQuery&& from) noexcept
    : SensorsQuery() {
    *this = ::std::move(from);
  }

  inline SensorsQuery& operator=(const SensorsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorsQuery& operator=(SensorsQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorsQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorsQuery* internal_default_instance() {
    return reinterpret_cast<const SensorsQuery*>(
               &_SensorsQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SensorsQuery* other);
  friend void swap(SensorsQuery& a, SensorsQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorsQuery* New() const final {
    return CreateMaybeMessage<SensorsQuery>(nullptr);
  }

  SensorsQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorsQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorsQuery& from);
  void MergeFrom(const SensorsQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorsQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SensorsQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 carId = 1;
  void clear_carid();
  static const int kCarIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 carid() const;
  void set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SensorsQuery)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class GlobalSensorsQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GlobalSensorsQuery) */ {
 public:
  GlobalSensorsQuery();
  virtual ~GlobalSensorsQuery();

  GlobalSensorsQuery(const GlobalSensorsQuery& from);
  GlobalSensorsQuery(GlobalSensorsQuery&& from) noexcept
    : GlobalSensorsQuery() {
    *this = ::std::move(from);
  }

  inline GlobalSensorsQuery& operator=(const GlobalSensorsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSensorsQuery& operator=(GlobalSensorsQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalSensorsQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSensorsQuery* internal_default_instance() {
    return reinterpret_cast<const GlobalSensorsQuery*>(
               &_GlobalSensorsQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GlobalSensorsQuery* other);
  friend void swap(GlobalSensorsQuery& a, GlobalSensorsQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalSensorsQuery* New() const final {
    return CreateMaybeMessage<GlobalSensorsQuery>(nullptr);
  }

  GlobalSensorsQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSensorsQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalSensorsQuery& from);
  void MergeFrom(const GlobalSensorsQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalSensorsQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GlobalSensorsQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.GlobalSensorsQuery)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class EngineVersionQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.EngineVersionQuery) */ {
 public:
  EngineVersionQuery();
  virtual ~EngineVersionQuery();

  EngineVersionQuery(const EngineVersionQuery& from);
  EngineVersionQuery(EngineVersionQuery&& from) noexcept
    : EngineVersionQuery() {
    *this = ::std::move(from);
  }

  inline EngineVersionQuery& operator=(const EngineVersionQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineVersionQuery& operator=(EngineVersionQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineVersionQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EngineVersionQuery* internal_default_instance() {
    return reinterpret_cast<const EngineVersionQuery*>(
               &_EngineVersionQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(EngineVersionQuery* other);
  friend void swap(EngineVersionQuery& a, EngineVersionQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EngineVersionQuery* New() const final {
    return CreateMaybeMessage<EngineVersionQuery>(nullptr);
  }

  EngineVersionQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineVersionQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineVersionQuery& from);
  void MergeFrom(const EngineVersionQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineVersionQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.EngineVersionQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.EngineVersionQuery)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class CarsQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.CarsQuery) */ {
 public:
  CarsQuery();
  virtual ~CarsQuery();

  CarsQuery(const CarsQuery& from);
  CarsQuery(CarsQuery&& from) noexcept
    : CarsQuery() {
    *this = ::std::move(from);
  }

  inline CarsQuery& operator=(const CarsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarsQuery& operator=(CarsQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarsQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarsQuery* internal_default_instance() {
    return reinterpret_cast<const CarsQuery*>(
               &_CarsQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CarsQuery* other);
  friend void swap(CarsQuery& a, CarsQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarsQuery* New() const final {
    return CreateMaybeMessage<CarsQuery>(nullptr);
  }

  CarsQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarsQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarsQuery& from);
  void MergeFrom(const CarsQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarsQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.CarsQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string clientNameFilter = 1;
  void clear_clientnamefilter();
  static const int kClientNameFilterFieldNumber = 1;
  const std::string& clientnamefilter() const;
  void set_clientnamefilter(const std::string& value);
  void set_clientnamefilter(std::string&& value);
  void set_clientnamefilter(const char* value);
  void set_clientnamefilter(const char* value, size_t size);
  std::string* mutable_clientnamefilter();
  std::string* release_clientnamefilter();
  void set_allocated_clientnamefilter(std::string* clientnamefilter);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.CarsQuery)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientnamefilter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class MovingObjectsQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.MovingObjectsQuery) */ {
 public:
  MovingObjectsQuery();
  virtual ~MovingObjectsQuery();

  MovingObjectsQuery(const MovingObjectsQuery& from);
  MovingObjectsQuery(MovingObjectsQuery&& from) noexcept
    : MovingObjectsQuery() {
    *this = ::std::move(from);
  }

  inline MovingObjectsQuery& operator=(const MovingObjectsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovingObjectsQuery& operator=(MovingObjectsQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovingObjectsQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MovingObjectsQuery* internal_default_instance() {
    return reinterpret_cast<const MovingObjectsQuery*>(
               &_MovingObjectsQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(MovingObjectsQuery* other);
  friend void swap(MovingObjectsQuery& a, MovingObjectsQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MovingObjectsQuery* New() const final {
    return CreateMaybeMessage<MovingObjectsQuery>(nullptr);
  }

  MovingObjectsQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovingObjectsQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovingObjectsQuery& from);
  void MergeFrom(const MovingObjectsQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovingObjectsQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.MovingObjectsQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.MovingObjectsQuery)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class TerrainQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.TerrainQuery) */ {
 public:
  TerrainQuery();
  virtual ~TerrainQuery();

  TerrainQuery(const TerrainQuery& from);
  TerrainQuery(TerrainQuery&& from) noexcept
    : TerrainQuery() {
    *this = ::std::move(from);
  }

  inline TerrainQuery& operator=(const TerrainQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerrainQuery& operator=(TerrainQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TerrainQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TerrainQuery* internal_default_instance() {
    return reinterpret_cast<const TerrainQuery*>(
               &_TerrainQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TerrainQuery* other);
  friend void swap(TerrainQuery& a, TerrainQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TerrainQuery* New() const final {
    return CreateMaybeMessage<TerrainQuery>(nullptr);
  }

  TerrainQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TerrainQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TerrainQuery& from);
  void MergeFrom(const TerrainQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerrainQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.TerrainQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.TerrainQuery)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class CarCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.CarCommand) */ {
 public:
  CarCommand();
  virtual ~CarCommand();

  CarCommand(const CarCommand& from);
  CarCommand(CarCommand&& from) noexcept
    : CarCommand() {
    *this = ::std::move(from);
  }

  inline CarCommand& operator=(const CarCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarCommand& operator=(CarCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarCommand& default_instance();

  enum CommandTypeCase {
    kDrive = 10,
    kTeleport = 11,
    kAiDriving = 12,
    kDrivingCommand = 13,
    kSdkDriving = 14,
    kSensorPresetCloneCommand = 15,
    COMMANDTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarCommand* internal_default_instance() {
    return reinterpret_cast<const CarCommand*>(
               &_CarCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CarCommand* other);
  friend void swap(CarCommand& a, CarCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarCommand* New() const final {
    return CreateMaybeMessage<CarCommand>(nullptr);
  }

  CarCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarCommand& from);
  void MergeFrom(const CarCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.CarCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .Cognata.SDK.CarConfiguration drive = 10;
  bool has_drive() const;
  void clear_drive();
  static const int kDriveFieldNumber = 10;
  const ::Cognata::SDK::CarConfiguration& drive() const;
  ::Cognata::SDK::CarConfiguration* release_drive();
  ::Cognata::SDK::CarConfiguration* mutable_drive();
  void set_allocated_drive(::Cognata::SDK::CarConfiguration* drive);

  // .Cognata.SDK.Teleportation teleport = 11;
  bool has_teleport() const;
  void clear_teleport();
  static const int kTeleportFieldNumber = 11;
  const ::Cognata::SDK::Teleportation& teleport() const;
  ::Cognata::SDK::Teleportation* release_teleport();
  ::Cognata::SDK::Teleportation* mutable_teleport();
  void set_allocated_teleport(::Cognata::SDK::Teleportation* teleport);

  // .Cognata.SDK.AIDriveConf aiDriving = 12;
  bool has_aidriving() const;
  void clear_aidriving();
  static const int kAiDrivingFieldNumber = 12;
  const ::Cognata::SDK::AIDriveConf& aidriving() const;
  ::Cognata::SDK::AIDriveConf* release_aidriving();
  ::Cognata::SDK::AIDriveConf* mutable_aidriving();
  void set_allocated_aidriving(::Cognata::SDK::AIDriveConf* aidriving);

  // .Cognata.SDK.DrivingCommand drivingCommand = 13;
  bool has_drivingcommand() const;
  void clear_drivingcommand();
  static const int kDrivingCommandFieldNumber = 13;
  const ::Cognata::SDK::DrivingCommand& drivingcommand() const;
  ::Cognata::SDK::DrivingCommand* release_drivingcommand();
  ::Cognata::SDK::DrivingCommand* mutable_drivingcommand();
  void set_allocated_drivingcommand(::Cognata::SDK::DrivingCommand* drivingcommand);

  // .Cognata.SDK.SdkDriveConf sdkDriving = 14;
  bool has_sdkdriving() const;
  void clear_sdkdriving();
  static const int kSdkDrivingFieldNumber = 14;
  const ::Cognata::SDK::SdkDriveConf& sdkdriving() const;
  ::Cognata::SDK::SdkDriveConf* release_sdkdriving();
  ::Cognata::SDK::SdkDriveConf* mutable_sdkdriving();
  void set_allocated_sdkdriving(::Cognata::SDK::SdkDriveConf* sdkdriving);

  // .Cognata.SDK.SensorPresetCloneCommand sensorPresetCloneCommand = 15;
  bool has_sensorpresetclonecommand() const;
  void clear_sensorpresetclonecommand();
  static const int kSensorPresetCloneCommandFieldNumber = 15;
  const ::Cognata::SDK::SensorPresetCloneCommand& sensorpresetclonecommand() const;
  ::Cognata::SDK::SensorPresetCloneCommand* release_sensorpresetclonecommand();
  ::Cognata::SDK::SensorPresetCloneCommand* mutable_sensorpresetclonecommand();
  void set_allocated_sensorpresetclonecommand(::Cognata::SDK::SensorPresetCloneCommand* sensorpresetclonecommand);

  void clear_CommandType();
  CommandTypeCase CommandType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.CarCommand)
 private:
  class HasBitSetters;
  void set_has_drive();
  void set_has_teleport();
  void set_has_aidriving();
  void set_has_drivingcommand();
  void set_has_sdkdriving();
  void set_has_sensorpresetclonecommand();

  inline bool has_CommandType() const;
  inline void clear_has_CommandType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  union CommandTypeUnion {
    CommandTypeUnion() {}
    ::Cognata::SDK::CarConfiguration* drive_;
    ::Cognata::SDK::Teleportation* teleport_;
    ::Cognata::SDK::AIDriveConf* aidriving_;
    ::Cognata::SDK::DrivingCommand* drivingcommand_;
    ::Cognata::SDK::SdkDriveConf* sdkdriving_;
    ::Cognata::SDK::SensorPresetCloneCommand* sensorpresetclonecommand_;
  } CommandType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class SensorPresetCloneCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SensorPresetCloneCommand) */ {
 public:
  SensorPresetCloneCommand();
  virtual ~SensorPresetCloneCommand();

  SensorPresetCloneCommand(const SensorPresetCloneCommand& from);
  SensorPresetCloneCommand(SensorPresetCloneCommand&& from) noexcept
    : SensorPresetCloneCommand() {
    *this = ::std::move(from);
  }

  inline SensorPresetCloneCommand& operator=(const SensorPresetCloneCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorPresetCloneCommand& operator=(SensorPresetCloneCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorPresetCloneCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorPresetCloneCommand* internal_default_instance() {
    return reinterpret_cast<const SensorPresetCloneCommand*>(
               &_SensorPresetCloneCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SensorPresetCloneCommand* other);
  friend void swap(SensorPresetCloneCommand& a, SensorPresetCloneCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorPresetCloneCommand* New() const final {
    return CreateMaybeMessage<SensorPresetCloneCommand>(nullptr);
  }

  SensorPresetCloneCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorPresetCloneCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorPresetCloneCommand& from);
  void MergeFrom(const SensorPresetCloneCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorPresetCloneCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SensorPresetCloneCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 targetVehicleId = 1;
  void clear_targetvehicleid();
  static const int kTargetVehicleIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 targetvehicleid() const;
  void set_targetvehicleid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SensorPresetCloneCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 targetvehicleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class Teleportation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Teleportation) */ {
 public:
  Teleportation();
  virtual ~Teleportation();

  Teleportation(const Teleportation& from);
  Teleportation(Teleportation&& from) noexcept
    : Teleportation() {
    *this = ::std::move(from);
  }

  inline Teleportation& operator=(const Teleportation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Teleportation& operator=(Teleportation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Teleportation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Teleportation* internal_default_instance() {
    return reinterpret_cast<const Teleportation*>(
               &_Teleportation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Teleportation* other);
  friend void swap(Teleportation& a, Teleportation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Teleportation* New() const final {
    return CreateMaybeMessage<Teleportation>(nullptr);
  }

  Teleportation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Teleportation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Teleportation& from);
  void MergeFrom(const Teleportation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Teleportation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Teleportation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Teleportation_NextLaneChoice NextLaneChoice;
  static constexpr NextLaneChoice NoChange =
    Teleportation_NextLaneChoice_NoChange;
  static constexpr NextLaneChoice Left =
    Teleportation_NextLaneChoice_Left;
  static constexpr NextLaneChoice Right =
    Teleportation_NextLaneChoice_Right;
  static inline bool NextLaneChoice_IsValid(int value) {
    return Teleportation_NextLaneChoice_IsValid(value);
  }
  static constexpr NextLaneChoice NextLaneChoice_MIN =
    Teleportation_NextLaneChoice_NextLaneChoice_MIN;
  static constexpr NextLaneChoice NextLaneChoice_MAX =
    Teleportation_NextLaneChoice_NextLaneChoice_MAX;
  static constexpr int NextLaneChoice_ARRAYSIZE =
    Teleportation_NextLaneChoice_NextLaneChoice_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NextLaneChoice_descriptor() {
    return Teleportation_NextLaneChoice_descriptor();
  }
  template<typename T>
  static inline const std::string& NextLaneChoice_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NextLaneChoice>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NextLaneChoice_Name.");
    return Teleportation_NextLaneChoice_Name(enum_t_value);
  }
  static inline bool NextLaneChoice_Parse(const std::string& name,
      NextLaneChoice* value) {
    return Teleportation_NextLaneChoice_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Cognata.SDK.Transform3 transform = 1;
  bool has_transform() const;
  void clear_transform();
  static const int kTransformFieldNumber = 1;
  const ::Cognata::SDK::Transform3& transform() const;
  ::Cognata::SDK::Transform3* release_transform();
  ::Cognata::SDK::Transform3* mutable_transform();
  void set_allocated_transform(::Cognata::SDK::Transform3* transform);

  // .Cognata.SDK.SDKVector3 velocity = 2;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  const ::Cognata::SDK::SDKVector3& velocity() const;
  ::Cognata::SDK::SDKVector3* release_velocity();
  ::Cognata::SDK::SDKVector3* mutable_velocity();
  void set_allocated_velocity(::Cognata::SDK::SDKVector3* velocity);

  // .Cognata.SDK.SDKVector3 acceleration = 3;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 3;
  const ::Cognata::SDK::SDKVector3& acceleration() const;
  ::Cognata::SDK::SDKVector3* release_acceleration();
  ::Cognata::SDK::SDKVector3* mutable_acceleration();
  void set_allocated_acceleration(::Cognata::SDK::SDKVector3* acceleration);

  // .Cognata.SDK.Teleportation.NextLaneChoice nextLaneChoice = 4;
  void clear_nextlanechoice();
  static const int kNextLaneChoiceFieldNumber = 4;
  ::Cognata::SDK::Teleportation_NextLaneChoice nextlanechoice() const;
  void set_nextlanechoice(::Cognata::SDK::Teleportation_NextLaneChoice value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.Teleportation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::Transform3* transform_;
  ::Cognata::SDK::SDKVector3* velocity_;
  ::Cognata::SDK::SDKVector3* acceleration_;
  int nextlanechoice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class AIDriveConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.AIDriveConf) */ {
 public:
  AIDriveConf();
  virtual ~AIDriveConf();

  AIDriveConf(const AIDriveConf& from);
  AIDriveConf(AIDriveConf&& from) noexcept
    : AIDriveConf() {
    *this = ::std::move(from);
  }

  inline AIDriveConf& operator=(const AIDriveConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIDriveConf& operator=(AIDriveConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AIDriveConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AIDriveConf* internal_default_instance() {
    return reinterpret_cast<const AIDriveConf*>(
               &_AIDriveConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(AIDriveConf* other);
  friend void swap(AIDriveConf& a, AIDriveConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AIDriveConf* New() const final {
    return CreateMaybeMessage<AIDriveConf>(nullptr);
  }

  AIDriveConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AIDriveConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AIDriveConf& from);
  void MergeFrom(const AIDriveConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIDriveConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.AIDriveConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.AIDriveConf)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class SdkDriveConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SdkDriveConf) */ {
 public:
  SdkDriveConf();
  virtual ~SdkDriveConf();

  SdkDriveConf(const SdkDriveConf& from);
  SdkDriveConf(SdkDriveConf&& from) noexcept
    : SdkDriveConf() {
    *this = ::std::move(from);
  }

  inline SdkDriveConf& operator=(const SdkDriveConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdkDriveConf& operator=(SdkDriveConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SdkDriveConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdkDriveConf* internal_default_instance() {
    return reinterpret_cast<const SdkDriveConf*>(
               &_SdkDriveConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SdkDriveConf* other);
  friend void swap(SdkDriveConf& a, SdkDriveConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SdkDriveConf* New() const final {
    return CreateMaybeMessage<SdkDriveConf>(nullptr);
  }

  SdkDriveConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdkDriveConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SdkDriveConf& from);
  void MergeFrom(const SdkDriveConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdkDriveConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SdkDriveConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.PidControlConfig pidControlConfig = 1;
  bool has_pidcontrolconfig() const;
  void clear_pidcontrolconfig();
  static const int kPidControlConfigFieldNumber = 1;
  const ::Cognata::SDK::PidControlConfig& pidcontrolconfig() const;
  ::Cognata::SDK::PidControlConfig* release_pidcontrolconfig();
  ::Cognata::SDK::PidControlConfig* mutable_pidcontrolconfig();
  void set_allocated_pidcontrolconfig(::Cognata::SDK::PidControlConfig* pidcontrolconfig);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SdkDriveConf)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::PidControlConfig* pidcontrolconfig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class SpawnObjects :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SpawnObjects) */ {
 public:
  SpawnObjects();
  virtual ~SpawnObjects();

  SpawnObjects(const SpawnObjects& from);
  SpawnObjects(SpawnObjects&& from) noexcept
    : SpawnObjects() {
    *this = ::std::move(from);
  }

  inline SpawnObjects& operator=(const SpawnObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnObjects& operator=(SpawnObjects&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpawnObjects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpawnObjects* internal_default_instance() {
    return reinterpret_cast<const SpawnObjects*>(
               &_SpawnObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SpawnObjects* other);
  friend void swap(SpawnObjects& a, SpawnObjects& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpawnObjects* New() const final {
    return CreateMaybeMessage<SpawnObjects>(nullptr);
  }

  SpawnObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpawnObjects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpawnObjects& from);
  void MergeFrom(const SpawnObjects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnObjects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SpawnObjects";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.SpawnObject spawnObjects = 2;
  int spawnobjects_size() const;
  void clear_spawnobjects();
  static const int kSpawnObjectsFieldNumber = 2;
  ::Cognata::SDK::SpawnObject* mutable_spawnobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SpawnObject >*
      mutable_spawnobjects();
  const ::Cognata::SDK::SpawnObject& spawnobjects(int index) const;
  ::Cognata::SDK::SpawnObject* add_spawnobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SpawnObject >&
      spawnobjects() const;

  // string clientName = 1;
  void clear_clientname();
  static const int kClientNameFieldNumber = 1;
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SpawnObjects)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SpawnObject > spawnobjects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class SpawnObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SpawnObject) */ {
 public:
  SpawnObject();
  virtual ~SpawnObject();

  SpawnObject(const SpawnObject& from);
  SpawnObject(SpawnObject&& from) noexcept
    : SpawnObject() {
    *this = ::std::move(from);
  }

  inline SpawnObject& operator=(const SpawnObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnObject& operator=(SpawnObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpawnObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpawnObject* internal_default_instance() {
    return reinterpret_cast<const SpawnObject*>(
               &_SpawnObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SpawnObject* other);
  friend void swap(SpawnObject& a, SpawnObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpawnObject* New() const final {
    return CreateMaybeMessage<SpawnObject>(nullptr);
  }

  SpawnObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpawnObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpawnObject& from);
  void MergeFrom(const SpawnObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SpawnObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.Script scripts = 4;
  int scripts_size() const;
  void clear_scripts();
  static const int kScriptsFieldNumber = 4;
  ::Cognata::SDK::Script* mutable_scripts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::Script >*
      mutable_scripts();
  const ::Cognata::SDK::Script& scripts(int index) const;
  ::Cognata::SDK::Script* add_scripts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::Script >&
      scripts() const;

  // string clientObjectID = 2;
  void clear_clientobjectid();
  static const int kClientObjectIDFieldNumber = 2;
  const std::string& clientobjectid() const;
  void set_clientobjectid(const std::string& value);
  void set_clientobjectid(std::string&& value);
  void set_clientobjectid(const char* value);
  void set_clientobjectid(const char* value, size_t size);
  std::string* mutable_clientobjectid();
  std::string* release_clientobjectid();
  void set_allocated_clientobjectid(std::string* clientobjectid);

  // string brandID = 3;
  void clear_brandid();
  static const int kBrandIDFieldNumber = 3;
  const std::string& brandid() const;
  void set_brandid(const std::string& value);
  void set_brandid(std::string&& value);
  void set_brandid(const char* value);
  void set_brandid(const char* value, size_t size);
  std::string* mutable_brandid();
  std::string* release_brandid();
  void set_allocated_brandid(std::string* brandid);

  // .Cognata.SDK.SpawnObjectType spawnType = 5;
  void clear_spawntype();
  static const int kSpawnTypeFieldNumber = 5;
  ::Cognata::SDK::SpawnObjectType spawntype() const;
  void set_spawntype(::Cognata::SDK::SpawnObjectType value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SpawnObject)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::Script > scripts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientobjectid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brandid_;
  int spawntype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class Script :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Script) */ {
 public:
  Script();
  virtual ~Script();

  Script(const Script& from);
  Script(Script&& from) noexcept
    : Script() {
    *this = ::std::move(from);
  }

  inline Script& operator=(const Script& from) {
    CopyFrom(from);
    return *this;
  }
  inline Script& operator=(Script&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Script& default_instance();

  enum TriggerCase {
    kSimulationTimeTrigger = 50,
    TRIGGER_NOT_SET = 0,
  };

  enum ActionCase {
    kInitialSpeed = 100,
    kDesiredSpeed = 101,
    kPosition = 102,
    ACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Script* internal_default_instance() {
    return reinterpret_cast<const Script*>(
               &_Script_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(Script* other);
  friend void swap(Script& a, Script& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Script* New() const final {
    return CreateMaybeMessage<Script>(nullptr);
  }

  Script* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Script>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Script& from);
  void MergeFrom(const Script& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Script* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Script";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.SimulationTimeTrigger simulationTimeTrigger = 50;
  bool has_simulationtimetrigger() const;
  void clear_simulationtimetrigger();
  static const int kSimulationTimeTriggerFieldNumber = 50;
  const ::Cognata::SDK::SimulationTimeTrigger& simulationtimetrigger() const;
  ::Cognata::SDK::SimulationTimeTrigger* release_simulationtimetrigger();
  ::Cognata::SDK::SimulationTimeTrigger* mutable_simulationtimetrigger();
  void set_allocated_simulationtimetrigger(::Cognata::SDK::SimulationTimeTrigger* simulationtimetrigger);

  // float initialSpeed = 100;
  private:
  bool has_initialspeed() const;
  public:
  void clear_initialspeed();
  static const int kInitialSpeedFieldNumber = 100;
  float initialspeed() const;
  void set_initialspeed(float value);

  // float desiredSpeed = 101;
  private:
  bool has_desiredspeed() const;
  public:
  void clear_desiredspeed();
  static const int kDesiredSpeedFieldNumber = 101;
  float desiredspeed() const;
  void set_desiredspeed(float value);

  // .Cognata.SDK.SDKVector2 position = 102;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 102;
  const ::Cognata::SDK::SDKVector2& position() const;
  ::Cognata::SDK::SDKVector2* release_position();
  ::Cognata::SDK::SDKVector2* mutable_position();
  void set_allocated_position(::Cognata::SDK::SDKVector2* position);

  void clear_trigger();
  TriggerCase trigger_case() const;
  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.Script)
 private:
  class HasBitSetters;
  void set_has_simulationtimetrigger();
  void set_has_initialspeed();
  void set_has_desiredspeed();
  void set_has_position();

  inline bool has_trigger() const;
  inline void clear_has_trigger();

  inline bool has_action() const;
  inline void clear_has_action();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union TriggerUnion {
    TriggerUnion() {}
    ::Cognata::SDK::SimulationTimeTrigger* simulationtimetrigger_;
  } trigger_;
  union ActionUnion {
    ActionUnion() {}
    float initialspeed_;
    float desiredspeed_;
    ::Cognata::SDK::SDKVector2* position_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class SimulationTimeTrigger :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SimulationTimeTrigger) */ {
 public:
  SimulationTimeTrigger();
  virtual ~SimulationTimeTrigger();

  SimulationTimeTrigger(const SimulationTimeTrigger& from);
  SimulationTimeTrigger(SimulationTimeTrigger&& from) noexcept
    : SimulationTimeTrigger() {
    *this = ::std::move(from);
  }

  inline SimulationTimeTrigger& operator=(const SimulationTimeTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationTimeTrigger& operator=(SimulationTimeTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationTimeTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulationTimeTrigger* internal_default_instance() {
    return reinterpret_cast<const SimulationTimeTrigger*>(
               &_SimulationTimeTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SimulationTimeTrigger* other);
  friend void swap(SimulationTimeTrigger& a, SimulationTimeTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimulationTimeTrigger* New() const final {
    return CreateMaybeMessage<SimulationTimeTrigger>(nullptr);
  }

  SimulationTimeTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationTimeTrigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationTimeTrigger& from);
  void MergeFrom(const SimulationTimeTrigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationTimeTrigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SimulationTimeTrigger";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float simulationTime = 1;
  void clear_simulationtime();
  static const int kSimulationTimeFieldNumber = 1;
  float simulationtime() const;
  void set_simulationtime(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SimulationTimeTrigger)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float simulationtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class DespawnObjects :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.DespawnObjects) */ {
 public:
  DespawnObjects();
  virtual ~DespawnObjects();

  DespawnObjects(const DespawnObjects& from);
  DespawnObjects(DespawnObjects&& from) noexcept
    : DespawnObjects() {
    *this = ::std::move(from);
  }

  inline DespawnObjects& operator=(const DespawnObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline DespawnObjects& operator=(DespawnObjects&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DespawnObjects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DespawnObjects* internal_default_instance() {
    return reinterpret_cast<const DespawnObjects*>(
               &_DespawnObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(DespawnObjects* other);
  friend void swap(DespawnObjects& a, DespawnObjects& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DespawnObjects* New() const final {
    return CreateMaybeMessage<DespawnObjects>(nullptr);
  }

  DespawnObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DespawnObjects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DespawnObjects& from);
  void MergeFrom(const DespawnObjects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DespawnObjects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.DespawnObjects";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.DespawnObject despawnObjects = 2;
  int despawnobjects_size() const;
  void clear_despawnobjects();
  static const int kDespawnObjectsFieldNumber = 2;
  ::Cognata::SDK::DespawnObject* mutable_despawnobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::DespawnObject >*
      mutable_despawnobjects();
  const ::Cognata::SDK::DespawnObject& despawnobjects(int index) const;
  ::Cognata::SDK::DespawnObject* add_despawnobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::DespawnObject >&
      despawnobjects() const;

  // string clientName = 1;
  void clear_clientname();
  static const int kClientNameFieldNumber = 1;
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.DespawnObjects)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::DespawnObject > despawnobjects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class DespawnObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.DespawnObject) */ {
 public:
  DespawnObject();
  virtual ~DespawnObject();

  DespawnObject(const DespawnObject& from);
  DespawnObject(DespawnObject&& from) noexcept
    : DespawnObject() {
    *this = ::std::move(from);
  }

  inline DespawnObject& operator=(const DespawnObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline DespawnObject& operator=(DespawnObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DespawnObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DespawnObject* internal_default_instance() {
    return reinterpret_cast<const DespawnObject*>(
               &_DespawnObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(DespawnObject* other);
  friend void swap(DespawnObject& a, DespawnObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DespawnObject* New() const final {
    return CreateMaybeMessage<DespawnObject>(nullptr);
  }

  DespawnObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DespawnObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DespawnObject& from);
  void MergeFrom(const DespawnObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DespawnObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.DespawnObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.DespawnObject)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class PidControlConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.PidControlConfig) */ {
 public:
  PidControlConfig();
  virtual ~PidControlConfig();

  PidControlConfig(const PidControlConfig& from);
  PidControlConfig(PidControlConfig&& from) noexcept
    : PidControlConfig() {
    *this = ::std::move(from);
  }

  inline PidControlConfig& operator=(const PidControlConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PidControlConfig& operator=(PidControlConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PidControlConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PidControlConfig* internal_default_instance() {
    return reinterpret_cast<const PidControlConfig*>(
               &_PidControlConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(PidControlConfig* other);
  friend void swap(PidControlConfig& a, PidControlConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PidControlConfig* New() const final {
    return CreateMaybeMessage<PidControlConfig>(nullptr);
  }

  PidControlConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PidControlConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PidControlConfig& from);
  void MergeFrom(const PidControlConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PidControlConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.PidControlConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float kp = 1;
  void clear_kp();
  static const int kKpFieldNumber = 1;
  float kp() const;
  void set_kp(float value);

  // float ki = 2;
  void clear_ki();
  static const int kKiFieldNumber = 2;
  float ki() const;
  void set_ki(float value);

  // float kd = 3;
  void clear_kd();
  static const int kKdFieldNumber = 3;
  float kd() const;
  void set_kd(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.PidControlConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float kp_;
  float ki_;
  float kd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class SensorCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SensorCommand) */ {
 public:
  SensorCommand();
  virtual ~SensorCommand();

  SensorCommand(const SensorCommand& from);
  SensorCommand(SensorCommand&& from) noexcept
    : SensorCommand() {
    *this = ::std::move(from);
  }

  inline SensorCommand& operator=(const SensorCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorCommand& operator=(SensorCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorCommand& default_instance();

  enum CommandTypeCase {
    kRegisterSensor = 10,
    kModifySensor = 11,
    COMMANDTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorCommand* internal_default_instance() {
    return reinterpret_cast<const SensorCommand*>(
               &_SensorCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(SensorCommand* other);
  friend void swap(SensorCommand& a, SensorCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorCommand* New() const final {
    return CreateMaybeMessage<SensorCommand>(nullptr);
  }

  SensorCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorCommand& from);
  void MergeFrom(const SensorCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SensorCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 carId = 1;
  void clear_carid();
  static const int kCarIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 carid() const;
  void set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 SensorId = 2;
  void clear_sensorid();
  static const int kSensorIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorid() const;
  void set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .Cognata.SDK.RegisterSensor registerSensor = 10;
  bool has_registersensor() const;
  void clear_registersensor();
  static const int kRegisterSensorFieldNumber = 10;
  const ::Cognata::SDK::RegisterSensor& registersensor() const;
  ::Cognata::SDK::RegisterSensor* release_registersensor();
  ::Cognata::SDK::RegisterSensor* mutable_registersensor();
  void set_allocated_registersensor(::Cognata::SDK::RegisterSensor* registersensor);

  // .Cognata.SDK.ModifySensor modifySensor = 11;
  bool has_modifysensor() const;
  void clear_modifysensor();
  static const int kModifySensorFieldNumber = 11;
  const ::Cognata::SDK::ModifySensor& modifysensor() const;
  ::Cognata::SDK::ModifySensor* release_modifysensor();
  ::Cognata::SDK::ModifySensor* mutable_modifysensor();
  void set_allocated_modifysensor(::Cognata::SDK::ModifySensor* modifysensor);

  void clear_commandType();
  CommandTypeCase commandType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.SensorCommand)
 private:
  class HasBitSetters;
  void set_has_registersensor();
  void set_has_modifysensor();

  inline bool has_commandType() const;
  inline void clear_has_commandType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorid_;
  union CommandTypeUnion {
    CommandTypeUnion() {}
    ::Cognata::SDK::RegisterSensor* registersensor_;
    ::Cognata::SDK::ModifySensor* modifysensor_;
  } commandType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class CarReportCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.CarReportCommand) */ {
 public:
  CarReportCommand();
  virtual ~CarReportCommand();

  CarReportCommand(const CarReportCommand& from);
  CarReportCommand(CarReportCommand&& from) noexcept
    : CarReportCommand() {
    *this = ::std::move(from);
  }

  inline CarReportCommand& operator=(const CarReportCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarReportCommand& operator=(CarReportCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarReportCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarReportCommand* internal_default_instance() {
    return reinterpret_cast<const CarReportCommand*>(
               &_CarReportCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CarReportCommand* other);
  friend void swap(CarReportCommand& a, CarReportCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarReportCommand* New() const final {
    return CreateMaybeMessage<CarReportCommand>(nullptr);
  }

  CarReportCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarReportCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarReportCommand& from);
  void MergeFrom(const CarReportCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarReportCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.CarReportCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filterByClientName = 1;
  void clear_filterbyclientname();
  static const int kFilterByClientNameFieldNumber = 1;
  const std::string& filterbyclientname() const;
  void set_filterbyclientname(const std::string& value);
  void set_filterbyclientname(std::string&& value);
  void set_filterbyclientname(const char* value);
  void set_filterbyclientname(const char* value, size_t size);
  std::string* mutable_filterbyclientname();
  std::string* release_filterbyclientname();
  void set_allocated_filterbyclientname(std::string* filterbyclientname);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.CarReportCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filterbyclientname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class GlobalSensorCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GlobalSensorCommand) */ {
 public:
  GlobalSensorCommand();
  virtual ~GlobalSensorCommand();

  GlobalSensorCommand(const GlobalSensorCommand& from);
  GlobalSensorCommand(GlobalSensorCommand&& from) noexcept
    : GlobalSensorCommand() {
    *this = ::std::move(from);
  }

  inline GlobalSensorCommand& operator=(const GlobalSensorCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSensorCommand& operator=(GlobalSensorCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalSensorCommand& default_instance();

  enum CommandTypeCase {
    kRegisterSensor = 10,
    kModifySensor = 11,
    COMMANDTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSensorCommand* internal_default_instance() {
    return reinterpret_cast<const GlobalSensorCommand*>(
               &_GlobalSensorCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(GlobalSensorCommand* other);
  friend void swap(GlobalSensorCommand& a, GlobalSensorCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalSensorCommand* New() const final {
    return CreateMaybeMessage<GlobalSensorCommand>(nullptr);
  }

  GlobalSensorCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSensorCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalSensorCommand& from);
  void MergeFrom(const GlobalSensorCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalSensorCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GlobalSensorCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 SensorId = 1;
  void clear_sensorid();
  static const int kSensorIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorid() const;
  void set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .Cognata.SDK.RegisterSensor registerSensor = 10;
  bool has_registersensor() const;
  void clear_registersensor();
  static const int kRegisterSensorFieldNumber = 10;
  const ::Cognata::SDK::RegisterSensor& registersensor() const;
  ::Cognata::SDK::RegisterSensor* release_registersensor();
  ::Cognata::SDK::RegisterSensor* mutable_registersensor();
  void set_allocated_registersensor(::Cognata::SDK::RegisterSensor* registersensor);

  // .Cognata.SDK.ModifySensor modifySensor = 11;
  bool has_modifysensor() const;
  void clear_modifysensor();
  static const int kModifySensorFieldNumber = 11;
  const ::Cognata::SDK::ModifySensor& modifysensor() const;
  ::Cognata::SDK::ModifySensor* release_modifysensor();
  ::Cognata::SDK::ModifySensor* mutable_modifysensor();
  void set_allocated_modifysensor(::Cognata::SDK::ModifySensor* modifysensor);

  void clear_commandType();
  CommandTypeCase commandType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.GlobalSensorCommand)
 private:
  class HasBitSetters;
  void set_has_registersensor();
  void set_has_modifysensor();

  inline bool has_commandType() const;
  inline void clear_has_commandType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorid_;
  union CommandTypeUnion {
    CommandTypeUnion() {}
    ::Cognata::SDK::RegisterSensor* registersensor_;
    ::Cognata::SDK::ModifySensor* modifysensor_;
  } commandType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class SimulationCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SimulationCommand) */ {
 public:
  SimulationCommand();
  virtual ~SimulationCommand();

  SimulationCommand(const SimulationCommand& from);
  SimulationCommand(SimulationCommand&& from) noexcept
    : SimulationCommand() {
    *this = ::std::move(from);
  }

  inline SimulationCommand& operator=(const SimulationCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationCommand& operator=(SimulationCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationCommand& default_instance();

  enum CommandTypeCase {
    kStartSimulation = 10,
    kStopSimulation = 11,
    kNextFrame = 12,
    COMMANDTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulationCommand* internal_default_instance() {
    return reinterpret_cast<const SimulationCommand*>(
               &_SimulationCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(SimulationCommand* other);
  friend void swap(SimulationCommand& a, SimulationCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimulationCommand* New() const final {
    return CreateMaybeMessage<SimulationCommand>(nullptr);
  }

  SimulationCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationCommand& from);
  void MergeFrom(const SimulationCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SimulationCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.StartSimulation startSimulation = 10;
  bool has_startsimulation() const;
  void clear_startsimulation();
  static const int kStartSimulationFieldNumber = 10;
  const ::Cognata::SDK::StartSimulation& startsimulation() const;
  ::Cognata::SDK::StartSimulation* release_startsimulation();
  ::Cognata::SDK::StartSimulation* mutable_startsimulation();
  void set_allocated_startsimulation(::Cognata::SDK::StartSimulation* startsimulation);

  // .Cognata.SDK.StopSimulation stopSimulation = 11;
  bool has_stopsimulation() const;
  void clear_stopsimulation();
  static const int kStopSimulationFieldNumber = 11;
  const ::Cognata::SDK::StopSimulation& stopsimulation() const;
  ::Cognata::SDK::StopSimulation* release_stopsimulation();
  ::Cognata::SDK::StopSimulation* mutable_stopsimulation();
  void set_allocated_stopsimulation(::Cognata::SDK::StopSimulation* stopsimulation);

  // .Cognata.SDK.NextFrame nextFrame = 12;
  bool has_nextframe() const;
  void clear_nextframe();
  static const int kNextFrameFieldNumber = 12;
  const ::Cognata::SDK::NextFrame& nextframe() const;
  ::Cognata::SDK::NextFrame* release_nextframe();
  ::Cognata::SDK::NextFrame* mutable_nextframe();
  void set_allocated_nextframe(::Cognata::SDK::NextFrame* nextframe);

  void clear_CommandType();
  CommandTypeCase CommandType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.SimulationCommand)
 private:
  class HasBitSetters;
  void set_has_startsimulation();
  void set_has_stopsimulation();
  void set_has_nextframe();

  inline bool has_CommandType() const;
  inline void clear_has_CommandType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union CommandTypeUnion {
    CommandTypeUnion() {}
    ::Cognata::SDK::StartSimulation* startsimulation_;
    ::Cognata::SDK::StopSimulation* stopsimulation_;
    ::Cognata::SDK::NextFrame* nextframe_;
  } CommandType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class StartSimulation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.StartSimulation) */ {
 public:
  StartSimulation();
  virtual ~StartSimulation();

  StartSimulation(const StartSimulation& from);
  StartSimulation(StartSimulation&& from) noexcept
    : StartSimulation() {
    *this = ::std::move(from);
  }

  inline StartSimulation& operator=(const StartSimulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSimulation& operator=(StartSimulation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartSimulation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartSimulation* internal_default_instance() {
    return reinterpret_cast<const StartSimulation*>(
               &_StartSimulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(StartSimulation* other);
  friend void swap(StartSimulation& a, StartSimulation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartSimulation* New() const final {
    return CreateMaybeMessage<StartSimulation>(nullptr);
  }

  StartSimulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartSimulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartSimulation& from);
  void MergeFrom(const StartSimulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSimulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.StartSimulation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool isBlocking = 1;
  void clear_isblocking();
  static const int kIsBlockingFieldNumber = 1;
  bool isblocking() const;
  void set_isblocking(bool value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.StartSimulation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool isblocking_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class StopSimulation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.StopSimulation) */ {
 public:
  StopSimulation();
  virtual ~StopSimulation();

  StopSimulation(const StopSimulation& from);
  StopSimulation(StopSimulation&& from) noexcept
    : StopSimulation() {
    *this = ::std::move(from);
  }

  inline StopSimulation& operator=(const StopSimulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopSimulation& operator=(StopSimulation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopSimulation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopSimulation* internal_default_instance() {
    return reinterpret_cast<const StopSimulation*>(
               &_StopSimulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(StopSimulation* other);
  friend void swap(StopSimulation& a, StopSimulation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopSimulation* New() const final {
    return CreateMaybeMessage<StopSimulation>(nullptr);
  }

  StopSimulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopSimulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopSimulation& from);
  void MergeFrom(const StopSimulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopSimulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.StopSimulation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reasonText = 2;
  void clear_reasontext();
  static const int kReasonTextFieldNumber = 2;
  const std::string& reasontext() const;
  void set_reasontext(const std::string& value);
  void set_reasontext(std::string&& value);
  void set_reasontext(const char* value);
  void set_reasontext(const char* value, size_t size);
  std::string* mutable_reasontext();
  std::string* release_reasontext();
  void set_allocated_reasontext(std::string* reasontext);

  // uint32 reasonID = 1;
  void clear_reasonid();
  static const int kReasonIDFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 reasonid() const;
  void set_reasonid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.StopSimulation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reasontext_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reasonid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class NextFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.NextFrame) */ {
 public:
  NextFrame();
  virtual ~NextFrame();

  NextFrame(const NextFrame& from);
  NextFrame(NextFrame&& from) noexcept
    : NextFrame() {
    *this = ::std::move(from);
  }

  inline NextFrame& operator=(const NextFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextFrame& operator=(NextFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NextFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NextFrame* internal_default_instance() {
    return reinterpret_cast<const NextFrame*>(
               &_NextFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(NextFrame* other);
  friend void swap(NextFrame& a, NextFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NextFrame* New() const final {
    return CreateMaybeMessage<NextFrame>(nullptr);
  }

  NextFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NextFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NextFrame& from);
  void MergeFrom(const NextFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.NextFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.NextFrame)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class RegisterSensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RegisterSensor) */ {
 public:
  RegisterSensor();
  virtual ~RegisterSensor();

  RegisterSensor(const RegisterSensor& from);
  RegisterSensor(RegisterSensor&& from) noexcept
    : RegisterSensor() {
    *this = ::std::move(from);
  }

  inline RegisterSensor& operator=(const RegisterSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterSensor& operator=(RegisterSensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterSensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterSensor* internal_default_instance() {
    return reinterpret_cast<const RegisterSensor*>(
               &_RegisterSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(RegisterSensor* other);
  friend void swap(RegisterSensor& a, RegisterSensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterSensor* New() const final {
    return CreateMaybeMessage<RegisterSensor>(nullptr);
  }

  RegisterSensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterSensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterSensor& from);
  void MergeFrom(const RegisterSensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterSensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RegisterSensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RegisterSensor)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class ModifySensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ModifySensor) */ {
 public:
  ModifySensor();
  virtual ~ModifySensor();

  ModifySensor(const ModifySensor& from);
  ModifySensor(ModifySensor&& from) noexcept
    : ModifySensor() {
    *this = ::std::move(from);
  }

  inline ModifySensor& operator=(const ModifySensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifySensor& operator=(ModifySensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifySensor& default_instance();

  enum SensorTypeCase {
    kRgbCameraModifiable = 10,
    kLidarModifiable = 11,
    kDOGTModifiable = 40,
    SENSORTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifySensor* internal_default_instance() {
    return reinterpret_cast<const ModifySensor*>(
               &_ModifySensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(ModifySensor* other);
  friend void swap(ModifySensor& a, ModifySensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifySensor* New() const final {
    return CreateMaybeMessage<ModifySensor>(nullptr);
  }

  ModifySensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifySensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifySensor& from);
  void MergeFrom(const ModifySensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifySensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ModifySensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.RGBCameraModifiable rgbCameraModifiable = 10;
  bool has_rgbcameramodifiable() const;
  void clear_rgbcameramodifiable();
  static const int kRgbCameraModifiableFieldNumber = 10;
  const ::Cognata::SDK::RGBCameraModifiable& rgbcameramodifiable() const;
  ::Cognata::SDK::RGBCameraModifiable* release_rgbcameramodifiable();
  ::Cognata::SDK::RGBCameraModifiable* mutable_rgbcameramodifiable();
  void set_allocated_rgbcameramodifiable(::Cognata::SDK::RGBCameraModifiable* rgbcameramodifiable);

  // .Cognata.SDK.LidarModifiable lidarModifiable = 11;
  bool has_lidarmodifiable() const;
  void clear_lidarmodifiable();
  static const int kLidarModifiableFieldNumber = 11;
  const ::Cognata::SDK::LidarModifiable& lidarmodifiable() const;
  ::Cognata::SDK::LidarModifiable* release_lidarmodifiable();
  ::Cognata::SDK::LidarModifiable* mutable_lidarmodifiable();
  void set_allocated_lidarmodifiable(::Cognata::SDK::LidarModifiable* lidarmodifiable);

  // .Cognata.SDK.DOGTModifiable DOGTModifiable = 40;
  bool has_dogtmodifiable() const;
  void clear_dogtmodifiable();
  static const int kDOGTModifiableFieldNumber = 40;
  const ::Cognata::SDK::DOGTModifiable& dogtmodifiable() const;
  ::Cognata::SDK::DOGTModifiable* release_dogtmodifiable();
  ::Cognata::SDK::DOGTModifiable* mutable_dogtmodifiable();
  void set_allocated_dogtmodifiable(::Cognata::SDK::DOGTModifiable* dogtmodifiable);

  void clear_SensorType();
  SensorTypeCase SensorType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.ModifySensor)
 private:
  class HasBitSetters;
  void set_has_rgbcameramodifiable();
  void set_has_lidarmodifiable();
  void set_has_dogtmodifiable();

  inline bool has_SensorType() const;
  inline void clear_has_SensorType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union SensorTypeUnion {
    SensorTypeUnion() {}
    ::Cognata::SDK::RGBCameraModifiable* rgbcameramodifiable_;
    ::Cognata::SDK::LidarModifiable* lidarmodifiable_;
    ::Cognata::SDK::DOGTModifiable* dogtmodifiable_;
  } SensorType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class RGBCameraModifiable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RGBCameraModifiable) */ {
 public:
  RGBCameraModifiable();
  virtual ~RGBCameraModifiable();

  RGBCameraModifiable(const RGBCameraModifiable& from);
  RGBCameraModifiable(RGBCameraModifiable&& from) noexcept
    : RGBCameraModifiable() {
    *this = ::std::move(from);
  }

  inline RGBCameraModifiable& operator=(const RGBCameraModifiable& from) {
    CopyFrom(from);
    return *this;
  }
  inline RGBCameraModifiable& operator=(RGBCameraModifiable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RGBCameraModifiable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RGBCameraModifiable* internal_default_instance() {
    return reinterpret_cast<const RGBCameraModifiable*>(
               &_RGBCameraModifiable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(RGBCameraModifiable* other);
  friend void swap(RGBCameraModifiable& a, RGBCameraModifiable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RGBCameraModifiable* New() const final {
    return CreateMaybeMessage<RGBCameraModifiable>(nullptr);
  }

  RGBCameraModifiable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RGBCameraModifiable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RGBCameraModifiable& from);
  void MergeFrom(const RGBCameraModifiable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RGBCameraModifiable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RGBCameraModifiable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RGBCameraModifiable_FrameGrabbingMode FrameGrabbingMode;
  static constexpr FrameGrabbingMode Disabled =
    RGBCameraModifiable_FrameGrabbingMode_Disabled;
  static constexpr FrameGrabbingMode CUDA =
    RGBCameraModifiable_FrameGrabbingMode_CUDA;
  static inline bool FrameGrabbingMode_IsValid(int value) {
    return RGBCameraModifiable_FrameGrabbingMode_IsValid(value);
  }
  static constexpr FrameGrabbingMode FrameGrabbingMode_MIN =
    RGBCameraModifiable_FrameGrabbingMode_FrameGrabbingMode_MIN;
  static constexpr FrameGrabbingMode FrameGrabbingMode_MAX =
    RGBCameraModifiable_FrameGrabbingMode_FrameGrabbingMode_MAX;
  static constexpr int FrameGrabbingMode_ARRAYSIZE =
    RGBCameraModifiable_FrameGrabbingMode_FrameGrabbingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrameGrabbingMode_descriptor() {
    return RGBCameraModifiable_FrameGrabbingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& FrameGrabbingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameGrabbingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameGrabbingMode_Name.");
    return RGBCameraModifiable_FrameGrabbingMode_Name(enum_t_value);
  }
  static inline bool FrameGrabbingMode_Parse(const std::string& name,
      FrameGrabbingMode* value) {
    return RGBCameraModifiable_FrameGrabbingMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool record = 1;
  void clear_record();
  static const int kRecordFieldNumber = 1;
  bool record() const;
  void set_record(bool value);

  // uint32 fps = 2;
  void clear_fps();
  static const int kFpsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps() const;
  void set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .Cognata.SDK.RGBCameraModifiable.FrameGrabbingMode frameGrabbingMode = 3;
  void clear_framegrabbingmode();
  static const int kFrameGrabbingModeFieldNumber = 3;
  ::Cognata::SDK::RGBCameraModifiable_FrameGrabbingMode framegrabbingmode() const;
  void set_framegrabbingmode(::Cognata::SDK::RGBCameraModifiable_FrameGrabbingMode value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RGBCameraModifiable)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool record_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps_;
  int framegrabbingmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class LidarModifiable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.LidarModifiable) */ {
 public:
  LidarModifiable();
  virtual ~LidarModifiable();

  LidarModifiable(const LidarModifiable& from);
  LidarModifiable(LidarModifiable&& from) noexcept
    : LidarModifiable() {
    *this = ::std::move(from);
  }

  inline LidarModifiable& operator=(const LidarModifiable& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarModifiable& operator=(LidarModifiable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarModifiable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarModifiable* internal_default_instance() {
    return reinterpret_cast<const LidarModifiable*>(
               &_LidarModifiable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(LidarModifiable* other);
  friend void swap(LidarModifiable& a, LidarModifiable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarModifiable* New() const final {
    return CreateMaybeMessage<LidarModifiable>(nullptr);
  }

  LidarModifiable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarModifiable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarModifiable& from);
  void MergeFrom(const LidarModifiable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarModifiable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.LidarModifiable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool record = 1;
  void clear_record();
  static const int kRecordFieldNumber = 1;
  bool record() const;
  void set_record(bool value);

  // uint32 fps = 2;
  void clear_fps();
  static const int kFpsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps() const;
  void set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.LidarModifiable)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool record_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class DOGTModifiable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.DOGTModifiable) */ {
 public:
  DOGTModifiable();
  virtual ~DOGTModifiable();

  DOGTModifiable(const DOGTModifiable& from);
  DOGTModifiable(DOGTModifiable&& from) noexcept
    : DOGTModifiable() {
    *this = ::std::move(from);
  }

  inline DOGTModifiable& operator=(const DOGTModifiable& from) {
    CopyFrom(from);
    return *this;
  }
  inline DOGTModifiable& operator=(DOGTModifiable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DOGTModifiable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DOGTModifiable* internal_default_instance() {
    return reinterpret_cast<const DOGTModifiable*>(
               &_DOGTModifiable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(DOGTModifiable* other);
  friend void swap(DOGTModifiable& a, DOGTModifiable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DOGTModifiable* New() const final {
    return CreateMaybeMessage<DOGTModifiable>(nullptr);
  }

  DOGTModifiable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DOGTModifiable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DOGTModifiable& from);
  void MergeFrom(const DOGTModifiable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DOGTModifiable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.DOGTModifiable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool record = 1;
  void clear_record();
  static const int kRecordFieldNumber = 1;
  bool record() const;
  void set_record(bool value);

  // uint32 fps = 2;
  void clear_fps();
  static const int kFpsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps() const;
  void set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.DOGTModifiable)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool record_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class LogCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.LogCommand) */ {
 public:
  LogCommand();
  virtual ~LogCommand();

  LogCommand(const LogCommand& from);
  LogCommand(LogCommand&& from) noexcept
    : LogCommand() {
    *this = ::std::move(from);
  }

  inline LogCommand& operator=(const LogCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogCommand& operator=(LogCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogCommand* internal_default_instance() {
    return reinterpret_cast<const LogCommand*>(
               &_LogCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(LogCommand* other);
  friend void swap(LogCommand& a, LogCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogCommand* New() const final {
    return CreateMaybeMessage<LogCommand>(nullptr);
  }

  LogCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogCommand& from);
  void MergeFrom(const LogCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.LogCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // uint32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.LogCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ConfigurationCommand) */ {
 public:
  ConfigurationCommand();
  virtual ~ConfigurationCommand();

  ConfigurationCommand(const ConfigurationCommand& from);
  ConfigurationCommand(ConfigurationCommand&& from) noexcept
    : ConfigurationCommand() {
    *this = ::std::move(from);
  }

  inline ConfigurationCommand& operator=(const ConfigurationCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationCommand& operator=(ConfigurationCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigurationCommand* internal_default_instance() {
    return reinterpret_cast<const ConfigurationCommand*>(
               &_ConfigurationCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(ConfigurationCommand* other);
  friend void swap(ConfigurationCommand& a, ConfigurationCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationCommand* New() const final {
    return CreateMaybeMessage<ConfigurationCommand>(nullptr);
  }

  ConfigurationCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationCommand& from);
  void MergeFrom(const ConfigurationCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ConfigurationCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.TimeStepConfig timeStepConfig = 1;
  bool has_timestepconfig() const;
  void clear_timestepconfig();
  static const int kTimeStepConfigFieldNumber = 1;
  const ::Cognata::SDK::TimeStepConfig& timestepconfig() const;
  ::Cognata::SDK::TimeStepConfig* release_timestepconfig();
  ::Cognata::SDK::TimeStepConfig* mutable_timestepconfig();
  void set_allocated_timestepconfig(::Cognata::SDK::TimeStepConfig* timestepconfig);

  // .Cognata.SDK.TeleportConfig teleportConfig = 2;
  bool has_teleportconfig() const;
  void clear_teleportconfig();
  static const int kTeleportConfigFieldNumber = 2;
  const ::Cognata::SDK::TeleportConfig& teleportconfig() const;
  ::Cognata::SDK::TeleportConfig* release_teleportconfig();
  ::Cognata::SDK::TeleportConfig* mutable_teleportconfig();
  void set_allocated_teleportconfig(::Cognata::SDK::TeleportConfig* teleportconfig);

  // bool optimizeRendering = 3;
  void clear_optimizerendering();
  static const int kOptimizeRenderingFieldNumber = 3;
  bool optimizerendering() const;
  void set_optimizerendering(bool value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.ConfigurationCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::TimeStepConfig* timestepconfig_;
  ::Cognata::SDK::TeleportConfig* teleportconfig_;
  bool optimizerendering_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class TimeStepConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.TimeStepConfig) */ {
 public:
  TimeStepConfig();
  virtual ~TimeStepConfig();

  TimeStepConfig(const TimeStepConfig& from);
  TimeStepConfig(TimeStepConfig&& from) noexcept
    : TimeStepConfig() {
    *this = ::std::move(from);
  }

  inline TimeStepConfig& operator=(const TimeStepConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeStepConfig& operator=(TimeStepConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeStepConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeStepConfig* internal_default_instance() {
    return reinterpret_cast<const TimeStepConfig*>(
               &_TimeStepConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(TimeStepConfig* other);
  friend void swap(TimeStepConfig& a, TimeStepConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeStepConfig* New() const final {
    return CreateMaybeMessage<TimeStepConfig>(nullptr);
  }

  TimeStepConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeStepConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeStepConfig& from);
  void MergeFrom(const TimeStepConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeStepConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.TimeStepConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float fixedDeltaTime = 1;
  void clear_fixeddeltatime();
  static const int kFixedDeltaTimeFieldNumber = 1;
  float fixeddeltatime() const;
  void set_fixeddeltatime(float value);

  // float wakeupEverySteps = 2;
  void clear_wakeupeverysteps();
  static const int kWakeupEveryStepsFieldNumber = 2;
  float wakeupeverysteps() const;
  void set_wakeupeverysteps(float value);

  // uint32 fps = 3;
  void clear_fps();
  static const int kFpsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps() const;
  void set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.TimeStepConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float fixeddeltatime_;
  float wakeupeverysteps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class TeleportConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.TeleportConfig) */ {
 public:
  TeleportConfig();
  virtual ~TeleportConfig();

  TeleportConfig(const TeleportConfig& from);
  TeleportConfig(TeleportConfig&& from) noexcept
    : TeleportConfig() {
    *this = ::std::move(from);
  }

  inline TeleportConfig& operator=(const TeleportConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleportConfig& operator=(TeleportConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleportConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleportConfig* internal_default_instance() {
    return reinterpret_cast<const TeleportConfig*>(
               &_TeleportConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(TeleportConfig* other);
  friend void swap(TeleportConfig& a, TeleportConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeleportConfig* New() const final {
    return CreateMaybeMessage<TeleportConfig>(nullptr);
  }

  TeleportConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleportConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleportConfig& from);
  void MergeFrom(const TeleportConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleportConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.TeleportConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TeleportConfig_Dimensions Dimensions;
  static constexpr Dimensions TwoD =
    TeleportConfig_Dimensions_TwoD;
  static constexpr Dimensions ThreeD =
    TeleportConfig_Dimensions_ThreeD;
  static inline bool Dimensions_IsValid(int value) {
    return TeleportConfig_Dimensions_IsValid(value);
  }
  static constexpr Dimensions Dimensions_MIN =
    TeleportConfig_Dimensions_Dimensions_MIN;
  static constexpr Dimensions Dimensions_MAX =
    TeleportConfig_Dimensions_Dimensions_MAX;
  static constexpr int Dimensions_ARRAYSIZE =
    TeleportConfig_Dimensions_Dimensions_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Dimensions_descriptor() {
    return TeleportConfig_Dimensions_descriptor();
  }
  template<typename T>
  static inline const std::string& Dimensions_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Dimensions>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Dimensions_Name.");
    return TeleportConfig_Dimensions_Name(enum_t_value);
  }
  static inline bool Dimensions_Parse(const std::string& name,
      Dimensions* value) {
    return TeleportConfig_Dimensions_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Cognata.SDK.TeleportConfig.Dimensions TeleportTransformDim = 2;
  void clear_teleporttransformdim();
  static const int kTeleportTransformDimFieldNumber = 2;
  ::Cognata::SDK::TeleportConfig_Dimensions teleporttransformdim() const;
  void set_teleporttransformdim(::Cognata::SDK::TeleportConfig_Dimensions value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.TeleportConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int teleporttransformdim_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class VersionCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.VersionCommand) */ {
 public:
  VersionCommand();
  virtual ~VersionCommand();

  VersionCommand(const VersionCommand& from);
  VersionCommand(VersionCommand&& from) noexcept
    : VersionCommand() {
    *this = ::std::move(from);
  }

  inline VersionCommand& operator=(const VersionCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionCommand& operator=(VersionCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionCommand* internal_default_instance() {
    return reinterpret_cast<const VersionCommand*>(
               &_VersionCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(VersionCommand* other);
  friend void swap(VersionCommand& a, VersionCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionCommand* New() const final {
    return CreateMaybeMessage<VersionCommand>(nullptr);
  }

  VersionCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionCommand& from);
  void MergeFrom(const VersionCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.VersionCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sdkVersion = 1;
  void clear_sdkversion();
  static const int kSdkVersionFieldNumber = 1;
  const std::string& sdkversion() const;
  void set_sdkversion(const std::string& value);
  void set_sdkversion(std::string&& value);
  void set_sdkversion(const char* value);
  void set_sdkversion(const char* value, size_t size);
  std::string* mutable_sdkversion();
  std::string* release_sdkversion();
  void set_allocated_sdkversion(std::string* sdkversion);

  // string oemVersion = 2;
  void clear_oemversion();
  static const int kOemVersionFieldNumber = 2;
  const std::string& oemversion() const;
  void set_oemversion(const std::string& value);
  void set_oemversion(std::string&& value);
  void set_oemversion(const char* value);
  void set_oemversion(const char* value, size_t size);
  std::string* mutable_oemversion();
  std::string* release_oemversion();
  void set_allocated_oemversion(std::string* oemversion);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.VersionCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdkversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oemversion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class ControlTrafficLightsCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ControlTrafficLightsCommand) */ {
 public:
  ControlTrafficLightsCommand();
  virtual ~ControlTrafficLightsCommand();

  ControlTrafficLightsCommand(const ControlTrafficLightsCommand& from);
  ControlTrafficLightsCommand(ControlTrafficLightsCommand&& from) noexcept
    : ControlTrafficLightsCommand() {
    *this = ::std::move(from);
  }

  inline ControlTrafficLightsCommand& operator=(const ControlTrafficLightsCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlTrafficLightsCommand& operator=(ControlTrafficLightsCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlTrafficLightsCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlTrafficLightsCommand* internal_default_instance() {
    return reinterpret_cast<const ControlTrafficLightsCommand*>(
               &_ControlTrafficLightsCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(ControlTrafficLightsCommand* other);
  friend void swap(ControlTrafficLightsCommand& a, ControlTrafficLightsCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlTrafficLightsCommand* New() const final {
    return CreateMaybeMessage<ControlTrafficLightsCommand>(nullptr);
  }

  ControlTrafficLightsCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlTrafficLightsCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlTrafficLightsCommand& from);
  void MergeFrom(const ControlTrafficLightsCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlTrafficLightsCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ControlTrafficLightsCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool controlTrafficLights = 1;
  void clear_controltrafficlights();
  static const int kControlTrafficLightsFieldNumber = 1;
  bool controltrafficlights() const;
  void set_controltrafficlights(bool value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.ControlTrafficLightsCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool controltrafficlights_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightJunction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.TrafficLightJunction) */ {
 public:
  TrafficLightJunction();
  virtual ~TrafficLightJunction();

  TrafficLightJunction(const TrafficLightJunction& from);
  TrafficLightJunction(TrafficLightJunction&& from) noexcept
    : TrafficLightJunction() {
    *this = ::std::move(from);
  }

  inline TrafficLightJunction& operator=(const TrafficLightJunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightJunction& operator=(TrafficLightJunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLightJunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightJunction* internal_default_instance() {
    return reinterpret_cast<const TrafficLightJunction*>(
               &_TrafficLightJunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(TrafficLightJunction* other);
  friend void swap(TrafficLightJunction& a, TrafficLightJunction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightJunction* New() const final {
    return CreateMaybeMessage<TrafficLightJunction>(nullptr);
  }

  TrafficLightJunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightJunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLightJunction& from);
  void MergeFrom(const TrafficLightJunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightJunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.TrafficLightJunction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.TrafficLightState trafficLights = 2;
  int trafficlights_size() const;
  void clear_trafficlights();
  static const int kTrafficLightsFieldNumber = 2;
  ::Cognata::SDK::TrafficLightState* mutable_trafficlights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::TrafficLightState >*
      mutable_trafficlights();
  const ::Cognata::SDK::TrafficLightState& trafficlights(int index) const;
  ::Cognata::SDK::TrafficLightState* add_trafficlights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::TrafficLightState >&
      trafficlights() const;

  // uint32 junctionId = 1;
  void clear_junctionid();
  static const int kJunctionIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 junctionid() const;
  void set_junctionid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.TrafficLightJunction)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::TrafficLightState > trafficlights_;
  ::PROTOBUF_NAMESPACE_ID::uint32 junctionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.TrafficLightState) */ {
 public:
  TrafficLightState();
  virtual ~TrafficLightState();

  TrafficLightState(const TrafficLightState& from);
  TrafficLightState(TrafficLightState&& from) noexcept
    : TrafficLightState() {
    *this = ::std::move(from);
  }

  inline TrafficLightState& operator=(const TrafficLightState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightState& operator=(TrafficLightState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLightState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightState* internal_default_instance() {
    return reinterpret_cast<const TrafficLightState*>(
               &_TrafficLightState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(TrafficLightState* other);
  friend void swap(TrafficLightState& a, TrafficLightState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightState* New() const final {
    return CreateMaybeMessage<TrafficLightState>(nullptr);
  }

  TrafficLightState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLightState& from);
  void MergeFrom(const TrafficLightState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.TrafficLightState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficLightState_State State;
  static constexpr State Green =
    TrafficLightState_State_Green;
  static constexpr State Yellow =
    TrafficLightState_State_Yellow;
  static constexpr State Red =
    TrafficLightState_State_Red;
  static constexpr State Off =
    TrafficLightState_State_Off;
  static inline bool State_IsValid(int value) {
    return TrafficLightState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    TrafficLightState_State_State_MIN;
  static constexpr State State_MAX =
    TrafficLightState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    TrafficLightState_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return TrafficLightState_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return TrafficLightState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return TrafficLightState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 trafficLightId = 1;
  void clear_trafficlightid();
  static const int kTrafficLightIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 trafficlightid() const;
  void set_trafficlightid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .Cognata.SDK.TrafficLightState.State state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::Cognata::SDK::TrafficLightState_State state() const;
  void set_state(::Cognata::SDK::TrafficLightState_State value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.TrafficLightState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trafficlightid_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightsCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.TrafficLightsCommand) */ {
 public:
  TrafficLightsCommand();
  virtual ~TrafficLightsCommand();

  TrafficLightsCommand(const TrafficLightsCommand& from);
  TrafficLightsCommand(TrafficLightsCommand&& from) noexcept
    : TrafficLightsCommand() {
    *this = ::std::move(from);
  }

  inline TrafficLightsCommand& operator=(const TrafficLightsCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightsCommand& operator=(TrafficLightsCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLightsCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightsCommand* internal_default_instance() {
    return reinterpret_cast<const TrafficLightsCommand*>(
               &_TrafficLightsCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(TrafficLightsCommand* other);
  friend void swap(TrafficLightsCommand& a, TrafficLightsCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightsCommand* New() const final {
    return CreateMaybeMessage<TrafficLightsCommand>(nullptr);
  }

  TrafficLightsCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightsCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLightsCommand& from);
  void MergeFrom(const TrafficLightsCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightsCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.TrafficLightsCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientToEngineMessage_2eproto);
    return ::descriptor_table_ClientToEngineMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.TrafficLightJunction trafficLightJunctions = 1;
  int trafficlightjunctions_size() const;
  void clear_trafficlightjunctions();
  static const int kTrafficLightJunctionsFieldNumber = 1;
  ::Cognata::SDK::TrafficLightJunction* mutable_trafficlightjunctions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::TrafficLightJunction >*
      mutable_trafficlightjunctions();
  const ::Cognata::SDK::TrafficLightJunction& trafficlightjunctions(int index) const;
  ::Cognata::SDK::TrafficLightJunction* add_trafficlightjunctions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::TrafficLightJunction >&
      trafficlightjunctions() const;

  // @@protoc_insertion_point(class_scope:Cognata.SDK.TrafficLightsCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::TrafficLightJunction > trafficlightjunctions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToEngineMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientToEngineMessage

// .Cognata.SDK.Query query = 10;
inline bool ClientToEngineMessage::has_query() const {
  return Msg_case() == kQuery;
}
inline void ClientToEngineMessage::set_has_query() {
  _oneof_case_[0] = kQuery;
}
inline void ClientToEngineMessage::clear_query() {
  if (has_query()) {
    delete Msg_.query_;
    clear_has_Msg();
  }
}
inline ::Cognata::SDK::Query* ClientToEngineMessage::release_query() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ClientToEngineMessage.query)
  if (has_query()) {
    clear_has_Msg();
      ::Cognata::SDK::Query* temp = Msg_.query_;
    Msg_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::Query& ClientToEngineMessage::query() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ClientToEngineMessage.query)
  return has_query()
      ? *Msg_.query_
      : *reinterpret_cast< ::Cognata::SDK::Query*>(&::Cognata::SDK::_Query_default_instance_);
}
inline ::Cognata::SDK::Query* ClientToEngineMessage::mutable_query() {
  if (!has_query()) {
    clear_Msg();
    set_has_query();
    Msg_.query_ = CreateMaybeMessage< ::Cognata::SDK::Query >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ClientToEngineMessage.query)
  return Msg_.query_;
}

// .Cognata.SDK.Command command = 11;
inline bool ClientToEngineMessage::has_command() const {
  return Msg_case() == kCommand;
}
inline void ClientToEngineMessage::set_has_command() {
  _oneof_case_[0] = kCommand;
}
inline void ClientToEngineMessage::clear_command() {
  if (has_command()) {
    delete Msg_.command_;
    clear_has_Msg();
  }
}
inline ::Cognata::SDK::Command* ClientToEngineMessage::release_command() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ClientToEngineMessage.command)
  if (has_command()) {
    clear_has_Msg();
      ::Cognata::SDK::Command* temp = Msg_.command_;
    Msg_.command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::Command& ClientToEngineMessage::command() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ClientToEngineMessage.command)
  return has_command()
      ? *Msg_.command_
      : *reinterpret_cast< ::Cognata::SDK::Command*>(&::Cognata::SDK::_Command_default_instance_);
}
inline ::Cognata::SDK::Command* ClientToEngineMessage::mutable_command() {
  if (!has_command()) {
    clear_Msg();
    set_has_command();
    Msg_.command_ = CreateMaybeMessage< ::Cognata::SDK::Command >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ClientToEngineMessage.command)
  return Msg_.command_;
}

inline bool ClientToEngineMessage::has_Msg() const {
  return Msg_case() != MSG_NOT_SET;
}
inline void ClientToEngineMessage::clear_has_Msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ClientToEngineMessage::MsgCase ClientToEngineMessage::Msg_case() const {
  return ClientToEngineMessage::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Query

// .Cognata.SDK.SensorsQuery sensorsQuery = 10;
inline bool Query::has_sensorsquery() const {
  return QueryType_case() == kSensorsQuery;
}
inline void Query::set_has_sensorsquery() {
  _oneof_case_[0] = kSensorsQuery;
}
inline void Query::clear_sensorsquery() {
  if (has_sensorsquery()) {
    delete QueryType_.sensorsquery_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::SensorsQuery* Query::release_sensorsquery() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Query.sensorsQuery)
  if (has_sensorsquery()) {
    clear_has_QueryType();
      ::Cognata::SDK::SensorsQuery* temp = QueryType_.sensorsquery_;
    QueryType_.sensorsquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SensorsQuery& Query::sensorsquery() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Query.sensorsQuery)
  return has_sensorsquery()
      ? *QueryType_.sensorsquery_
      : *reinterpret_cast< ::Cognata::SDK::SensorsQuery*>(&::Cognata::SDK::_SensorsQuery_default_instance_);
}
inline ::Cognata::SDK::SensorsQuery* Query::mutable_sensorsquery() {
  if (!has_sensorsquery()) {
    clear_QueryType();
    set_has_sensorsquery();
    QueryType_.sensorsquery_ = CreateMaybeMessage< ::Cognata::SDK::SensorsQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Query.sensorsQuery)
  return QueryType_.sensorsquery_;
}

// .Cognata.SDK.EngineVersionQuery engineVersionQuery = 11;
inline bool Query::has_engineversionquery() const {
  return QueryType_case() == kEngineVersionQuery;
}
inline void Query::set_has_engineversionquery() {
  _oneof_case_[0] = kEngineVersionQuery;
}
inline void Query::clear_engineversionquery() {
  if (has_engineversionquery()) {
    delete QueryType_.engineversionquery_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::EngineVersionQuery* Query::release_engineversionquery() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Query.engineVersionQuery)
  if (has_engineversionquery()) {
    clear_has_QueryType();
      ::Cognata::SDK::EngineVersionQuery* temp = QueryType_.engineversionquery_;
    QueryType_.engineversionquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::EngineVersionQuery& Query::engineversionquery() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Query.engineVersionQuery)
  return has_engineversionquery()
      ? *QueryType_.engineversionquery_
      : *reinterpret_cast< ::Cognata::SDK::EngineVersionQuery*>(&::Cognata::SDK::_EngineVersionQuery_default_instance_);
}
inline ::Cognata::SDK::EngineVersionQuery* Query::mutable_engineversionquery() {
  if (!has_engineversionquery()) {
    clear_QueryType();
    set_has_engineversionquery();
    QueryType_.engineversionquery_ = CreateMaybeMessage< ::Cognata::SDK::EngineVersionQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Query.engineVersionQuery)
  return QueryType_.engineversionquery_;
}

// .Cognata.SDK.CarsQuery carsQuery = 12;
inline bool Query::has_carsquery() const {
  return QueryType_case() == kCarsQuery;
}
inline void Query::set_has_carsquery() {
  _oneof_case_[0] = kCarsQuery;
}
inline void Query::clear_carsquery() {
  if (has_carsquery()) {
    delete QueryType_.carsquery_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::CarsQuery* Query::release_carsquery() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Query.carsQuery)
  if (has_carsquery()) {
    clear_has_QueryType();
      ::Cognata::SDK::CarsQuery* temp = QueryType_.carsquery_;
    QueryType_.carsquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::CarsQuery& Query::carsquery() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Query.carsQuery)
  return has_carsquery()
      ? *QueryType_.carsquery_
      : *reinterpret_cast< ::Cognata::SDK::CarsQuery*>(&::Cognata::SDK::_CarsQuery_default_instance_);
}
inline ::Cognata::SDK::CarsQuery* Query::mutable_carsquery() {
  if (!has_carsquery()) {
    clear_QueryType();
    set_has_carsquery();
    QueryType_.carsquery_ = CreateMaybeMessage< ::Cognata::SDK::CarsQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Query.carsQuery)
  return QueryType_.carsquery_;
}

// .Cognata.SDK.TerrainQuery terrainQuery = 13;
inline bool Query::has_terrainquery() const {
  return QueryType_case() == kTerrainQuery;
}
inline void Query::set_has_terrainquery() {
  _oneof_case_[0] = kTerrainQuery;
}
inline void Query::clear_terrainquery() {
  if (has_terrainquery()) {
    delete QueryType_.terrainquery_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::TerrainQuery* Query::release_terrainquery() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Query.terrainQuery)
  if (has_terrainquery()) {
    clear_has_QueryType();
      ::Cognata::SDK::TerrainQuery* temp = QueryType_.terrainquery_;
    QueryType_.terrainquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::TerrainQuery& Query::terrainquery() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Query.terrainQuery)
  return has_terrainquery()
      ? *QueryType_.terrainquery_
      : *reinterpret_cast< ::Cognata::SDK::TerrainQuery*>(&::Cognata::SDK::_TerrainQuery_default_instance_);
}
inline ::Cognata::SDK::TerrainQuery* Query::mutable_terrainquery() {
  if (!has_terrainquery()) {
    clear_QueryType();
    set_has_terrainquery();
    QueryType_.terrainquery_ = CreateMaybeMessage< ::Cognata::SDK::TerrainQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Query.terrainQuery)
  return QueryType_.terrainquery_;
}

// .Cognata.SDK.MovingObjectsQuery movingObjectsQuery = 14;
inline bool Query::has_movingobjectsquery() const {
  return QueryType_case() == kMovingObjectsQuery;
}
inline void Query::set_has_movingobjectsquery() {
  _oneof_case_[0] = kMovingObjectsQuery;
}
inline void Query::clear_movingobjectsquery() {
  if (has_movingobjectsquery()) {
    delete QueryType_.movingobjectsquery_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::MovingObjectsQuery* Query::release_movingobjectsquery() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Query.movingObjectsQuery)
  if (has_movingobjectsquery()) {
    clear_has_QueryType();
      ::Cognata::SDK::MovingObjectsQuery* temp = QueryType_.movingobjectsquery_;
    QueryType_.movingobjectsquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::MovingObjectsQuery& Query::movingobjectsquery() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Query.movingObjectsQuery)
  return has_movingobjectsquery()
      ? *QueryType_.movingobjectsquery_
      : *reinterpret_cast< ::Cognata::SDK::MovingObjectsQuery*>(&::Cognata::SDK::_MovingObjectsQuery_default_instance_);
}
inline ::Cognata::SDK::MovingObjectsQuery* Query::mutable_movingobjectsquery() {
  if (!has_movingobjectsquery()) {
    clear_QueryType();
    set_has_movingobjectsquery();
    QueryType_.movingobjectsquery_ = CreateMaybeMessage< ::Cognata::SDK::MovingObjectsQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Query.movingObjectsQuery)
  return QueryType_.movingobjectsquery_;
}

// .Cognata.SDK.GlobalSensorsQuery globalSensorsQuery = 15;
inline bool Query::has_globalsensorsquery() const {
  return QueryType_case() == kGlobalSensorsQuery;
}
inline void Query::set_has_globalsensorsquery() {
  _oneof_case_[0] = kGlobalSensorsQuery;
}
inline void Query::clear_globalsensorsquery() {
  if (has_globalsensorsquery()) {
    delete QueryType_.globalsensorsquery_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::GlobalSensorsQuery* Query::release_globalsensorsquery() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Query.globalSensorsQuery)
  if (has_globalsensorsquery()) {
    clear_has_QueryType();
      ::Cognata::SDK::GlobalSensorsQuery* temp = QueryType_.globalsensorsquery_;
    QueryType_.globalsensorsquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::GlobalSensorsQuery& Query::globalsensorsquery() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Query.globalSensorsQuery)
  return has_globalsensorsquery()
      ? *QueryType_.globalsensorsquery_
      : *reinterpret_cast< ::Cognata::SDK::GlobalSensorsQuery*>(&::Cognata::SDK::_GlobalSensorsQuery_default_instance_);
}
inline ::Cognata::SDK::GlobalSensorsQuery* Query::mutable_globalsensorsquery() {
  if (!has_globalsensorsquery()) {
    clear_QueryType();
    set_has_globalsensorsquery();
    QueryType_.globalsensorsquery_ = CreateMaybeMessage< ::Cognata::SDK::GlobalSensorsQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Query.globalSensorsQuery)
  return QueryType_.globalsensorsquery_;
}

// .Cognata.SDK.PortQuery portQuery = 16 [deprecated = true];
inline bool Query::has_portquery() const {
  return QueryType_case() == kPortQuery;
}
inline void Query::set_has_portquery() {
  _oneof_case_[0] = kPortQuery;
}
inline void Query::clear_portquery() {
  if (has_portquery()) {
    delete QueryType_.portquery_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::PortQuery* Query::release_portquery() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Query.portQuery)
  if (has_portquery()) {
    clear_has_QueryType();
      ::Cognata::SDK::PortQuery* temp = QueryType_.portquery_;
    QueryType_.portquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::PortQuery& Query::portquery() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Query.portQuery)
  return has_portquery()
      ? *QueryType_.portquery_
      : *reinterpret_cast< ::Cognata::SDK::PortQuery*>(&::Cognata::SDK::_PortQuery_default_instance_);
}
inline ::Cognata::SDK::PortQuery* Query::mutable_portquery() {
  if (!has_portquery()) {
    clear_QueryType();
    set_has_portquery();
    QueryType_.portquery_ = CreateMaybeMessage< ::Cognata::SDK::PortQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Query.portQuery)
  return QueryType_.portquery_;
}

// .Cognata.SDK.RunIdQuery RunIdQuery = 17;
inline bool Query::has_runidquery() const {
  return QueryType_case() == kRunIdQuery;
}
inline void Query::set_has_runidquery() {
  _oneof_case_[0] = kRunIdQuery;
}
inline void Query::clear_runidquery() {
  if (has_runidquery()) {
    delete QueryType_.runidquery_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::RunIdQuery* Query::release_runidquery() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Query.RunIdQuery)
  if (has_runidquery()) {
    clear_has_QueryType();
      ::Cognata::SDK::RunIdQuery* temp = QueryType_.runidquery_;
    QueryType_.runidquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RunIdQuery& Query::runidquery() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Query.RunIdQuery)
  return has_runidquery()
      ? *QueryType_.runidquery_
      : *reinterpret_cast< ::Cognata::SDK::RunIdQuery*>(&::Cognata::SDK::_RunIdQuery_default_instance_);
}
inline ::Cognata::SDK::RunIdQuery* Query::mutable_runidquery() {
  if (!has_runidquery()) {
    clear_QueryType();
    set_has_runidquery();
    QueryType_.runidquery_ = CreateMaybeMessage< ::Cognata::SDK::RunIdQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Query.RunIdQuery)
  return QueryType_.runidquery_;
}

inline bool Query::has_QueryType() const {
  return QueryType_case() != QUERYTYPE_NOT_SET;
}
inline void Query::clear_has_QueryType() {
  _oneof_case_[0] = QUERYTYPE_NOT_SET;
}
inline Query::QueryTypeCase Query::QueryType_case() const {
  return Query::QueryTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Command

// .Cognata.SDK.CarCommand carCommand = 10;
inline bool Command::has_carcommand() const {
  return CommandType_case() == kCarCommand;
}
inline void Command::set_has_carcommand() {
  _oneof_case_[0] = kCarCommand;
}
inline void Command::clear_carcommand() {
  if (has_carcommand()) {
    delete CommandType_.carcommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::CarCommand* Command::release_carcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.carCommand)
  if (has_carcommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::CarCommand* temp = CommandType_.carcommand_;
    CommandType_.carcommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::CarCommand& Command::carcommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.carCommand)
  return has_carcommand()
      ? *CommandType_.carcommand_
      : *reinterpret_cast< ::Cognata::SDK::CarCommand*>(&::Cognata::SDK::_CarCommand_default_instance_);
}
inline ::Cognata::SDK::CarCommand* Command::mutable_carcommand() {
  if (!has_carcommand()) {
    clear_CommandType();
    set_has_carcommand();
    CommandType_.carcommand_ = CreateMaybeMessage< ::Cognata::SDK::CarCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.carCommand)
  return CommandType_.carcommand_;
}

// .Cognata.SDK.SimulationCommand simulationCommand = 11;
inline bool Command::has_simulationcommand() const {
  return CommandType_case() == kSimulationCommand;
}
inline void Command::set_has_simulationcommand() {
  _oneof_case_[0] = kSimulationCommand;
}
inline void Command::clear_simulationcommand() {
  if (has_simulationcommand()) {
    delete CommandType_.simulationcommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::SimulationCommand* Command::release_simulationcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.simulationCommand)
  if (has_simulationcommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::SimulationCommand* temp = CommandType_.simulationcommand_;
    CommandType_.simulationcommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SimulationCommand& Command::simulationcommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.simulationCommand)
  return has_simulationcommand()
      ? *CommandType_.simulationcommand_
      : *reinterpret_cast< ::Cognata::SDK::SimulationCommand*>(&::Cognata::SDK::_SimulationCommand_default_instance_);
}
inline ::Cognata::SDK::SimulationCommand* Command::mutable_simulationcommand() {
  if (!has_simulationcommand()) {
    clear_CommandType();
    set_has_simulationcommand();
    CommandType_.simulationcommand_ = CreateMaybeMessage< ::Cognata::SDK::SimulationCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.simulationCommand)
  return CommandType_.simulationcommand_;
}

// .Cognata.SDK.SensorCommand sensorCommand = 12;
inline bool Command::has_sensorcommand() const {
  return CommandType_case() == kSensorCommand;
}
inline void Command::set_has_sensorcommand() {
  _oneof_case_[0] = kSensorCommand;
}
inline void Command::clear_sensorcommand() {
  if (has_sensorcommand()) {
    delete CommandType_.sensorcommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::SensorCommand* Command::release_sensorcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.sensorCommand)
  if (has_sensorcommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::SensorCommand* temp = CommandType_.sensorcommand_;
    CommandType_.sensorcommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SensorCommand& Command::sensorcommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.sensorCommand)
  return has_sensorcommand()
      ? *CommandType_.sensorcommand_
      : *reinterpret_cast< ::Cognata::SDK::SensorCommand*>(&::Cognata::SDK::_SensorCommand_default_instance_);
}
inline ::Cognata::SDK::SensorCommand* Command::mutable_sensorcommand() {
  if (!has_sensorcommand()) {
    clear_CommandType();
    set_has_sensorcommand();
    CommandType_.sensorcommand_ = CreateMaybeMessage< ::Cognata::SDK::SensorCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.sensorCommand)
  return CommandType_.sensorcommand_;
}

// .Cognata.SDK.LogCommand logCommand = 13;
inline bool Command::has_logcommand() const {
  return CommandType_case() == kLogCommand;
}
inline void Command::set_has_logcommand() {
  _oneof_case_[0] = kLogCommand;
}
inline void Command::clear_logcommand() {
  if (has_logcommand()) {
    delete CommandType_.logcommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::LogCommand* Command::release_logcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.logCommand)
  if (has_logcommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::LogCommand* temp = CommandType_.logcommand_;
    CommandType_.logcommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::LogCommand& Command::logcommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.logCommand)
  return has_logcommand()
      ? *CommandType_.logcommand_
      : *reinterpret_cast< ::Cognata::SDK::LogCommand*>(&::Cognata::SDK::_LogCommand_default_instance_);
}
inline ::Cognata::SDK::LogCommand* Command::mutable_logcommand() {
  if (!has_logcommand()) {
    clear_CommandType();
    set_has_logcommand();
    CommandType_.logcommand_ = CreateMaybeMessage< ::Cognata::SDK::LogCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.logCommand)
  return CommandType_.logcommand_;
}

// .Cognata.SDK.ConfigurationCommand configurationCommand = 14;
inline bool Command::has_configurationcommand() const {
  return CommandType_case() == kConfigurationCommand;
}
inline void Command::set_has_configurationcommand() {
  _oneof_case_[0] = kConfigurationCommand;
}
inline void Command::clear_configurationcommand() {
  if (has_configurationcommand()) {
    delete CommandType_.configurationcommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::ConfigurationCommand* Command::release_configurationcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.configurationCommand)
  if (has_configurationcommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::ConfigurationCommand* temp = CommandType_.configurationcommand_;
    CommandType_.configurationcommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ConfigurationCommand& Command::configurationcommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.configurationCommand)
  return has_configurationcommand()
      ? *CommandType_.configurationcommand_
      : *reinterpret_cast< ::Cognata::SDK::ConfigurationCommand*>(&::Cognata::SDK::_ConfigurationCommand_default_instance_);
}
inline ::Cognata::SDK::ConfigurationCommand* Command::mutable_configurationcommand() {
  if (!has_configurationcommand()) {
    clear_CommandType();
    set_has_configurationcommand();
    CommandType_.configurationcommand_ = CreateMaybeMessage< ::Cognata::SDK::ConfigurationCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.configurationCommand)
  return CommandType_.configurationcommand_;
}

// .Cognata.SDK.GlobalSensorCommand globalSensorCommand = 15;
inline bool Command::has_globalsensorcommand() const {
  return CommandType_case() == kGlobalSensorCommand;
}
inline void Command::set_has_globalsensorcommand() {
  _oneof_case_[0] = kGlobalSensorCommand;
}
inline void Command::clear_globalsensorcommand() {
  if (has_globalsensorcommand()) {
    delete CommandType_.globalsensorcommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::GlobalSensorCommand* Command::release_globalsensorcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.globalSensorCommand)
  if (has_globalsensorcommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::GlobalSensorCommand* temp = CommandType_.globalsensorcommand_;
    CommandType_.globalsensorcommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::GlobalSensorCommand& Command::globalsensorcommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.globalSensorCommand)
  return has_globalsensorcommand()
      ? *CommandType_.globalsensorcommand_
      : *reinterpret_cast< ::Cognata::SDK::GlobalSensorCommand*>(&::Cognata::SDK::_GlobalSensorCommand_default_instance_);
}
inline ::Cognata::SDK::GlobalSensorCommand* Command::mutable_globalsensorcommand() {
  if (!has_globalsensorcommand()) {
    clear_CommandType();
    set_has_globalsensorcommand();
    CommandType_.globalsensorcommand_ = CreateMaybeMessage< ::Cognata::SDK::GlobalSensorCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.globalSensorCommand)
  return CommandType_.globalsensorcommand_;
}

// .Cognata.SDK.VersionCommand versionCommand = 16;
inline bool Command::has_versioncommand() const {
  return CommandType_case() == kVersionCommand;
}
inline void Command::set_has_versioncommand() {
  _oneof_case_[0] = kVersionCommand;
}
inline void Command::clear_versioncommand() {
  if (has_versioncommand()) {
    delete CommandType_.versioncommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::VersionCommand* Command::release_versioncommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.versionCommand)
  if (has_versioncommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::VersionCommand* temp = CommandType_.versioncommand_;
    CommandType_.versioncommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::VersionCommand& Command::versioncommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.versionCommand)
  return has_versioncommand()
      ? *CommandType_.versioncommand_
      : *reinterpret_cast< ::Cognata::SDK::VersionCommand*>(&::Cognata::SDK::_VersionCommand_default_instance_);
}
inline ::Cognata::SDK::VersionCommand* Command::mutable_versioncommand() {
  if (!has_versioncommand()) {
    clear_CommandType();
    set_has_versioncommand();
    CommandType_.versioncommand_ = CreateMaybeMessage< ::Cognata::SDK::VersionCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.versionCommand)
  return CommandType_.versioncommand_;
}

// .Cognata.SDK.SpawnObjects spawnObjects = 17;
inline bool Command::has_spawnobjects() const {
  return CommandType_case() == kSpawnObjects;
}
inline void Command::set_has_spawnobjects() {
  _oneof_case_[0] = kSpawnObjects;
}
inline void Command::clear_spawnobjects() {
  if (has_spawnobjects()) {
    delete CommandType_.spawnobjects_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::SpawnObjects* Command::release_spawnobjects() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.spawnObjects)
  if (has_spawnobjects()) {
    clear_has_CommandType();
      ::Cognata::SDK::SpawnObjects* temp = CommandType_.spawnobjects_;
    CommandType_.spawnobjects_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SpawnObjects& Command::spawnobjects() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.spawnObjects)
  return has_spawnobjects()
      ? *CommandType_.spawnobjects_
      : *reinterpret_cast< ::Cognata::SDK::SpawnObjects*>(&::Cognata::SDK::_SpawnObjects_default_instance_);
}
inline ::Cognata::SDK::SpawnObjects* Command::mutable_spawnobjects() {
  if (!has_spawnobjects()) {
    clear_CommandType();
    set_has_spawnobjects();
    CommandType_.spawnobjects_ = CreateMaybeMessage< ::Cognata::SDK::SpawnObjects >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.spawnObjects)
  return CommandType_.spawnobjects_;
}

// .Cognata.SDK.DespawnObjects despawnObjects = 18;
inline bool Command::has_despawnobjects() const {
  return CommandType_case() == kDespawnObjects;
}
inline void Command::set_has_despawnobjects() {
  _oneof_case_[0] = kDespawnObjects;
}
inline void Command::clear_despawnobjects() {
  if (has_despawnobjects()) {
    delete CommandType_.despawnobjects_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::DespawnObjects* Command::release_despawnobjects() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.despawnObjects)
  if (has_despawnobjects()) {
    clear_has_CommandType();
      ::Cognata::SDK::DespawnObjects* temp = CommandType_.despawnobjects_;
    CommandType_.despawnobjects_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::DespawnObjects& Command::despawnobjects() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.despawnObjects)
  return has_despawnobjects()
      ? *CommandType_.despawnobjects_
      : *reinterpret_cast< ::Cognata::SDK::DespawnObjects*>(&::Cognata::SDK::_DespawnObjects_default_instance_);
}
inline ::Cognata::SDK::DespawnObjects* Command::mutable_despawnobjects() {
  if (!has_despawnobjects()) {
    clear_CommandType();
    set_has_despawnobjects();
    CommandType_.despawnobjects_ = CreateMaybeMessage< ::Cognata::SDK::DespawnObjects >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.despawnObjects)
  return CommandType_.despawnobjects_;
}

// .Cognata.SDK.CarReportCommand carReportCommand = 19;
inline bool Command::has_carreportcommand() const {
  return CommandType_case() == kCarReportCommand;
}
inline void Command::set_has_carreportcommand() {
  _oneof_case_[0] = kCarReportCommand;
}
inline void Command::clear_carreportcommand() {
  if (has_carreportcommand()) {
    delete CommandType_.carreportcommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::CarReportCommand* Command::release_carreportcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.carReportCommand)
  if (has_carreportcommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::CarReportCommand* temp = CommandType_.carreportcommand_;
    CommandType_.carreportcommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::CarReportCommand& Command::carreportcommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.carReportCommand)
  return has_carreportcommand()
      ? *CommandType_.carreportcommand_
      : *reinterpret_cast< ::Cognata::SDK::CarReportCommand*>(&::Cognata::SDK::_CarReportCommand_default_instance_);
}
inline ::Cognata::SDK::CarReportCommand* Command::mutable_carreportcommand() {
  if (!has_carreportcommand()) {
    clear_CommandType();
    set_has_carreportcommand();
    CommandType_.carreportcommand_ = CreateMaybeMessage< ::Cognata::SDK::CarReportCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.carReportCommand)
  return CommandType_.carreportcommand_;
}

// .Cognata.SDK.ControlTrafficLightsCommand controlTrafficLightsCommand = 20;
inline bool Command::has_controltrafficlightscommand() const {
  return CommandType_case() == kControlTrafficLightsCommand;
}
inline void Command::set_has_controltrafficlightscommand() {
  _oneof_case_[0] = kControlTrafficLightsCommand;
}
inline void Command::clear_controltrafficlightscommand() {
  if (has_controltrafficlightscommand()) {
    delete CommandType_.controltrafficlightscommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::ControlTrafficLightsCommand* Command::release_controltrafficlightscommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.controlTrafficLightsCommand)
  if (has_controltrafficlightscommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::ControlTrafficLightsCommand* temp = CommandType_.controltrafficlightscommand_;
    CommandType_.controltrafficlightscommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ControlTrafficLightsCommand& Command::controltrafficlightscommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.controlTrafficLightsCommand)
  return has_controltrafficlightscommand()
      ? *CommandType_.controltrafficlightscommand_
      : *reinterpret_cast< ::Cognata::SDK::ControlTrafficLightsCommand*>(&::Cognata::SDK::_ControlTrafficLightsCommand_default_instance_);
}
inline ::Cognata::SDK::ControlTrafficLightsCommand* Command::mutable_controltrafficlightscommand() {
  if (!has_controltrafficlightscommand()) {
    clear_CommandType();
    set_has_controltrafficlightscommand();
    CommandType_.controltrafficlightscommand_ = CreateMaybeMessage< ::Cognata::SDK::ControlTrafficLightsCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.controlTrafficLightsCommand)
  return CommandType_.controltrafficlightscommand_;
}

// .Cognata.SDK.TrafficLightsCommand trafficLightsCommand = 21;
inline bool Command::has_trafficlightscommand() const {
  return CommandType_case() == kTrafficLightsCommand;
}
inline void Command::set_has_trafficlightscommand() {
  _oneof_case_[0] = kTrafficLightsCommand;
}
inline void Command::clear_trafficlightscommand() {
  if (has_trafficlightscommand()) {
    delete CommandType_.trafficlightscommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::TrafficLightsCommand* Command::release_trafficlightscommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Command.trafficLightsCommand)
  if (has_trafficlightscommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::TrafficLightsCommand* temp = CommandType_.trafficlightscommand_;
    CommandType_.trafficlightscommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::TrafficLightsCommand& Command::trafficlightscommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Command.trafficLightsCommand)
  return has_trafficlightscommand()
      ? *CommandType_.trafficlightscommand_
      : *reinterpret_cast< ::Cognata::SDK::TrafficLightsCommand*>(&::Cognata::SDK::_TrafficLightsCommand_default_instance_);
}
inline ::Cognata::SDK::TrafficLightsCommand* Command::mutable_trafficlightscommand() {
  if (!has_trafficlightscommand()) {
    clear_CommandType();
    set_has_trafficlightscommand();
    CommandType_.trafficlightscommand_ = CreateMaybeMessage< ::Cognata::SDK::TrafficLightsCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Command.trafficLightsCommand)
  return CommandType_.trafficlightscommand_;
}

inline bool Command::has_CommandType() const {
  return CommandType_case() != COMMANDTYPE_NOT_SET;
}
inline void Command::clear_has_CommandType() {
  _oneof_case_[0] = COMMANDTYPE_NOT_SET;
}
inline Command::CommandTypeCase Command::CommandType_case() const {
  return Command::CommandTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RunIdQuery

// -------------------------------------------------------------------

// PortQuery

// -------------------------------------------------------------------

// SensorsQuery

// uint32 carId = 1;
inline void SensorsQuery::clear_carid() {
  carid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorsQuery::carid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorsQuery.carId)
  return carid_;
}
inline void SensorsQuery::set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  carid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorsQuery.carId)
}

// -------------------------------------------------------------------

// GlobalSensorsQuery

// -------------------------------------------------------------------

// EngineVersionQuery

// -------------------------------------------------------------------

// CarsQuery

// string clientNameFilter = 1;
inline void CarsQuery::clear_clientnamefilter() {
  clientnamefilter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CarsQuery::clientnamefilter() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarsQuery.clientNameFilter)
  return clientnamefilter_.GetNoArena();
}
inline void CarsQuery::set_clientnamefilter(const std::string& value) {
  
  clientnamefilter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarsQuery.clientNameFilter)
}
inline void CarsQuery::set_clientnamefilter(std::string&& value) {
  
  clientnamefilter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.CarsQuery.clientNameFilter)
}
inline void CarsQuery::set_clientnamefilter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientnamefilter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.CarsQuery.clientNameFilter)
}
inline void CarsQuery::set_clientnamefilter(const char* value, size_t size) {
  
  clientnamefilter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.CarsQuery.clientNameFilter)
}
inline std::string* CarsQuery::mutable_clientnamefilter() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarsQuery.clientNameFilter)
  return clientnamefilter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CarsQuery::release_clientnamefilter() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarsQuery.clientNameFilter)
  
  return clientnamefilter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CarsQuery::set_allocated_clientnamefilter(std::string* clientnamefilter) {
  if (clientnamefilter != nullptr) {
    
  } else {
    
  }
  clientnamefilter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientnamefilter);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarsQuery.clientNameFilter)
}

// -------------------------------------------------------------------

// MovingObjectsQuery

// -------------------------------------------------------------------

// TerrainQuery

// -------------------------------------------------------------------

// CarCommand

// uint32 id = 1;
inline void CarCommand::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CarCommand::id() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarCommand.id)
  return id_;
}
inline void CarCommand::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarCommand.id)
}

// .Cognata.SDK.CarConfiguration drive = 10;
inline bool CarCommand::has_drive() const {
  return CommandType_case() == kDrive;
}
inline void CarCommand::set_has_drive() {
  _oneof_case_[0] = kDrive;
}
inline ::Cognata::SDK::CarConfiguration* CarCommand::release_drive() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarCommand.drive)
  if (has_drive()) {
    clear_has_CommandType();
      ::Cognata::SDK::CarConfiguration* temp = CommandType_.drive_;
    CommandType_.drive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::CarConfiguration& CarCommand::drive() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarCommand.drive)
  return has_drive()
      ? *CommandType_.drive_
      : *reinterpret_cast< ::Cognata::SDK::CarConfiguration*>(&::Cognata::SDK::_CarConfiguration_default_instance_);
}
inline ::Cognata::SDK::CarConfiguration* CarCommand::mutable_drive() {
  if (!has_drive()) {
    clear_CommandType();
    set_has_drive();
    CommandType_.drive_ = CreateMaybeMessage< ::Cognata::SDK::CarConfiguration >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarCommand.drive)
  return CommandType_.drive_;
}

// .Cognata.SDK.Teleportation teleport = 11;
inline bool CarCommand::has_teleport() const {
  return CommandType_case() == kTeleport;
}
inline void CarCommand::set_has_teleport() {
  _oneof_case_[0] = kTeleport;
}
inline void CarCommand::clear_teleport() {
  if (has_teleport()) {
    delete CommandType_.teleport_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::Teleportation* CarCommand::release_teleport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarCommand.teleport)
  if (has_teleport()) {
    clear_has_CommandType();
      ::Cognata::SDK::Teleportation* temp = CommandType_.teleport_;
    CommandType_.teleport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::Teleportation& CarCommand::teleport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarCommand.teleport)
  return has_teleport()
      ? *CommandType_.teleport_
      : *reinterpret_cast< ::Cognata::SDK::Teleportation*>(&::Cognata::SDK::_Teleportation_default_instance_);
}
inline ::Cognata::SDK::Teleportation* CarCommand::mutable_teleport() {
  if (!has_teleport()) {
    clear_CommandType();
    set_has_teleport();
    CommandType_.teleport_ = CreateMaybeMessage< ::Cognata::SDK::Teleportation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarCommand.teleport)
  return CommandType_.teleport_;
}

// .Cognata.SDK.AIDriveConf aiDriving = 12;
inline bool CarCommand::has_aidriving() const {
  return CommandType_case() == kAiDriving;
}
inline void CarCommand::set_has_aidriving() {
  _oneof_case_[0] = kAiDriving;
}
inline void CarCommand::clear_aidriving() {
  if (has_aidriving()) {
    delete CommandType_.aidriving_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::AIDriveConf* CarCommand::release_aidriving() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarCommand.aiDriving)
  if (has_aidriving()) {
    clear_has_CommandType();
      ::Cognata::SDK::AIDriveConf* temp = CommandType_.aidriving_;
    CommandType_.aidriving_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::AIDriveConf& CarCommand::aidriving() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarCommand.aiDriving)
  return has_aidriving()
      ? *CommandType_.aidriving_
      : *reinterpret_cast< ::Cognata::SDK::AIDriveConf*>(&::Cognata::SDK::_AIDriveConf_default_instance_);
}
inline ::Cognata::SDK::AIDriveConf* CarCommand::mutable_aidriving() {
  if (!has_aidriving()) {
    clear_CommandType();
    set_has_aidriving();
    CommandType_.aidriving_ = CreateMaybeMessage< ::Cognata::SDK::AIDriveConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarCommand.aiDriving)
  return CommandType_.aidriving_;
}

// .Cognata.SDK.DrivingCommand drivingCommand = 13;
inline bool CarCommand::has_drivingcommand() const {
  return CommandType_case() == kDrivingCommand;
}
inline void CarCommand::set_has_drivingcommand() {
  _oneof_case_[0] = kDrivingCommand;
}
inline ::Cognata::SDK::DrivingCommand* CarCommand::release_drivingcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarCommand.drivingCommand)
  if (has_drivingcommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::DrivingCommand* temp = CommandType_.drivingcommand_;
    CommandType_.drivingcommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::DrivingCommand& CarCommand::drivingcommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarCommand.drivingCommand)
  return has_drivingcommand()
      ? *CommandType_.drivingcommand_
      : *reinterpret_cast< ::Cognata::SDK::DrivingCommand*>(&::Cognata::SDK::_DrivingCommand_default_instance_);
}
inline ::Cognata::SDK::DrivingCommand* CarCommand::mutable_drivingcommand() {
  if (!has_drivingcommand()) {
    clear_CommandType();
    set_has_drivingcommand();
    CommandType_.drivingcommand_ = CreateMaybeMessage< ::Cognata::SDK::DrivingCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarCommand.drivingCommand)
  return CommandType_.drivingcommand_;
}

// .Cognata.SDK.SdkDriveConf sdkDriving = 14;
inline bool CarCommand::has_sdkdriving() const {
  return CommandType_case() == kSdkDriving;
}
inline void CarCommand::set_has_sdkdriving() {
  _oneof_case_[0] = kSdkDriving;
}
inline void CarCommand::clear_sdkdriving() {
  if (has_sdkdriving()) {
    delete CommandType_.sdkdriving_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::SdkDriveConf* CarCommand::release_sdkdriving() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarCommand.sdkDriving)
  if (has_sdkdriving()) {
    clear_has_CommandType();
      ::Cognata::SDK::SdkDriveConf* temp = CommandType_.sdkdriving_;
    CommandType_.sdkdriving_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SdkDriveConf& CarCommand::sdkdriving() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarCommand.sdkDriving)
  return has_sdkdriving()
      ? *CommandType_.sdkdriving_
      : *reinterpret_cast< ::Cognata::SDK::SdkDriveConf*>(&::Cognata::SDK::_SdkDriveConf_default_instance_);
}
inline ::Cognata::SDK::SdkDriveConf* CarCommand::mutable_sdkdriving() {
  if (!has_sdkdriving()) {
    clear_CommandType();
    set_has_sdkdriving();
    CommandType_.sdkdriving_ = CreateMaybeMessage< ::Cognata::SDK::SdkDriveConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarCommand.sdkDriving)
  return CommandType_.sdkdriving_;
}

// .Cognata.SDK.SensorPresetCloneCommand sensorPresetCloneCommand = 15;
inline bool CarCommand::has_sensorpresetclonecommand() const {
  return CommandType_case() == kSensorPresetCloneCommand;
}
inline void CarCommand::set_has_sensorpresetclonecommand() {
  _oneof_case_[0] = kSensorPresetCloneCommand;
}
inline void CarCommand::clear_sensorpresetclonecommand() {
  if (has_sensorpresetclonecommand()) {
    delete CommandType_.sensorpresetclonecommand_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::SensorPresetCloneCommand* CarCommand::release_sensorpresetclonecommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarCommand.sensorPresetCloneCommand)
  if (has_sensorpresetclonecommand()) {
    clear_has_CommandType();
      ::Cognata::SDK::SensorPresetCloneCommand* temp = CommandType_.sensorpresetclonecommand_;
    CommandType_.sensorpresetclonecommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SensorPresetCloneCommand& CarCommand::sensorpresetclonecommand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarCommand.sensorPresetCloneCommand)
  return has_sensorpresetclonecommand()
      ? *CommandType_.sensorpresetclonecommand_
      : *reinterpret_cast< ::Cognata::SDK::SensorPresetCloneCommand*>(&::Cognata::SDK::_SensorPresetCloneCommand_default_instance_);
}
inline ::Cognata::SDK::SensorPresetCloneCommand* CarCommand::mutable_sensorpresetclonecommand() {
  if (!has_sensorpresetclonecommand()) {
    clear_CommandType();
    set_has_sensorpresetclonecommand();
    CommandType_.sensorpresetclonecommand_ = CreateMaybeMessage< ::Cognata::SDK::SensorPresetCloneCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarCommand.sensorPresetCloneCommand)
  return CommandType_.sensorpresetclonecommand_;
}

inline bool CarCommand::has_CommandType() const {
  return CommandType_case() != COMMANDTYPE_NOT_SET;
}
inline void CarCommand::clear_has_CommandType() {
  _oneof_case_[0] = COMMANDTYPE_NOT_SET;
}
inline CarCommand::CommandTypeCase CarCommand::CommandType_case() const {
  return CarCommand::CommandTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SensorPresetCloneCommand

// uint32 targetVehicleId = 1;
inline void SensorPresetCloneCommand::clear_targetvehicleid() {
  targetvehicleid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorPresetCloneCommand::targetvehicleid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorPresetCloneCommand.targetVehicleId)
  return targetvehicleid_;
}
inline void SensorPresetCloneCommand::set_targetvehicleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  targetvehicleid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorPresetCloneCommand.targetVehicleId)
}

// -------------------------------------------------------------------

// Teleportation

// .Cognata.SDK.Transform3 transform = 1;
inline bool Teleportation::has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline const ::Cognata::SDK::Transform3& Teleportation::transform() const {
  const ::Cognata::SDK::Transform3* p = transform_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Teleportation.transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::Transform3*>(
      &::Cognata::SDK::_Transform3_default_instance_);
}
inline ::Cognata::SDK::Transform3* Teleportation::release_transform() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Teleportation.transform)
  
  ::Cognata::SDK::Transform3* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::Transform3* Teleportation::mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::Transform3>(GetArenaNoVirtual());
    transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Teleportation.transform)
  return transform_;
}
inline void Teleportation::set_allocated_transform(::Cognata::SDK::Transform3* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Teleportation.transform)
}

// .Cognata.SDK.SDKVector3 velocity = 2;
inline bool Teleportation::has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Teleportation::velocity() const {
  const ::Cognata::SDK::SDKVector3* p = velocity_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Teleportation.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Teleportation::release_velocity() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Teleportation.velocity)
  
  ::Cognata::SDK::SDKVector3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Teleportation::mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Teleportation.velocity)
  return velocity_;
}
inline void Teleportation::set_allocated_velocity(::Cognata::SDK::SDKVector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Teleportation.velocity)
}

// .Cognata.SDK.SDKVector3 acceleration = 3;
inline bool Teleportation::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Teleportation::acceleration() const {
  const ::Cognata::SDK::SDKVector3* p = acceleration_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Teleportation.acceleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Teleportation::release_acceleration() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Teleportation.acceleration)
  
  ::Cognata::SDK::SDKVector3* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Teleportation::mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Teleportation.acceleration)
  return acceleration_;
}
inline void Teleportation::set_allocated_acceleration(::Cognata::SDK::SDKVector3* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Teleportation.acceleration)
}

// .Cognata.SDK.Teleportation.NextLaneChoice nextLaneChoice = 4;
inline void Teleportation::clear_nextlanechoice() {
  nextlanechoice_ = 0;
}
inline ::Cognata::SDK::Teleportation_NextLaneChoice Teleportation::nextlanechoice() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Teleportation.nextLaneChoice)
  return static_cast< ::Cognata::SDK::Teleportation_NextLaneChoice >(nextlanechoice_);
}
inline void Teleportation::set_nextlanechoice(::Cognata::SDK::Teleportation_NextLaneChoice value) {
  
  nextlanechoice_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.Teleportation.nextLaneChoice)
}

// -------------------------------------------------------------------

// AIDriveConf

// -------------------------------------------------------------------

// SdkDriveConf

// .Cognata.SDK.PidControlConfig pidControlConfig = 1;
inline bool SdkDriveConf::has_pidcontrolconfig() const {
  return this != internal_default_instance() && pidcontrolconfig_ != nullptr;
}
inline void SdkDriveConf::clear_pidcontrolconfig() {
  if (GetArenaNoVirtual() == nullptr && pidcontrolconfig_ != nullptr) {
    delete pidcontrolconfig_;
  }
  pidcontrolconfig_ = nullptr;
}
inline const ::Cognata::SDK::PidControlConfig& SdkDriveConf::pidcontrolconfig() const {
  const ::Cognata::SDK::PidControlConfig* p = pidcontrolconfig_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.SdkDriveConf.pidControlConfig)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::PidControlConfig*>(
      &::Cognata::SDK::_PidControlConfig_default_instance_);
}
inline ::Cognata::SDK::PidControlConfig* SdkDriveConf::release_pidcontrolconfig() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SdkDriveConf.pidControlConfig)
  
  ::Cognata::SDK::PidControlConfig* temp = pidcontrolconfig_;
  pidcontrolconfig_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::PidControlConfig* SdkDriveConf::mutable_pidcontrolconfig() {
  
  if (pidcontrolconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::PidControlConfig>(GetArenaNoVirtual());
    pidcontrolconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SdkDriveConf.pidControlConfig)
  return pidcontrolconfig_;
}
inline void SdkDriveConf::set_allocated_pidcontrolconfig(::Cognata::SDK::PidControlConfig* pidcontrolconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pidcontrolconfig_;
  }
  if (pidcontrolconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pidcontrolconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pidcontrolconfig, submessage_arena);
    }
    
  } else {
    
  }
  pidcontrolconfig_ = pidcontrolconfig;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SdkDriveConf.pidControlConfig)
}

// -------------------------------------------------------------------

// SpawnObjects

// string clientName = 1;
inline void SpawnObjects::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpawnObjects::clientname() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SpawnObjects.clientName)
  return clientname_.GetNoArena();
}
inline void SpawnObjects::set_clientname(const std::string& value) {
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.SpawnObjects.clientName)
}
inline void SpawnObjects::set_clientname(std::string&& value) {
  
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.SpawnObjects.clientName)
}
inline void SpawnObjects::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.SpawnObjects.clientName)
}
inline void SpawnObjects::set_clientname(const char* value, size_t size) {
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.SpawnObjects.clientName)
}
inline std::string* SpawnObjects::mutable_clientname() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SpawnObjects.clientName)
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpawnObjects::release_clientname() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SpawnObjects.clientName)
  
  return clientname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpawnObjects::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    
  } else {
    
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SpawnObjects.clientName)
}

// repeated .Cognata.SDK.SpawnObject spawnObjects = 2;
inline int SpawnObjects::spawnobjects_size() const {
  return spawnobjects_.size();
}
inline void SpawnObjects::clear_spawnobjects() {
  spawnobjects_.Clear();
}
inline ::Cognata::SDK::SpawnObject* SpawnObjects::mutable_spawnobjects(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SpawnObjects.spawnObjects)
  return spawnobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SpawnObject >*
SpawnObjects::mutable_spawnobjects() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.SpawnObjects.spawnObjects)
  return &spawnobjects_;
}
inline const ::Cognata::SDK::SpawnObject& SpawnObjects::spawnobjects(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SpawnObjects.spawnObjects)
  return spawnobjects_.Get(index);
}
inline ::Cognata::SDK::SpawnObject* SpawnObjects::add_spawnobjects() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.SpawnObjects.spawnObjects)
  return spawnobjects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SpawnObject >&
SpawnObjects::spawnobjects() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.SpawnObjects.spawnObjects)
  return spawnobjects_;
}

// -------------------------------------------------------------------

// SpawnObject

// string clientObjectID = 2;
inline void SpawnObject::clear_clientobjectid() {
  clientobjectid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpawnObject::clientobjectid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SpawnObject.clientObjectID)
  return clientobjectid_.GetNoArena();
}
inline void SpawnObject::set_clientobjectid(const std::string& value) {
  
  clientobjectid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.SpawnObject.clientObjectID)
}
inline void SpawnObject::set_clientobjectid(std::string&& value) {
  
  clientobjectid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.SpawnObject.clientObjectID)
}
inline void SpawnObject::set_clientobjectid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientobjectid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.SpawnObject.clientObjectID)
}
inline void SpawnObject::set_clientobjectid(const char* value, size_t size) {
  
  clientobjectid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.SpawnObject.clientObjectID)
}
inline std::string* SpawnObject::mutable_clientobjectid() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SpawnObject.clientObjectID)
  return clientobjectid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpawnObject::release_clientobjectid() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SpawnObject.clientObjectID)
  
  return clientobjectid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpawnObject::set_allocated_clientobjectid(std::string* clientobjectid) {
  if (clientobjectid != nullptr) {
    
  } else {
    
  }
  clientobjectid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientobjectid);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SpawnObject.clientObjectID)
}

// string brandID = 3;
inline void SpawnObject::clear_brandid() {
  brandid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpawnObject::brandid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SpawnObject.brandID)
  return brandid_.GetNoArena();
}
inline void SpawnObject::set_brandid(const std::string& value) {
  
  brandid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.SpawnObject.brandID)
}
inline void SpawnObject::set_brandid(std::string&& value) {
  
  brandid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.SpawnObject.brandID)
}
inline void SpawnObject::set_brandid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brandid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.SpawnObject.brandID)
}
inline void SpawnObject::set_brandid(const char* value, size_t size) {
  
  brandid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.SpawnObject.brandID)
}
inline std::string* SpawnObject::mutable_brandid() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SpawnObject.brandID)
  return brandid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpawnObject::release_brandid() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SpawnObject.brandID)
  
  return brandid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpawnObject::set_allocated_brandid(std::string* brandid) {
  if (brandid != nullptr) {
    
  } else {
    
  }
  brandid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brandid);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SpawnObject.brandID)
}

// repeated .Cognata.SDK.Script scripts = 4;
inline int SpawnObject::scripts_size() const {
  return scripts_.size();
}
inline void SpawnObject::clear_scripts() {
  scripts_.Clear();
}
inline ::Cognata::SDK::Script* SpawnObject::mutable_scripts(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SpawnObject.scripts)
  return scripts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::Script >*
SpawnObject::mutable_scripts() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.SpawnObject.scripts)
  return &scripts_;
}
inline const ::Cognata::SDK::Script& SpawnObject::scripts(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SpawnObject.scripts)
  return scripts_.Get(index);
}
inline ::Cognata::SDK::Script* SpawnObject::add_scripts() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.SpawnObject.scripts)
  return scripts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::Script >&
SpawnObject::scripts() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.SpawnObject.scripts)
  return scripts_;
}

// .Cognata.SDK.SpawnObjectType spawnType = 5;
inline void SpawnObject::clear_spawntype() {
  spawntype_ = 0;
}
inline ::Cognata::SDK::SpawnObjectType SpawnObject::spawntype() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SpawnObject.spawnType)
  return static_cast< ::Cognata::SDK::SpawnObjectType >(spawntype_);
}
inline void SpawnObject::set_spawntype(::Cognata::SDK::SpawnObjectType value) {
  
  spawntype_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SpawnObject.spawnType)
}

// -------------------------------------------------------------------

// Script

// .Cognata.SDK.SimulationTimeTrigger simulationTimeTrigger = 50;
inline bool Script::has_simulationtimetrigger() const {
  return trigger_case() == kSimulationTimeTrigger;
}
inline void Script::set_has_simulationtimetrigger() {
  _oneof_case_[0] = kSimulationTimeTrigger;
}
inline void Script::clear_simulationtimetrigger() {
  if (has_simulationtimetrigger()) {
    delete trigger_.simulationtimetrigger_;
    clear_has_trigger();
  }
}
inline ::Cognata::SDK::SimulationTimeTrigger* Script::release_simulationtimetrigger() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Script.simulationTimeTrigger)
  if (has_simulationtimetrigger()) {
    clear_has_trigger();
      ::Cognata::SDK::SimulationTimeTrigger* temp = trigger_.simulationtimetrigger_;
    trigger_.simulationtimetrigger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SimulationTimeTrigger& Script::simulationtimetrigger() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Script.simulationTimeTrigger)
  return has_simulationtimetrigger()
      ? *trigger_.simulationtimetrigger_
      : *reinterpret_cast< ::Cognata::SDK::SimulationTimeTrigger*>(&::Cognata::SDK::_SimulationTimeTrigger_default_instance_);
}
inline ::Cognata::SDK::SimulationTimeTrigger* Script::mutable_simulationtimetrigger() {
  if (!has_simulationtimetrigger()) {
    clear_trigger();
    set_has_simulationtimetrigger();
    trigger_.simulationtimetrigger_ = CreateMaybeMessage< ::Cognata::SDK::SimulationTimeTrigger >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Script.simulationTimeTrigger)
  return trigger_.simulationtimetrigger_;
}

// float initialSpeed = 100;
inline bool Script::has_initialspeed() const {
  return action_case() == kInitialSpeed;
}
inline void Script::set_has_initialspeed() {
  _oneof_case_[1] = kInitialSpeed;
}
inline void Script::clear_initialspeed() {
  if (has_initialspeed()) {
    action_.initialspeed_ = 0;
    clear_has_action();
  }
}
inline float Script::initialspeed() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Script.initialSpeed)
  if (has_initialspeed()) {
    return action_.initialspeed_;
  }
  return 0;
}
inline void Script::set_initialspeed(float value) {
  if (!has_initialspeed()) {
    clear_action();
    set_has_initialspeed();
  }
  action_.initialspeed_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.Script.initialSpeed)
}

// float desiredSpeed = 101;
inline bool Script::has_desiredspeed() const {
  return action_case() == kDesiredSpeed;
}
inline void Script::set_has_desiredspeed() {
  _oneof_case_[1] = kDesiredSpeed;
}
inline void Script::clear_desiredspeed() {
  if (has_desiredspeed()) {
    action_.desiredspeed_ = 0;
    clear_has_action();
  }
}
inline float Script::desiredspeed() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Script.desiredSpeed)
  if (has_desiredspeed()) {
    return action_.desiredspeed_;
  }
  return 0;
}
inline void Script::set_desiredspeed(float value) {
  if (!has_desiredspeed()) {
    clear_action();
    set_has_desiredspeed();
  }
  action_.desiredspeed_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.Script.desiredSpeed)
}

// .Cognata.SDK.SDKVector2 position = 102;
inline bool Script::has_position() const {
  return action_case() == kPosition;
}
inline void Script::set_has_position() {
  _oneof_case_[1] = kPosition;
}
inline ::Cognata::SDK::SDKVector2* Script::release_position() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Script.position)
  if (has_position()) {
    clear_has_action();
      ::Cognata::SDK::SDKVector2* temp = action_.position_;
    action_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SDKVector2& Script::position() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Script.position)
  return has_position()
      ? *action_.position_
      : *reinterpret_cast< ::Cognata::SDK::SDKVector2*>(&::Cognata::SDK::_SDKVector2_default_instance_);
}
inline ::Cognata::SDK::SDKVector2* Script::mutable_position() {
  if (!has_position()) {
    clear_action();
    set_has_position();
    action_.position_ = CreateMaybeMessage< ::Cognata::SDK::SDKVector2 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Script.position)
  return action_.position_;
}

inline bool Script::has_trigger() const {
  return trigger_case() != TRIGGER_NOT_SET;
}
inline void Script::clear_has_trigger() {
  _oneof_case_[0] = TRIGGER_NOT_SET;
}
inline bool Script::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void Script::clear_has_action() {
  _oneof_case_[1] = ACTION_NOT_SET;
}
inline Script::TriggerCase Script::trigger_case() const {
  return Script::TriggerCase(_oneof_case_[0]);
}
inline Script::ActionCase Script::action_case() const {
  return Script::ActionCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SimulationTimeTrigger

// float simulationTime = 1;
inline void SimulationTimeTrigger::clear_simulationtime() {
  simulationtime_ = 0;
}
inline float SimulationTimeTrigger::simulationtime() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SimulationTimeTrigger.simulationTime)
  return simulationtime_;
}
inline void SimulationTimeTrigger::set_simulationtime(float value) {
  
  simulationtime_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SimulationTimeTrigger.simulationTime)
}

// -------------------------------------------------------------------

// DespawnObjects

// string clientName = 1;
inline void DespawnObjects::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DespawnObjects::clientname() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DespawnObjects.clientName)
  return clientname_.GetNoArena();
}
inline void DespawnObjects::set_clientname(const std::string& value) {
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.DespawnObjects.clientName)
}
inline void DespawnObjects::set_clientname(std::string&& value) {
  
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.DespawnObjects.clientName)
}
inline void DespawnObjects::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.DespawnObjects.clientName)
}
inline void DespawnObjects::set_clientname(const char* value, size_t size) {
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.DespawnObjects.clientName)
}
inline std::string* DespawnObjects::mutable_clientname() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DespawnObjects.clientName)
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DespawnObjects::release_clientname() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.DespawnObjects.clientName)
  
  return clientname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DespawnObjects::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    
  } else {
    
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.DespawnObjects.clientName)
}

// repeated .Cognata.SDK.DespawnObject despawnObjects = 2;
inline int DespawnObjects::despawnobjects_size() const {
  return despawnobjects_.size();
}
inline void DespawnObjects::clear_despawnobjects() {
  despawnobjects_.Clear();
}
inline ::Cognata::SDK::DespawnObject* DespawnObjects::mutable_despawnobjects(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DespawnObjects.despawnObjects)
  return despawnobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::DespawnObject >*
DespawnObjects::mutable_despawnobjects() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.DespawnObjects.despawnObjects)
  return &despawnobjects_;
}
inline const ::Cognata::SDK::DespawnObject& DespawnObjects::despawnobjects(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DespawnObjects.despawnObjects)
  return despawnobjects_.Get(index);
}
inline ::Cognata::SDK::DespawnObject* DespawnObjects::add_despawnobjects() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.DespawnObjects.despawnObjects)
  return despawnobjects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::DespawnObject >&
DespawnObjects::despawnobjects() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.DespawnObjects.despawnObjects)
  return despawnobjects_;
}

// -------------------------------------------------------------------

// DespawnObject

// uint32 id = 2;
inline void DespawnObject::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DespawnObject::id() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DespawnObject.id)
  return id_;
}
inline void DespawnObject::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.DespawnObject.id)
}

// -------------------------------------------------------------------

// PidControlConfig

// float kp = 1;
inline void PidControlConfig::clear_kp() {
  kp_ = 0;
}
inline float PidControlConfig::kp() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.PidControlConfig.kp)
  return kp_;
}
inline void PidControlConfig::set_kp(float value) {
  
  kp_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.PidControlConfig.kp)
}

// float ki = 2;
inline void PidControlConfig::clear_ki() {
  ki_ = 0;
}
inline float PidControlConfig::ki() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.PidControlConfig.ki)
  return ki_;
}
inline void PidControlConfig::set_ki(float value) {
  
  ki_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.PidControlConfig.ki)
}

// float kd = 3;
inline void PidControlConfig::clear_kd() {
  kd_ = 0;
}
inline float PidControlConfig::kd() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.PidControlConfig.kd)
  return kd_;
}
inline void PidControlConfig::set_kd(float value) {
  
  kd_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.PidControlConfig.kd)
}

// -------------------------------------------------------------------

// SensorCommand

// uint32 carId = 1;
inline void SensorCommand::clear_carid() {
  carid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorCommand::carid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorCommand.carId)
  return carid_;
}
inline void SensorCommand::set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  carid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorCommand.carId)
}

// uint32 SensorId = 2;
inline void SensorCommand::clear_sensorid() {
  sensorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorCommand::sensorid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorCommand.SensorId)
  return sensorid_;
}
inline void SensorCommand::set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorCommand.SensorId)
}

// .Cognata.SDK.RegisterSensor registerSensor = 10;
inline bool SensorCommand::has_registersensor() const {
  return commandType_case() == kRegisterSensor;
}
inline void SensorCommand::set_has_registersensor() {
  _oneof_case_[0] = kRegisterSensor;
}
inline void SensorCommand::clear_registersensor() {
  if (has_registersensor()) {
    delete commandType_.registersensor_;
    clear_has_commandType();
  }
}
inline ::Cognata::SDK::RegisterSensor* SensorCommand::release_registersensor() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorCommand.registerSensor)
  if (has_registersensor()) {
    clear_has_commandType();
      ::Cognata::SDK::RegisterSensor* temp = commandType_.registersensor_;
    commandType_.registersensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RegisterSensor& SensorCommand::registersensor() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorCommand.registerSensor)
  return has_registersensor()
      ? *commandType_.registersensor_
      : *reinterpret_cast< ::Cognata::SDK::RegisterSensor*>(&::Cognata::SDK::_RegisterSensor_default_instance_);
}
inline ::Cognata::SDK::RegisterSensor* SensorCommand::mutable_registersensor() {
  if (!has_registersensor()) {
    clear_commandType();
    set_has_registersensor();
    commandType_.registersensor_ = CreateMaybeMessage< ::Cognata::SDK::RegisterSensor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorCommand.registerSensor)
  return commandType_.registersensor_;
}

// .Cognata.SDK.ModifySensor modifySensor = 11;
inline bool SensorCommand::has_modifysensor() const {
  return commandType_case() == kModifySensor;
}
inline void SensorCommand::set_has_modifysensor() {
  _oneof_case_[0] = kModifySensor;
}
inline void SensorCommand::clear_modifysensor() {
  if (has_modifysensor()) {
    delete commandType_.modifysensor_;
    clear_has_commandType();
  }
}
inline ::Cognata::SDK::ModifySensor* SensorCommand::release_modifysensor() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorCommand.modifySensor)
  if (has_modifysensor()) {
    clear_has_commandType();
      ::Cognata::SDK::ModifySensor* temp = commandType_.modifysensor_;
    commandType_.modifysensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ModifySensor& SensorCommand::modifysensor() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorCommand.modifySensor)
  return has_modifysensor()
      ? *commandType_.modifysensor_
      : *reinterpret_cast< ::Cognata::SDK::ModifySensor*>(&::Cognata::SDK::_ModifySensor_default_instance_);
}
inline ::Cognata::SDK::ModifySensor* SensorCommand::mutable_modifysensor() {
  if (!has_modifysensor()) {
    clear_commandType();
    set_has_modifysensor();
    commandType_.modifysensor_ = CreateMaybeMessage< ::Cognata::SDK::ModifySensor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorCommand.modifySensor)
  return commandType_.modifysensor_;
}

inline bool SensorCommand::has_commandType() const {
  return commandType_case() != COMMANDTYPE_NOT_SET;
}
inline void SensorCommand::clear_has_commandType() {
  _oneof_case_[0] = COMMANDTYPE_NOT_SET;
}
inline SensorCommand::CommandTypeCase SensorCommand::commandType_case() const {
  return SensorCommand::CommandTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CarReportCommand

// string filterByClientName = 1;
inline void CarReportCommand::clear_filterbyclientname() {
  filterbyclientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CarReportCommand::filterbyclientname() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarReportCommand.filterByClientName)
  return filterbyclientname_.GetNoArena();
}
inline void CarReportCommand::set_filterbyclientname(const std::string& value) {
  
  filterbyclientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarReportCommand.filterByClientName)
}
inline void CarReportCommand::set_filterbyclientname(std::string&& value) {
  
  filterbyclientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.CarReportCommand.filterByClientName)
}
inline void CarReportCommand::set_filterbyclientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filterbyclientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.CarReportCommand.filterByClientName)
}
inline void CarReportCommand::set_filterbyclientname(const char* value, size_t size) {
  
  filterbyclientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.CarReportCommand.filterByClientName)
}
inline std::string* CarReportCommand::mutable_filterbyclientname() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarReportCommand.filterByClientName)
  return filterbyclientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CarReportCommand::release_filterbyclientname() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarReportCommand.filterByClientName)
  
  return filterbyclientname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CarReportCommand::set_allocated_filterbyclientname(std::string* filterbyclientname) {
  if (filterbyclientname != nullptr) {
    
  } else {
    
  }
  filterbyclientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filterbyclientname);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarReportCommand.filterByClientName)
}

// -------------------------------------------------------------------

// GlobalSensorCommand

// uint32 SensorId = 1;
inline void GlobalSensorCommand::clear_sensorid() {
  sensorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalSensorCommand::sensorid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GlobalSensorCommand.SensorId)
  return sensorid_;
}
inline void GlobalSensorCommand::set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GlobalSensorCommand.SensorId)
}

// .Cognata.SDK.RegisterSensor registerSensor = 10;
inline bool GlobalSensorCommand::has_registersensor() const {
  return commandType_case() == kRegisterSensor;
}
inline void GlobalSensorCommand::set_has_registersensor() {
  _oneof_case_[0] = kRegisterSensor;
}
inline void GlobalSensorCommand::clear_registersensor() {
  if (has_registersensor()) {
    delete commandType_.registersensor_;
    clear_has_commandType();
  }
}
inline ::Cognata::SDK::RegisterSensor* GlobalSensorCommand::release_registersensor() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GlobalSensorCommand.registerSensor)
  if (has_registersensor()) {
    clear_has_commandType();
      ::Cognata::SDK::RegisterSensor* temp = commandType_.registersensor_;
    commandType_.registersensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RegisterSensor& GlobalSensorCommand::registersensor() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GlobalSensorCommand.registerSensor)
  return has_registersensor()
      ? *commandType_.registersensor_
      : *reinterpret_cast< ::Cognata::SDK::RegisterSensor*>(&::Cognata::SDK::_RegisterSensor_default_instance_);
}
inline ::Cognata::SDK::RegisterSensor* GlobalSensorCommand::mutable_registersensor() {
  if (!has_registersensor()) {
    clear_commandType();
    set_has_registersensor();
    commandType_.registersensor_ = CreateMaybeMessage< ::Cognata::SDK::RegisterSensor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GlobalSensorCommand.registerSensor)
  return commandType_.registersensor_;
}

// .Cognata.SDK.ModifySensor modifySensor = 11;
inline bool GlobalSensorCommand::has_modifysensor() const {
  return commandType_case() == kModifySensor;
}
inline void GlobalSensorCommand::set_has_modifysensor() {
  _oneof_case_[0] = kModifySensor;
}
inline void GlobalSensorCommand::clear_modifysensor() {
  if (has_modifysensor()) {
    delete commandType_.modifysensor_;
    clear_has_commandType();
  }
}
inline ::Cognata::SDK::ModifySensor* GlobalSensorCommand::release_modifysensor() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GlobalSensorCommand.modifySensor)
  if (has_modifysensor()) {
    clear_has_commandType();
      ::Cognata::SDK::ModifySensor* temp = commandType_.modifysensor_;
    commandType_.modifysensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ModifySensor& GlobalSensorCommand::modifysensor() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GlobalSensorCommand.modifySensor)
  return has_modifysensor()
      ? *commandType_.modifysensor_
      : *reinterpret_cast< ::Cognata::SDK::ModifySensor*>(&::Cognata::SDK::_ModifySensor_default_instance_);
}
inline ::Cognata::SDK::ModifySensor* GlobalSensorCommand::mutable_modifysensor() {
  if (!has_modifysensor()) {
    clear_commandType();
    set_has_modifysensor();
    commandType_.modifysensor_ = CreateMaybeMessage< ::Cognata::SDK::ModifySensor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GlobalSensorCommand.modifySensor)
  return commandType_.modifysensor_;
}

inline bool GlobalSensorCommand::has_commandType() const {
  return commandType_case() != COMMANDTYPE_NOT_SET;
}
inline void GlobalSensorCommand::clear_has_commandType() {
  _oneof_case_[0] = COMMANDTYPE_NOT_SET;
}
inline GlobalSensorCommand::CommandTypeCase GlobalSensorCommand::commandType_case() const {
  return GlobalSensorCommand::CommandTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SimulationCommand

// .Cognata.SDK.StartSimulation startSimulation = 10;
inline bool SimulationCommand::has_startsimulation() const {
  return CommandType_case() == kStartSimulation;
}
inline void SimulationCommand::set_has_startsimulation() {
  _oneof_case_[0] = kStartSimulation;
}
inline void SimulationCommand::clear_startsimulation() {
  if (has_startsimulation()) {
    delete CommandType_.startsimulation_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::StartSimulation* SimulationCommand::release_startsimulation() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SimulationCommand.startSimulation)
  if (has_startsimulation()) {
    clear_has_CommandType();
      ::Cognata::SDK::StartSimulation* temp = CommandType_.startsimulation_;
    CommandType_.startsimulation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::StartSimulation& SimulationCommand::startsimulation() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SimulationCommand.startSimulation)
  return has_startsimulation()
      ? *CommandType_.startsimulation_
      : *reinterpret_cast< ::Cognata::SDK::StartSimulation*>(&::Cognata::SDK::_StartSimulation_default_instance_);
}
inline ::Cognata::SDK::StartSimulation* SimulationCommand::mutable_startsimulation() {
  if (!has_startsimulation()) {
    clear_CommandType();
    set_has_startsimulation();
    CommandType_.startsimulation_ = CreateMaybeMessage< ::Cognata::SDK::StartSimulation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SimulationCommand.startSimulation)
  return CommandType_.startsimulation_;
}

// .Cognata.SDK.StopSimulation stopSimulation = 11;
inline bool SimulationCommand::has_stopsimulation() const {
  return CommandType_case() == kStopSimulation;
}
inline void SimulationCommand::set_has_stopsimulation() {
  _oneof_case_[0] = kStopSimulation;
}
inline void SimulationCommand::clear_stopsimulation() {
  if (has_stopsimulation()) {
    delete CommandType_.stopsimulation_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::StopSimulation* SimulationCommand::release_stopsimulation() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SimulationCommand.stopSimulation)
  if (has_stopsimulation()) {
    clear_has_CommandType();
      ::Cognata::SDK::StopSimulation* temp = CommandType_.stopsimulation_;
    CommandType_.stopsimulation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::StopSimulation& SimulationCommand::stopsimulation() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SimulationCommand.stopSimulation)
  return has_stopsimulation()
      ? *CommandType_.stopsimulation_
      : *reinterpret_cast< ::Cognata::SDK::StopSimulation*>(&::Cognata::SDK::_StopSimulation_default_instance_);
}
inline ::Cognata::SDK::StopSimulation* SimulationCommand::mutable_stopsimulation() {
  if (!has_stopsimulation()) {
    clear_CommandType();
    set_has_stopsimulation();
    CommandType_.stopsimulation_ = CreateMaybeMessage< ::Cognata::SDK::StopSimulation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SimulationCommand.stopSimulation)
  return CommandType_.stopsimulation_;
}

// .Cognata.SDK.NextFrame nextFrame = 12;
inline bool SimulationCommand::has_nextframe() const {
  return CommandType_case() == kNextFrame;
}
inline void SimulationCommand::set_has_nextframe() {
  _oneof_case_[0] = kNextFrame;
}
inline void SimulationCommand::clear_nextframe() {
  if (has_nextframe()) {
    delete CommandType_.nextframe_;
    clear_has_CommandType();
  }
}
inline ::Cognata::SDK::NextFrame* SimulationCommand::release_nextframe() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SimulationCommand.nextFrame)
  if (has_nextframe()) {
    clear_has_CommandType();
      ::Cognata::SDK::NextFrame* temp = CommandType_.nextframe_;
    CommandType_.nextframe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::NextFrame& SimulationCommand::nextframe() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SimulationCommand.nextFrame)
  return has_nextframe()
      ? *CommandType_.nextframe_
      : *reinterpret_cast< ::Cognata::SDK::NextFrame*>(&::Cognata::SDK::_NextFrame_default_instance_);
}
inline ::Cognata::SDK::NextFrame* SimulationCommand::mutable_nextframe() {
  if (!has_nextframe()) {
    clear_CommandType();
    set_has_nextframe();
    CommandType_.nextframe_ = CreateMaybeMessage< ::Cognata::SDK::NextFrame >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SimulationCommand.nextFrame)
  return CommandType_.nextframe_;
}

inline bool SimulationCommand::has_CommandType() const {
  return CommandType_case() != COMMANDTYPE_NOT_SET;
}
inline void SimulationCommand::clear_has_CommandType() {
  _oneof_case_[0] = COMMANDTYPE_NOT_SET;
}
inline SimulationCommand::CommandTypeCase SimulationCommand::CommandType_case() const {
  return SimulationCommand::CommandTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StartSimulation

// bool isBlocking = 1;
inline void StartSimulation::clear_isblocking() {
  isblocking_ = false;
}
inline bool StartSimulation::isblocking() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.StartSimulation.isBlocking)
  return isblocking_;
}
inline void StartSimulation::set_isblocking(bool value) {
  
  isblocking_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.StartSimulation.isBlocking)
}

// -------------------------------------------------------------------

// StopSimulation

// uint32 reasonID = 1;
inline void StopSimulation::clear_reasonid() {
  reasonid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopSimulation::reasonid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.StopSimulation.reasonID)
  return reasonid_;
}
inline void StopSimulation::set_reasonid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reasonid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.StopSimulation.reasonID)
}

// string reasonText = 2;
inline void StopSimulation::clear_reasontext() {
  reasontext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StopSimulation::reasontext() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.StopSimulation.reasonText)
  return reasontext_.GetNoArena();
}
inline void StopSimulation::set_reasontext(const std::string& value) {
  
  reasontext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.StopSimulation.reasonText)
}
inline void StopSimulation::set_reasontext(std::string&& value) {
  
  reasontext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.StopSimulation.reasonText)
}
inline void StopSimulation::set_reasontext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reasontext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.StopSimulation.reasonText)
}
inline void StopSimulation::set_reasontext(const char* value, size_t size) {
  
  reasontext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.StopSimulation.reasonText)
}
inline std::string* StopSimulation::mutable_reasontext() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.StopSimulation.reasonText)
  return reasontext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StopSimulation::release_reasontext() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.StopSimulation.reasonText)
  
  return reasontext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StopSimulation::set_allocated_reasontext(std::string* reasontext) {
  if (reasontext != nullptr) {
    
  } else {
    
  }
  reasontext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reasontext);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.StopSimulation.reasonText)
}

// -------------------------------------------------------------------

// NextFrame

// -------------------------------------------------------------------

// RegisterSensor

// -------------------------------------------------------------------

// ModifySensor

// .Cognata.SDK.RGBCameraModifiable rgbCameraModifiable = 10;
inline bool ModifySensor::has_rgbcameramodifiable() const {
  return SensorType_case() == kRgbCameraModifiable;
}
inline void ModifySensor::set_has_rgbcameramodifiable() {
  _oneof_case_[0] = kRgbCameraModifiable;
}
inline void ModifySensor::clear_rgbcameramodifiable() {
  if (has_rgbcameramodifiable()) {
    delete SensorType_.rgbcameramodifiable_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::RGBCameraModifiable* ModifySensor::release_rgbcameramodifiable() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ModifySensor.rgbCameraModifiable)
  if (has_rgbcameramodifiable()) {
    clear_has_SensorType();
      ::Cognata::SDK::RGBCameraModifiable* temp = SensorType_.rgbcameramodifiable_;
    SensorType_.rgbcameramodifiable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RGBCameraModifiable& ModifySensor::rgbcameramodifiable() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ModifySensor.rgbCameraModifiable)
  return has_rgbcameramodifiable()
      ? *SensorType_.rgbcameramodifiable_
      : *reinterpret_cast< ::Cognata::SDK::RGBCameraModifiable*>(&::Cognata::SDK::_RGBCameraModifiable_default_instance_);
}
inline ::Cognata::SDK::RGBCameraModifiable* ModifySensor::mutable_rgbcameramodifiable() {
  if (!has_rgbcameramodifiable()) {
    clear_SensorType();
    set_has_rgbcameramodifiable();
    SensorType_.rgbcameramodifiable_ = CreateMaybeMessage< ::Cognata::SDK::RGBCameraModifiable >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ModifySensor.rgbCameraModifiable)
  return SensorType_.rgbcameramodifiable_;
}

// .Cognata.SDK.LidarModifiable lidarModifiable = 11;
inline bool ModifySensor::has_lidarmodifiable() const {
  return SensorType_case() == kLidarModifiable;
}
inline void ModifySensor::set_has_lidarmodifiable() {
  _oneof_case_[0] = kLidarModifiable;
}
inline void ModifySensor::clear_lidarmodifiable() {
  if (has_lidarmodifiable()) {
    delete SensorType_.lidarmodifiable_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::LidarModifiable* ModifySensor::release_lidarmodifiable() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ModifySensor.lidarModifiable)
  if (has_lidarmodifiable()) {
    clear_has_SensorType();
      ::Cognata::SDK::LidarModifiable* temp = SensorType_.lidarmodifiable_;
    SensorType_.lidarmodifiable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::LidarModifiable& ModifySensor::lidarmodifiable() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ModifySensor.lidarModifiable)
  return has_lidarmodifiable()
      ? *SensorType_.lidarmodifiable_
      : *reinterpret_cast< ::Cognata::SDK::LidarModifiable*>(&::Cognata::SDK::_LidarModifiable_default_instance_);
}
inline ::Cognata::SDK::LidarModifiable* ModifySensor::mutable_lidarmodifiable() {
  if (!has_lidarmodifiable()) {
    clear_SensorType();
    set_has_lidarmodifiable();
    SensorType_.lidarmodifiable_ = CreateMaybeMessage< ::Cognata::SDK::LidarModifiable >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ModifySensor.lidarModifiable)
  return SensorType_.lidarmodifiable_;
}

// .Cognata.SDK.DOGTModifiable DOGTModifiable = 40;
inline bool ModifySensor::has_dogtmodifiable() const {
  return SensorType_case() == kDOGTModifiable;
}
inline void ModifySensor::set_has_dogtmodifiable() {
  _oneof_case_[0] = kDOGTModifiable;
}
inline void ModifySensor::clear_dogtmodifiable() {
  if (has_dogtmodifiable()) {
    delete SensorType_.dogtmodifiable_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::DOGTModifiable* ModifySensor::release_dogtmodifiable() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ModifySensor.DOGTModifiable)
  if (has_dogtmodifiable()) {
    clear_has_SensorType();
      ::Cognata::SDK::DOGTModifiable* temp = SensorType_.dogtmodifiable_;
    SensorType_.dogtmodifiable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::DOGTModifiable& ModifySensor::dogtmodifiable() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ModifySensor.DOGTModifiable)
  return has_dogtmodifiable()
      ? *SensorType_.dogtmodifiable_
      : *reinterpret_cast< ::Cognata::SDK::DOGTModifiable*>(&::Cognata::SDK::_DOGTModifiable_default_instance_);
}
inline ::Cognata::SDK::DOGTModifiable* ModifySensor::mutable_dogtmodifiable() {
  if (!has_dogtmodifiable()) {
    clear_SensorType();
    set_has_dogtmodifiable();
    SensorType_.dogtmodifiable_ = CreateMaybeMessage< ::Cognata::SDK::DOGTModifiable >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ModifySensor.DOGTModifiable)
  return SensorType_.dogtmodifiable_;
}

inline bool ModifySensor::has_SensorType() const {
  return SensorType_case() != SENSORTYPE_NOT_SET;
}
inline void ModifySensor::clear_has_SensorType() {
  _oneof_case_[0] = SENSORTYPE_NOT_SET;
}
inline ModifySensor::SensorTypeCase ModifySensor::SensorType_case() const {
  return ModifySensor::SensorTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RGBCameraModifiable

// bool record = 1;
inline void RGBCameraModifiable::clear_record() {
  record_ = false;
}
inline bool RGBCameraModifiable::record() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RGBCameraModifiable.record)
  return record_;
}
inline void RGBCameraModifiable::set_record(bool value) {
  
  record_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RGBCameraModifiable.record)
}

// uint32 fps = 2;
inline void RGBCameraModifiable::clear_fps() {
  fps_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGBCameraModifiable::fps() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RGBCameraModifiable.fps)
  return fps_;
}
inline void RGBCameraModifiable::set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RGBCameraModifiable.fps)
}

// .Cognata.SDK.RGBCameraModifiable.FrameGrabbingMode frameGrabbingMode = 3;
inline void RGBCameraModifiable::clear_framegrabbingmode() {
  framegrabbingmode_ = 0;
}
inline ::Cognata::SDK::RGBCameraModifiable_FrameGrabbingMode RGBCameraModifiable::framegrabbingmode() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RGBCameraModifiable.frameGrabbingMode)
  return static_cast< ::Cognata::SDK::RGBCameraModifiable_FrameGrabbingMode >(framegrabbingmode_);
}
inline void RGBCameraModifiable::set_framegrabbingmode(::Cognata::SDK::RGBCameraModifiable_FrameGrabbingMode value) {
  
  framegrabbingmode_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RGBCameraModifiable.frameGrabbingMode)
}

// -------------------------------------------------------------------

// LidarModifiable

// bool record = 1;
inline void LidarModifiable::clear_record() {
  record_ = false;
}
inline bool LidarModifiable::record() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarModifiable.record)
  return record_;
}
inline void LidarModifiable::set_record(bool value) {
  
  record_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarModifiable.record)
}

// uint32 fps = 2;
inline void LidarModifiable::clear_fps() {
  fps_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LidarModifiable::fps() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarModifiable.fps)
  return fps_;
}
inline void LidarModifiable::set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarModifiable.fps)
}

// -------------------------------------------------------------------

// DOGTModifiable

// bool record = 1;
inline void DOGTModifiable::clear_record() {
  record_ = false;
}
inline bool DOGTModifiable::record() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DOGTModifiable.record)
  return record_;
}
inline void DOGTModifiable::set_record(bool value) {
  
  record_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.DOGTModifiable.record)
}

// uint32 fps = 2;
inline void DOGTModifiable::clear_fps() {
  fps_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DOGTModifiable::fps() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DOGTModifiable.fps)
  return fps_;
}
inline void DOGTModifiable::set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.DOGTModifiable.fps)
}

// -------------------------------------------------------------------

// LogCommand

// uint32 level = 1;
inline void LogCommand::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCommand::level() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LogCommand.level)
  return level_;
}
inline void LogCommand::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LogCommand.level)
}

// string msg = 2;
inline void LogCommand::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogCommand::msg() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LogCommand.msg)
  return msg_.GetNoArena();
}
inline void LogCommand::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.LogCommand.msg)
}
inline void LogCommand::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.LogCommand.msg)
}
inline void LogCommand::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.LogCommand.msg)
}
inline void LogCommand::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.LogCommand.msg)
}
inline std::string* LogCommand::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.LogCommand.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogCommand::release_msg() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.LogCommand.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogCommand::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.LogCommand.msg)
}

// -------------------------------------------------------------------

// ConfigurationCommand

// .Cognata.SDK.TimeStepConfig timeStepConfig = 1;
inline bool ConfigurationCommand::has_timestepconfig() const {
  return this != internal_default_instance() && timestepconfig_ != nullptr;
}
inline void ConfigurationCommand::clear_timestepconfig() {
  if (GetArenaNoVirtual() == nullptr && timestepconfig_ != nullptr) {
    delete timestepconfig_;
  }
  timestepconfig_ = nullptr;
}
inline const ::Cognata::SDK::TimeStepConfig& ConfigurationCommand::timestepconfig() const {
  const ::Cognata::SDK::TimeStepConfig* p = timestepconfig_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.ConfigurationCommand.timeStepConfig)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::TimeStepConfig*>(
      &::Cognata::SDK::_TimeStepConfig_default_instance_);
}
inline ::Cognata::SDK::TimeStepConfig* ConfigurationCommand::release_timestepconfig() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ConfigurationCommand.timeStepConfig)
  
  ::Cognata::SDK::TimeStepConfig* temp = timestepconfig_;
  timestepconfig_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::TimeStepConfig* ConfigurationCommand::mutable_timestepconfig() {
  
  if (timestepconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::TimeStepConfig>(GetArenaNoVirtual());
    timestepconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ConfigurationCommand.timeStepConfig)
  return timestepconfig_;
}
inline void ConfigurationCommand::set_allocated_timestepconfig(::Cognata::SDK::TimeStepConfig* timestepconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timestepconfig_;
  }
  if (timestepconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestepconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestepconfig, submessage_arena);
    }
    
  } else {
    
  }
  timestepconfig_ = timestepconfig;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ConfigurationCommand.timeStepConfig)
}

// .Cognata.SDK.TeleportConfig teleportConfig = 2;
inline bool ConfigurationCommand::has_teleportconfig() const {
  return this != internal_default_instance() && teleportconfig_ != nullptr;
}
inline void ConfigurationCommand::clear_teleportconfig() {
  if (GetArenaNoVirtual() == nullptr && teleportconfig_ != nullptr) {
    delete teleportconfig_;
  }
  teleportconfig_ = nullptr;
}
inline const ::Cognata::SDK::TeleportConfig& ConfigurationCommand::teleportconfig() const {
  const ::Cognata::SDK::TeleportConfig* p = teleportconfig_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.ConfigurationCommand.teleportConfig)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::TeleportConfig*>(
      &::Cognata::SDK::_TeleportConfig_default_instance_);
}
inline ::Cognata::SDK::TeleportConfig* ConfigurationCommand::release_teleportconfig() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ConfigurationCommand.teleportConfig)
  
  ::Cognata::SDK::TeleportConfig* temp = teleportconfig_;
  teleportconfig_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::TeleportConfig* ConfigurationCommand::mutable_teleportconfig() {
  
  if (teleportconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::TeleportConfig>(GetArenaNoVirtual());
    teleportconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ConfigurationCommand.teleportConfig)
  return teleportconfig_;
}
inline void ConfigurationCommand::set_allocated_teleportconfig(::Cognata::SDK::TeleportConfig* teleportconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete teleportconfig_;
  }
  if (teleportconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      teleportconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teleportconfig, submessage_arena);
    }
    
  } else {
    
  }
  teleportconfig_ = teleportconfig;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ConfigurationCommand.teleportConfig)
}

// bool optimizeRendering = 3;
inline void ConfigurationCommand::clear_optimizerendering() {
  optimizerendering_ = false;
}
inline bool ConfigurationCommand::optimizerendering() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ConfigurationCommand.optimizeRendering)
  return optimizerendering_;
}
inline void ConfigurationCommand::set_optimizerendering(bool value) {
  
  optimizerendering_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.ConfigurationCommand.optimizeRendering)
}

// -------------------------------------------------------------------

// TimeStepConfig

// float fixedDeltaTime = 1;
inline void TimeStepConfig::clear_fixeddeltatime() {
  fixeddeltatime_ = 0;
}
inline float TimeStepConfig::fixeddeltatime() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TimeStepConfig.fixedDeltaTime)
  return fixeddeltatime_;
}
inline void TimeStepConfig::set_fixeddeltatime(float value) {
  
  fixeddeltatime_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.TimeStepConfig.fixedDeltaTime)
}

// float wakeupEverySteps = 2;
inline void TimeStepConfig::clear_wakeupeverysteps() {
  wakeupeverysteps_ = 0;
}
inline float TimeStepConfig::wakeupeverysteps() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TimeStepConfig.wakeupEverySteps)
  return wakeupeverysteps_;
}
inline void TimeStepConfig::set_wakeupeverysteps(float value) {
  
  wakeupeverysteps_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.TimeStepConfig.wakeupEverySteps)
}

// uint32 fps = 3;
inline void TimeStepConfig::clear_fps() {
  fps_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeStepConfig::fps() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TimeStepConfig.fps)
  return fps_;
}
inline void TimeStepConfig::set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.TimeStepConfig.fps)
}

// -------------------------------------------------------------------

// TeleportConfig

// .Cognata.SDK.TeleportConfig.Dimensions TeleportTransformDim = 2;
inline void TeleportConfig::clear_teleporttransformdim() {
  teleporttransformdim_ = 0;
}
inline ::Cognata::SDK::TeleportConfig_Dimensions TeleportConfig::teleporttransformdim() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TeleportConfig.TeleportTransformDim)
  return static_cast< ::Cognata::SDK::TeleportConfig_Dimensions >(teleporttransformdim_);
}
inline void TeleportConfig::set_teleporttransformdim(::Cognata::SDK::TeleportConfig_Dimensions value) {
  
  teleporttransformdim_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.TeleportConfig.TeleportTransformDim)
}

// -------------------------------------------------------------------

// VersionCommand

// string sdkVersion = 1;
inline void VersionCommand::clear_sdkversion() {
  sdkversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionCommand::sdkversion() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.VersionCommand.sdkVersion)
  return sdkversion_.GetNoArena();
}
inline void VersionCommand::set_sdkversion(const std::string& value) {
  
  sdkversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.VersionCommand.sdkVersion)
}
inline void VersionCommand::set_sdkversion(std::string&& value) {
  
  sdkversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.VersionCommand.sdkVersion)
}
inline void VersionCommand::set_sdkversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sdkversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.VersionCommand.sdkVersion)
}
inline void VersionCommand::set_sdkversion(const char* value, size_t size) {
  
  sdkversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.VersionCommand.sdkVersion)
}
inline std::string* VersionCommand::mutable_sdkversion() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.VersionCommand.sdkVersion)
  return sdkversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionCommand::release_sdkversion() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.VersionCommand.sdkVersion)
  
  return sdkversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionCommand::set_allocated_sdkversion(std::string* sdkversion) {
  if (sdkversion != nullptr) {
    
  } else {
    
  }
  sdkversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdkversion);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.VersionCommand.sdkVersion)
}

// string oemVersion = 2;
inline void VersionCommand::clear_oemversion() {
  oemversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionCommand::oemversion() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.VersionCommand.oemVersion)
  return oemversion_.GetNoArena();
}
inline void VersionCommand::set_oemversion(const std::string& value) {
  
  oemversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.VersionCommand.oemVersion)
}
inline void VersionCommand::set_oemversion(std::string&& value) {
  
  oemversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.VersionCommand.oemVersion)
}
inline void VersionCommand::set_oemversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oemversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.VersionCommand.oemVersion)
}
inline void VersionCommand::set_oemversion(const char* value, size_t size) {
  
  oemversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.VersionCommand.oemVersion)
}
inline std::string* VersionCommand::mutable_oemversion() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.VersionCommand.oemVersion)
  return oemversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionCommand::release_oemversion() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.VersionCommand.oemVersion)
  
  return oemversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionCommand::set_allocated_oemversion(std::string* oemversion) {
  if (oemversion != nullptr) {
    
  } else {
    
  }
  oemversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oemversion);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.VersionCommand.oemVersion)
}

// -------------------------------------------------------------------

// ControlTrafficLightsCommand

// bool controlTrafficLights = 1;
inline void ControlTrafficLightsCommand::clear_controltrafficlights() {
  controltrafficlights_ = false;
}
inline bool ControlTrafficLightsCommand::controltrafficlights() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ControlTrafficLightsCommand.controlTrafficLights)
  return controltrafficlights_;
}
inline void ControlTrafficLightsCommand::set_controltrafficlights(bool value) {
  
  controltrafficlights_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.ControlTrafficLightsCommand.controlTrafficLights)
}

// -------------------------------------------------------------------

// TrafficLightJunction

// uint32 junctionId = 1;
inline void TrafficLightJunction::clear_junctionid() {
  junctionid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficLightJunction::junctionid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLightJunction.junctionId)
  return junctionid_;
}
inline void TrafficLightJunction::set_junctionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  junctionid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.TrafficLightJunction.junctionId)
}

// repeated .Cognata.SDK.TrafficLightState trafficLights = 2;
inline int TrafficLightJunction::trafficlights_size() const {
  return trafficlights_.size();
}
inline void TrafficLightJunction::clear_trafficlights() {
  trafficlights_.Clear();
}
inline ::Cognata::SDK::TrafficLightState* TrafficLightJunction::mutable_trafficlights(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.TrafficLightJunction.trafficLights)
  return trafficlights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::TrafficLightState >*
TrafficLightJunction::mutable_trafficlights() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.TrafficLightJunction.trafficLights)
  return &trafficlights_;
}
inline const ::Cognata::SDK::TrafficLightState& TrafficLightJunction::trafficlights(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLightJunction.trafficLights)
  return trafficlights_.Get(index);
}
inline ::Cognata::SDK::TrafficLightState* TrafficLightJunction::add_trafficlights() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.TrafficLightJunction.trafficLights)
  return trafficlights_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::TrafficLightState >&
TrafficLightJunction::trafficlights() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.TrafficLightJunction.trafficLights)
  return trafficlights_;
}

// -------------------------------------------------------------------

// TrafficLightState

// uint32 trafficLightId = 1;
inline void TrafficLightState::clear_trafficlightid() {
  trafficlightid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficLightState::trafficlightid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLightState.trafficLightId)
  return trafficlightid_;
}
inline void TrafficLightState::set_trafficlightid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  trafficlightid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.TrafficLightState.trafficLightId)
}

// .Cognata.SDK.TrafficLightState.State state = 2;
inline void TrafficLightState::clear_state() {
  state_ = 0;
}
inline ::Cognata::SDK::TrafficLightState_State TrafficLightState::state() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLightState.state)
  return static_cast< ::Cognata::SDK::TrafficLightState_State >(state_);
}
inline void TrafficLightState::set_state(::Cognata::SDK::TrafficLightState_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.TrafficLightState.state)
}

// -------------------------------------------------------------------

// TrafficLightsCommand

// repeated .Cognata.SDK.TrafficLightJunction trafficLightJunctions = 1;
inline int TrafficLightsCommand::trafficlightjunctions_size() const {
  return trafficlightjunctions_.size();
}
inline void TrafficLightsCommand::clear_trafficlightjunctions() {
  trafficlightjunctions_.Clear();
}
inline ::Cognata::SDK::TrafficLightJunction* TrafficLightsCommand::mutable_trafficlightjunctions(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.TrafficLightsCommand.trafficLightJunctions)
  return trafficlightjunctions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::TrafficLightJunction >*
TrafficLightsCommand::mutable_trafficlightjunctions() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.TrafficLightsCommand.trafficLightJunctions)
  return &trafficlightjunctions_;
}
inline const ::Cognata::SDK::TrafficLightJunction& TrafficLightsCommand::trafficlightjunctions(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLightsCommand.trafficLightJunctions)
  return trafficlightjunctions_.Get(index);
}
inline ::Cognata::SDK::TrafficLightJunction* TrafficLightsCommand::add_trafficlightjunctions() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.TrafficLightsCommand.trafficLightJunctions)
  return trafficlightjunctions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::TrafficLightJunction >&
TrafficLightsCommand::trafficlightjunctions() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.TrafficLightsCommand.trafficLightJunctions)
  return trafficlightjunctions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SDK
}  // namespace Cognata

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Cognata::SDK::Teleportation_NextLaneChoice> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::Teleportation_NextLaneChoice>() {
  return ::Cognata::SDK::Teleportation_NextLaneChoice_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::RGBCameraModifiable_FrameGrabbingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::RGBCameraModifiable_FrameGrabbingMode>() {
  return ::Cognata::SDK::RGBCameraModifiable_FrameGrabbingMode_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::TeleportConfig_Dimensions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::TeleportConfig_Dimensions>() {
  return ::Cognata::SDK::TeleportConfig_Dimensions_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::TrafficLightState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::TrafficLightState_State>() {
  return ::Cognata::SDK::TrafficLightState_State_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::SpawnObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::SpawnObjectType>() {
  return ::Cognata::SDK::SpawnObjectType_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::UniqueSensorID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::UniqueSensorID>() {
  return ::Cognata::SDK::UniqueSensorID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ClientToEngineMessage_2eproto
