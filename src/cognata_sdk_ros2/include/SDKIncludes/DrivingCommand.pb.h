// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DrivingCommand.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DrivingCommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DrivingCommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "CarConfiguration.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DrivingCommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DrivingCommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DrivingCommand_2eproto;
namespace Cognata {
namespace SDK {
class AccelerationCommand;
class AccelerationCommandDefaultTypeInternal;
extern AccelerationCommandDefaultTypeInternal _AccelerationCommand_default_instance_;
class BrakesCommand;
class BrakesCommandDefaultTypeInternal;
extern BrakesCommandDefaultTypeInternal _BrakesCommand_default_instance_;
class DrivingCommand;
class DrivingCommandDefaultTypeInternal;
extern DrivingCommandDefaultTypeInternal _DrivingCommand_default_instance_;
class GasCommand;
class GasCommandDefaultTypeInternal;
extern GasCommandDefaultTypeInternal _GasCommand_default_instance_;
class GasMinusBrakeCommand;
class GasMinusBrakeCommandDefaultTypeInternal;
extern GasMinusBrakeCommandDefaultTypeInternal _GasMinusBrakeCommand_default_instance_;
class GearCommand;
class GearCommandDefaultTypeInternal;
extern GearCommandDefaultTypeInternal _GearCommand_default_instance_;
class PhysicalAccelerationCommand;
class PhysicalAccelerationCommandDefaultTypeInternal;
extern PhysicalAccelerationCommandDefaultTypeInternal _PhysicalAccelerationCommand_default_instance_;
class SteeringCommand;
class SteeringCommandDefaultTypeInternal;
extern SteeringCommandDefaultTypeInternal _SteeringCommand_default_instance_;
}  // namespace SDK
}  // namespace Cognata
PROTOBUF_NAMESPACE_OPEN
template<> ::Cognata::SDK::AccelerationCommand* Arena::CreateMaybeMessage<::Cognata::SDK::AccelerationCommand>(Arena*);
template<> ::Cognata::SDK::BrakesCommand* Arena::CreateMaybeMessage<::Cognata::SDK::BrakesCommand>(Arena*);
template<> ::Cognata::SDK::DrivingCommand* Arena::CreateMaybeMessage<::Cognata::SDK::DrivingCommand>(Arena*);
template<> ::Cognata::SDK::GasCommand* Arena::CreateMaybeMessage<::Cognata::SDK::GasCommand>(Arena*);
template<> ::Cognata::SDK::GasMinusBrakeCommand* Arena::CreateMaybeMessage<::Cognata::SDK::GasMinusBrakeCommand>(Arena*);
template<> ::Cognata::SDK::GearCommand* Arena::CreateMaybeMessage<::Cognata::SDK::GearCommand>(Arena*);
template<> ::Cognata::SDK::PhysicalAccelerationCommand* Arena::CreateMaybeMessage<::Cognata::SDK::PhysicalAccelerationCommand>(Arena*);
template<> ::Cognata::SDK::SteeringCommand* Arena::CreateMaybeMessage<::Cognata::SDK::SteeringCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Cognata {
namespace SDK {

// ===================================================================

class DrivingCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.DrivingCommand) */ {
 public:
  DrivingCommand();
  virtual ~DrivingCommand();

  DrivingCommand(const DrivingCommand& from);
  DrivingCommand(DrivingCommand&& from) noexcept
    : DrivingCommand() {
    *this = ::std::move(from);
  }

  inline DrivingCommand& operator=(const DrivingCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrivingCommand& operator=(DrivingCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrivingCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrivingCommand* internal_default_instance() {
    return reinterpret_cast<const DrivingCommand*>(
               &_DrivingCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DrivingCommand* other);
  friend void swap(DrivingCommand& a, DrivingCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrivingCommand* New() const final {
    return CreateMaybeMessage<DrivingCommand>(nullptr);
  }

  DrivingCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrivingCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrivingCommand& from);
  void MergeFrom(const DrivingCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrivingCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.DrivingCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrivingCommand_2eproto);
    return ::descriptor_table_DrivingCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.GasCommand gasCommand = 1;
  bool has_gascommand() const;
  void clear_gascommand();
  static const int kGasCommandFieldNumber = 1;
  const ::Cognata::SDK::GasCommand& gascommand() const;
  ::Cognata::SDK::GasCommand* release_gascommand();
  ::Cognata::SDK::GasCommand* mutable_gascommand();
  void set_allocated_gascommand(::Cognata::SDK::GasCommand* gascommand);

  // .Cognata.SDK.SteeringCommand steeringCommand = 2;
  bool has_steeringcommand() const;
  void clear_steeringcommand();
  static const int kSteeringCommandFieldNumber = 2;
  const ::Cognata::SDK::SteeringCommand& steeringcommand() const;
  ::Cognata::SDK::SteeringCommand* release_steeringcommand();
  ::Cognata::SDK::SteeringCommand* mutable_steeringcommand();
  void set_allocated_steeringcommand(::Cognata::SDK::SteeringCommand* steeringcommand);

  // .Cognata.SDK.BrakesCommand brakesCommand = 3;
  bool has_brakescommand() const;
  void clear_brakescommand();
  static const int kBrakesCommandFieldNumber = 3;
  const ::Cognata::SDK::BrakesCommand& brakescommand() const;
  ::Cognata::SDK::BrakesCommand* release_brakescommand();
  ::Cognata::SDK::BrakesCommand* mutable_brakescommand();
  void set_allocated_brakescommand(::Cognata::SDK::BrakesCommand* brakescommand);

  // .Cognata.SDK.AccelerationCommand accelerationCommand = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_accelerationcommand() const;
  PROTOBUF_DEPRECATED void clear_accelerationcommand();
  PROTOBUF_DEPRECATED static const int kAccelerationCommandFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::Cognata::SDK::AccelerationCommand& accelerationcommand() const;
  PROTOBUF_DEPRECATED ::Cognata::SDK::AccelerationCommand* release_accelerationcommand();
  PROTOBUF_DEPRECATED ::Cognata::SDK::AccelerationCommand* mutable_accelerationcommand();
  PROTOBUF_DEPRECATED void set_allocated_accelerationcommand(::Cognata::SDK::AccelerationCommand* accelerationcommand);

  // .Cognata.SDK.GasMinusBrakeCommand gasMinusBrakeCommand = 5;
  bool has_gasminusbrakecommand() const;
  void clear_gasminusbrakecommand();
  static const int kGasMinusBrakeCommandFieldNumber = 5;
  const ::Cognata::SDK::GasMinusBrakeCommand& gasminusbrakecommand() const;
  ::Cognata::SDK::GasMinusBrakeCommand* release_gasminusbrakecommand();
  ::Cognata::SDK::GasMinusBrakeCommand* mutable_gasminusbrakecommand();
  void set_allocated_gasminusbrakecommand(::Cognata::SDK::GasMinusBrakeCommand* gasminusbrakecommand);

  // .Cognata.SDK.PhysicalAccelerationCommand physicalAccelerationCommand = 6;
  bool has_physicalaccelerationcommand() const;
  void clear_physicalaccelerationcommand();
  static const int kPhysicalAccelerationCommandFieldNumber = 6;
  const ::Cognata::SDK::PhysicalAccelerationCommand& physicalaccelerationcommand() const;
  ::Cognata::SDK::PhysicalAccelerationCommand* release_physicalaccelerationcommand();
  ::Cognata::SDK::PhysicalAccelerationCommand* mutable_physicalaccelerationcommand();
  void set_allocated_physicalaccelerationcommand(::Cognata::SDK::PhysicalAccelerationCommand* physicalaccelerationcommand);

  // .Cognata.SDK.GearCommand gearCommand = 7;
  bool has_gearcommand() const;
  void clear_gearcommand();
  static const int kGearCommandFieldNumber = 7;
  const ::Cognata::SDK::GearCommand& gearcommand() const;
  ::Cognata::SDK::GearCommand* release_gearcommand();
  ::Cognata::SDK::GearCommand* mutable_gearcommand();
  void set_allocated_gearcommand(::Cognata::SDK::GearCommand* gearcommand);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.DrivingCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::GasCommand* gascommand_;
  ::Cognata::SDK::SteeringCommand* steeringcommand_;
  ::Cognata::SDK::BrakesCommand* brakescommand_;
  ::Cognata::SDK::AccelerationCommand* accelerationcommand_;
  ::Cognata::SDK::GasMinusBrakeCommand* gasminusbrakecommand_;
  ::Cognata::SDK::PhysicalAccelerationCommand* physicalaccelerationcommand_;
  ::Cognata::SDK::GearCommand* gearcommand_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DrivingCommand_2eproto;
};
// -------------------------------------------------------------------

class GasCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GasCommand) */ {
 public:
  GasCommand();
  virtual ~GasCommand();

  GasCommand(const GasCommand& from);
  GasCommand(GasCommand&& from) noexcept
    : GasCommand() {
    *this = ::std::move(from);
  }

  inline GasCommand& operator=(const GasCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GasCommand& operator=(GasCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GasCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GasCommand* internal_default_instance() {
    return reinterpret_cast<const GasCommand*>(
               &_GasCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GasCommand* other);
  friend void swap(GasCommand& a, GasCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GasCommand* New() const final {
    return CreateMaybeMessage<GasCommand>(nullptr);
  }

  GasCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GasCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GasCommand& from);
  void MergeFrom(const GasCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GasCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrivingCommand_2eproto);
    return ::descriptor_table_DrivingCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float gasValue = 1;
  void clear_gasvalue();
  static const int kGasValueFieldNumber = 1;
  float gasvalue() const;
  void set_gasvalue(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.GasCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float gasvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DrivingCommand_2eproto;
};
// -------------------------------------------------------------------

class SteeringCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SteeringCommand) */ {
 public:
  SteeringCommand();
  virtual ~SteeringCommand();

  SteeringCommand(const SteeringCommand& from);
  SteeringCommand(SteeringCommand&& from) noexcept
    : SteeringCommand() {
    *this = ::std::move(from);
  }

  inline SteeringCommand& operator=(const SteeringCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SteeringCommand& operator=(SteeringCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SteeringCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SteeringCommand* internal_default_instance() {
    return reinterpret_cast<const SteeringCommand*>(
               &_SteeringCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SteeringCommand* other);
  friend void swap(SteeringCommand& a, SteeringCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SteeringCommand* New() const final {
    return CreateMaybeMessage<SteeringCommand>(nullptr);
  }

  SteeringCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SteeringCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SteeringCommand& from);
  void MergeFrom(const SteeringCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SteeringCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SteeringCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrivingCommand_2eproto);
    return ::descriptor_table_DrivingCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float steerValue = 1;
  void clear_steervalue();
  static const int kSteerValueFieldNumber = 1;
  float steervalue() const;
  void set_steervalue(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SteeringCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float steervalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DrivingCommand_2eproto;
};
// -------------------------------------------------------------------

class BrakesCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.BrakesCommand) */ {
 public:
  BrakesCommand();
  virtual ~BrakesCommand();

  BrakesCommand(const BrakesCommand& from);
  BrakesCommand(BrakesCommand&& from) noexcept
    : BrakesCommand() {
    *this = ::std::move(from);
  }

  inline BrakesCommand& operator=(const BrakesCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrakesCommand& operator=(BrakesCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BrakesCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrakesCommand* internal_default_instance() {
    return reinterpret_cast<const BrakesCommand*>(
               &_BrakesCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BrakesCommand* other);
  friend void swap(BrakesCommand& a, BrakesCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrakesCommand* New() const final {
    return CreateMaybeMessage<BrakesCommand>(nullptr);
  }

  BrakesCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrakesCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BrakesCommand& from);
  void MergeFrom(const BrakesCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrakesCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.BrakesCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrivingCommand_2eproto);
    return ::descriptor_table_DrivingCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float brakesValue = 1;
  void clear_brakesvalue();
  static const int kBrakesValueFieldNumber = 1;
  float brakesvalue() const;
  void set_brakesvalue(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.BrakesCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float brakesvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DrivingCommand_2eproto;
};
// -------------------------------------------------------------------

class AccelerationCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.AccelerationCommand) */ {
 public:
  AccelerationCommand();
  virtual ~AccelerationCommand();

  AccelerationCommand(const AccelerationCommand& from);
  AccelerationCommand(AccelerationCommand&& from) noexcept
    : AccelerationCommand() {
    *this = ::std::move(from);
  }

  inline AccelerationCommand& operator=(const AccelerationCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccelerationCommand& operator=(AccelerationCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccelerationCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccelerationCommand* internal_default_instance() {
    return reinterpret_cast<const AccelerationCommand*>(
               &_AccelerationCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AccelerationCommand* other);
  friend void swap(AccelerationCommand& a, AccelerationCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccelerationCommand* New() const final {
    return CreateMaybeMessage<AccelerationCommand>(nullptr);
  }

  AccelerationCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccelerationCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccelerationCommand& from);
  void MergeFrom(const AccelerationCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccelerationCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.AccelerationCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrivingCommand_2eproto);
    return ::descriptor_table_DrivingCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float accelerationValue = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_accelerationvalue();
  PROTOBUF_DEPRECATED static const int kAccelerationValueFieldNumber = 1;
  PROTOBUF_DEPRECATED float accelerationvalue() const;
  PROTOBUF_DEPRECATED void set_accelerationvalue(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.AccelerationCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float accelerationvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DrivingCommand_2eproto;
};
// -------------------------------------------------------------------

class GasMinusBrakeCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GasMinusBrakeCommand) */ {
 public:
  GasMinusBrakeCommand();
  virtual ~GasMinusBrakeCommand();

  GasMinusBrakeCommand(const GasMinusBrakeCommand& from);
  GasMinusBrakeCommand(GasMinusBrakeCommand&& from) noexcept
    : GasMinusBrakeCommand() {
    *this = ::std::move(from);
  }

  inline GasMinusBrakeCommand& operator=(const GasMinusBrakeCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GasMinusBrakeCommand& operator=(GasMinusBrakeCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GasMinusBrakeCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GasMinusBrakeCommand* internal_default_instance() {
    return reinterpret_cast<const GasMinusBrakeCommand*>(
               &_GasMinusBrakeCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GasMinusBrakeCommand* other);
  friend void swap(GasMinusBrakeCommand& a, GasMinusBrakeCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GasMinusBrakeCommand* New() const final {
    return CreateMaybeMessage<GasMinusBrakeCommand>(nullptr);
  }

  GasMinusBrakeCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GasMinusBrakeCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GasMinusBrakeCommand& from);
  void MergeFrom(const GasMinusBrakeCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasMinusBrakeCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GasMinusBrakeCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrivingCommand_2eproto);
    return ::descriptor_table_DrivingCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float gasMinusBrakeValue = 1;
  void clear_gasminusbrakevalue();
  static const int kGasMinusBrakeValueFieldNumber = 1;
  float gasminusbrakevalue() const;
  void set_gasminusbrakevalue(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.GasMinusBrakeCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float gasminusbrakevalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DrivingCommand_2eproto;
};
// -------------------------------------------------------------------

class PhysicalAccelerationCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.PhysicalAccelerationCommand) */ {
 public:
  PhysicalAccelerationCommand();
  virtual ~PhysicalAccelerationCommand();

  PhysicalAccelerationCommand(const PhysicalAccelerationCommand& from);
  PhysicalAccelerationCommand(PhysicalAccelerationCommand&& from) noexcept
    : PhysicalAccelerationCommand() {
    *this = ::std::move(from);
  }

  inline PhysicalAccelerationCommand& operator=(const PhysicalAccelerationCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhysicalAccelerationCommand& operator=(PhysicalAccelerationCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhysicalAccelerationCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhysicalAccelerationCommand* internal_default_instance() {
    return reinterpret_cast<const PhysicalAccelerationCommand*>(
               &_PhysicalAccelerationCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PhysicalAccelerationCommand* other);
  friend void swap(PhysicalAccelerationCommand& a, PhysicalAccelerationCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhysicalAccelerationCommand* New() const final {
    return CreateMaybeMessage<PhysicalAccelerationCommand>(nullptr);
  }

  PhysicalAccelerationCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhysicalAccelerationCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhysicalAccelerationCommand& from);
  void MergeFrom(const PhysicalAccelerationCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhysicalAccelerationCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.PhysicalAccelerationCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrivingCommand_2eproto);
    return ::descriptor_table_DrivingCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float physicalAccelerationValue = 1;
  void clear_physicalaccelerationvalue();
  static const int kPhysicalAccelerationValueFieldNumber = 1;
  float physicalaccelerationvalue() const;
  void set_physicalaccelerationvalue(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.PhysicalAccelerationCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float physicalaccelerationvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DrivingCommand_2eproto;
};
// -------------------------------------------------------------------

class GearCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GearCommand) */ {
 public:
  GearCommand();
  virtual ~GearCommand();

  GearCommand(const GearCommand& from);
  GearCommand(GearCommand&& from) noexcept
    : GearCommand() {
    *this = ::std::move(from);
  }

  inline GearCommand& operator=(const GearCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GearCommand& operator=(GearCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GearCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GearCommand* internal_default_instance() {
    return reinterpret_cast<const GearCommand*>(
               &_GearCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GearCommand* other);
  friend void swap(GearCommand& a, GearCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GearCommand* New() const final {
    return CreateMaybeMessage<GearCommand>(nullptr);
  }

  GearCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GearCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GearCommand& from);
  void MergeFrom(const GearCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GearCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GearCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrivingCommand_2eproto);
    return ::descriptor_table_DrivingCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.CarConfiguration.GearState gearMode = 1;
  void clear_gearmode();
  static const int kGearModeFieldNumber = 1;
  ::Cognata::SDK::CarConfiguration_GearState gearmode() const;
  void set_gearmode(::Cognata::SDK::CarConfiguration_GearState value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.GearCommand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int gearmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DrivingCommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DrivingCommand

// .Cognata.SDK.GasCommand gasCommand = 1;
inline bool DrivingCommand::has_gascommand() const {
  return this != internal_default_instance() && gascommand_ != nullptr;
}
inline void DrivingCommand::clear_gascommand() {
  if (GetArenaNoVirtual() == nullptr && gascommand_ != nullptr) {
    delete gascommand_;
  }
  gascommand_ = nullptr;
}
inline const ::Cognata::SDK::GasCommand& DrivingCommand::gascommand() const {
  const ::Cognata::SDK::GasCommand* p = gascommand_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.DrivingCommand.gasCommand)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::GasCommand*>(
      &::Cognata::SDK::_GasCommand_default_instance_);
}
inline ::Cognata::SDK::GasCommand* DrivingCommand::release_gascommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.DrivingCommand.gasCommand)
  
  ::Cognata::SDK::GasCommand* temp = gascommand_;
  gascommand_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::GasCommand* DrivingCommand::mutable_gascommand() {
  
  if (gascommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::GasCommand>(GetArenaNoVirtual());
    gascommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DrivingCommand.gasCommand)
  return gascommand_;
}
inline void DrivingCommand::set_allocated_gascommand(::Cognata::SDK::GasCommand* gascommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gascommand_;
  }
  if (gascommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gascommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gascommand, submessage_arena);
    }
    
  } else {
    
  }
  gascommand_ = gascommand;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.DrivingCommand.gasCommand)
}

// .Cognata.SDK.SteeringCommand steeringCommand = 2;
inline bool DrivingCommand::has_steeringcommand() const {
  return this != internal_default_instance() && steeringcommand_ != nullptr;
}
inline void DrivingCommand::clear_steeringcommand() {
  if (GetArenaNoVirtual() == nullptr && steeringcommand_ != nullptr) {
    delete steeringcommand_;
  }
  steeringcommand_ = nullptr;
}
inline const ::Cognata::SDK::SteeringCommand& DrivingCommand::steeringcommand() const {
  const ::Cognata::SDK::SteeringCommand* p = steeringcommand_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.DrivingCommand.steeringCommand)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SteeringCommand*>(
      &::Cognata::SDK::_SteeringCommand_default_instance_);
}
inline ::Cognata::SDK::SteeringCommand* DrivingCommand::release_steeringcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.DrivingCommand.steeringCommand)
  
  ::Cognata::SDK::SteeringCommand* temp = steeringcommand_;
  steeringcommand_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SteeringCommand* DrivingCommand::mutable_steeringcommand() {
  
  if (steeringcommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SteeringCommand>(GetArenaNoVirtual());
    steeringcommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DrivingCommand.steeringCommand)
  return steeringcommand_;
}
inline void DrivingCommand::set_allocated_steeringcommand(::Cognata::SDK::SteeringCommand* steeringcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete steeringcommand_;
  }
  if (steeringcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steeringcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steeringcommand, submessage_arena);
    }
    
  } else {
    
  }
  steeringcommand_ = steeringcommand;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.DrivingCommand.steeringCommand)
}

// .Cognata.SDK.BrakesCommand brakesCommand = 3;
inline bool DrivingCommand::has_brakescommand() const {
  return this != internal_default_instance() && brakescommand_ != nullptr;
}
inline void DrivingCommand::clear_brakescommand() {
  if (GetArenaNoVirtual() == nullptr && brakescommand_ != nullptr) {
    delete brakescommand_;
  }
  brakescommand_ = nullptr;
}
inline const ::Cognata::SDK::BrakesCommand& DrivingCommand::brakescommand() const {
  const ::Cognata::SDK::BrakesCommand* p = brakescommand_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.DrivingCommand.brakesCommand)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::BrakesCommand*>(
      &::Cognata::SDK::_BrakesCommand_default_instance_);
}
inline ::Cognata::SDK::BrakesCommand* DrivingCommand::release_brakescommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.DrivingCommand.brakesCommand)
  
  ::Cognata::SDK::BrakesCommand* temp = brakescommand_;
  brakescommand_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::BrakesCommand* DrivingCommand::mutable_brakescommand() {
  
  if (brakescommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::BrakesCommand>(GetArenaNoVirtual());
    brakescommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DrivingCommand.brakesCommand)
  return brakescommand_;
}
inline void DrivingCommand::set_allocated_brakescommand(::Cognata::SDK::BrakesCommand* brakescommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete brakescommand_;
  }
  if (brakescommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brakescommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brakescommand, submessage_arena);
    }
    
  } else {
    
  }
  brakescommand_ = brakescommand;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.DrivingCommand.brakesCommand)
}

// .Cognata.SDK.AccelerationCommand accelerationCommand = 4 [deprecated = true];
inline bool DrivingCommand::has_accelerationcommand() const {
  return this != internal_default_instance() && accelerationcommand_ != nullptr;
}
inline void DrivingCommand::clear_accelerationcommand() {
  if (GetArenaNoVirtual() == nullptr && accelerationcommand_ != nullptr) {
    delete accelerationcommand_;
  }
  accelerationcommand_ = nullptr;
}
inline const ::Cognata::SDK::AccelerationCommand& DrivingCommand::accelerationcommand() const {
  const ::Cognata::SDK::AccelerationCommand* p = accelerationcommand_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.DrivingCommand.accelerationCommand)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::AccelerationCommand*>(
      &::Cognata::SDK::_AccelerationCommand_default_instance_);
}
inline ::Cognata::SDK::AccelerationCommand* DrivingCommand::release_accelerationcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.DrivingCommand.accelerationCommand)
  
  ::Cognata::SDK::AccelerationCommand* temp = accelerationcommand_;
  accelerationcommand_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::AccelerationCommand* DrivingCommand::mutable_accelerationcommand() {
  
  if (accelerationcommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::AccelerationCommand>(GetArenaNoVirtual());
    accelerationcommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DrivingCommand.accelerationCommand)
  return accelerationcommand_;
}
inline void DrivingCommand::set_allocated_accelerationcommand(::Cognata::SDK::AccelerationCommand* accelerationcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete accelerationcommand_;
  }
  if (accelerationcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accelerationcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accelerationcommand, submessage_arena);
    }
    
  } else {
    
  }
  accelerationcommand_ = accelerationcommand;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.DrivingCommand.accelerationCommand)
}

// .Cognata.SDK.GasMinusBrakeCommand gasMinusBrakeCommand = 5;
inline bool DrivingCommand::has_gasminusbrakecommand() const {
  return this != internal_default_instance() && gasminusbrakecommand_ != nullptr;
}
inline void DrivingCommand::clear_gasminusbrakecommand() {
  if (GetArenaNoVirtual() == nullptr && gasminusbrakecommand_ != nullptr) {
    delete gasminusbrakecommand_;
  }
  gasminusbrakecommand_ = nullptr;
}
inline const ::Cognata::SDK::GasMinusBrakeCommand& DrivingCommand::gasminusbrakecommand() const {
  const ::Cognata::SDK::GasMinusBrakeCommand* p = gasminusbrakecommand_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.DrivingCommand.gasMinusBrakeCommand)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::GasMinusBrakeCommand*>(
      &::Cognata::SDK::_GasMinusBrakeCommand_default_instance_);
}
inline ::Cognata::SDK::GasMinusBrakeCommand* DrivingCommand::release_gasminusbrakecommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.DrivingCommand.gasMinusBrakeCommand)
  
  ::Cognata::SDK::GasMinusBrakeCommand* temp = gasminusbrakecommand_;
  gasminusbrakecommand_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::GasMinusBrakeCommand* DrivingCommand::mutable_gasminusbrakecommand() {
  
  if (gasminusbrakecommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::GasMinusBrakeCommand>(GetArenaNoVirtual());
    gasminusbrakecommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DrivingCommand.gasMinusBrakeCommand)
  return gasminusbrakecommand_;
}
inline void DrivingCommand::set_allocated_gasminusbrakecommand(::Cognata::SDK::GasMinusBrakeCommand* gasminusbrakecommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gasminusbrakecommand_;
  }
  if (gasminusbrakecommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gasminusbrakecommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gasminusbrakecommand, submessage_arena);
    }
    
  } else {
    
  }
  gasminusbrakecommand_ = gasminusbrakecommand;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.DrivingCommand.gasMinusBrakeCommand)
}

// .Cognata.SDK.PhysicalAccelerationCommand physicalAccelerationCommand = 6;
inline bool DrivingCommand::has_physicalaccelerationcommand() const {
  return this != internal_default_instance() && physicalaccelerationcommand_ != nullptr;
}
inline void DrivingCommand::clear_physicalaccelerationcommand() {
  if (GetArenaNoVirtual() == nullptr && physicalaccelerationcommand_ != nullptr) {
    delete physicalaccelerationcommand_;
  }
  physicalaccelerationcommand_ = nullptr;
}
inline const ::Cognata::SDK::PhysicalAccelerationCommand& DrivingCommand::physicalaccelerationcommand() const {
  const ::Cognata::SDK::PhysicalAccelerationCommand* p = physicalaccelerationcommand_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.DrivingCommand.physicalAccelerationCommand)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::PhysicalAccelerationCommand*>(
      &::Cognata::SDK::_PhysicalAccelerationCommand_default_instance_);
}
inline ::Cognata::SDK::PhysicalAccelerationCommand* DrivingCommand::release_physicalaccelerationcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.DrivingCommand.physicalAccelerationCommand)
  
  ::Cognata::SDK::PhysicalAccelerationCommand* temp = physicalaccelerationcommand_;
  physicalaccelerationcommand_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::PhysicalAccelerationCommand* DrivingCommand::mutable_physicalaccelerationcommand() {
  
  if (physicalaccelerationcommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::PhysicalAccelerationCommand>(GetArenaNoVirtual());
    physicalaccelerationcommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DrivingCommand.physicalAccelerationCommand)
  return physicalaccelerationcommand_;
}
inline void DrivingCommand::set_allocated_physicalaccelerationcommand(::Cognata::SDK::PhysicalAccelerationCommand* physicalaccelerationcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete physicalaccelerationcommand_;
  }
  if (physicalaccelerationcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      physicalaccelerationcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physicalaccelerationcommand, submessage_arena);
    }
    
  } else {
    
  }
  physicalaccelerationcommand_ = physicalaccelerationcommand;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.DrivingCommand.physicalAccelerationCommand)
}

// .Cognata.SDK.GearCommand gearCommand = 7;
inline bool DrivingCommand::has_gearcommand() const {
  return this != internal_default_instance() && gearcommand_ != nullptr;
}
inline void DrivingCommand::clear_gearcommand() {
  if (GetArenaNoVirtual() == nullptr && gearcommand_ != nullptr) {
    delete gearcommand_;
  }
  gearcommand_ = nullptr;
}
inline const ::Cognata::SDK::GearCommand& DrivingCommand::gearcommand() const {
  const ::Cognata::SDK::GearCommand* p = gearcommand_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.DrivingCommand.gearCommand)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::GearCommand*>(
      &::Cognata::SDK::_GearCommand_default_instance_);
}
inline ::Cognata::SDK::GearCommand* DrivingCommand::release_gearcommand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.DrivingCommand.gearCommand)
  
  ::Cognata::SDK::GearCommand* temp = gearcommand_;
  gearcommand_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::GearCommand* DrivingCommand::mutable_gearcommand() {
  
  if (gearcommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::GearCommand>(GetArenaNoVirtual());
    gearcommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DrivingCommand.gearCommand)
  return gearcommand_;
}
inline void DrivingCommand::set_allocated_gearcommand(::Cognata::SDK::GearCommand* gearcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gearcommand_;
  }
  if (gearcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gearcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gearcommand, submessage_arena);
    }
    
  } else {
    
  }
  gearcommand_ = gearcommand;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.DrivingCommand.gearCommand)
}

// -------------------------------------------------------------------

// GasCommand

// float gasValue = 1;
inline void GasCommand::clear_gasvalue() {
  gasvalue_ = 0;
}
inline float GasCommand::gasvalue() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GasCommand.gasValue)
  return gasvalue_;
}
inline void GasCommand::set_gasvalue(float value) {
  
  gasvalue_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GasCommand.gasValue)
}

// -------------------------------------------------------------------

// SteeringCommand

// float steerValue = 1;
inline void SteeringCommand::clear_steervalue() {
  steervalue_ = 0;
}
inline float SteeringCommand::steervalue() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SteeringCommand.steerValue)
  return steervalue_;
}
inline void SteeringCommand::set_steervalue(float value) {
  
  steervalue_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SteeringCommand.steerValue)
}

// -------------------------------------------------------------------

// BrakesCommand

// float brakesValue = 1;
inline void BrakesCommand::clear_brakesvalue() {
  brakesvalue_ = 0;
}
inline float BrakesCommand::brakesvalue() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.BrakesCommand.brakesValue)
  return brakesvalue_;
}
inline void BrakesCommand::set_brakesvalue(float value) {
  
  brakesvalue_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.BrakesCommand.brakesValue)
}

// -------------------------------------------------------------------

// AccelerationCommand

// float accelerationValue = 1 [deprecated = true];
inline void AccelerationCommand::clear_accelerationvalue() {
  accelerationvalue_ = 0;
}
inline float AccelerationCommand::accelerationvalue() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.AccelerationCommand.accelerationValue)
  return accelerationvalue_;
}
inline void AccelerationCommand::set_accelerationvalue(float value) {
  
  accelerationvalue_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.AccelerationCommand.accelerationValue)
}

// -------------------------------------------------------------------

// GasMinusBrakeCommand

// float gasMinusBrakeValue = 1;
inline void GasMinusBrakeCommand::clear_gasminusbrakevalue() {
  gasminusbrakevalue_ = 0;
}
inline float GasMinusBrakeCommand::gasminusbrakevalue() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GasMinusBrakeCommand.gasMinusBrakeValue)
  return gasminusbrakevalue_;
}
inline void GasMinusBrakeCommand::set_gasminusbrakevalue(float value) {
  
  gasminusbrakevalue_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GasMinusBrakeCommand.gasMinusBrakeValue)
}

// -------------------------------------------------------------------

// PhysicalAccelerationCommand

// float physicalAccelerationValue = 1;
inline void PhysicalAccelerationCommand::clear_physicalaccelerationvalue() {
  physicalaccelerationvalue_ = 0;
}
inline float PhysicalAccelerationCommand::physicalaccelerationvalue() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.PhysicalAccelerationCommand.physicalAccelerationValue)
  return physicalaccelerationvalue_;
}
inline void PhysicalAccelerationCommand::set_physicalaccelerationvalue(float value) {
  
  physicalaccelerationvalue_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.PhysicalAccelerationCommand.physicalAccelerationValue)
}

// -------------------------------------------------------------------

// GearCommand

// .Cognata.SDK.CarConfiguration.GearState gearMode = 1;
inline void GearCommand::clear_gearmode() {
  gearmode_ = 0;
}
inline ::Cognata::SDK::CarConfiguration_GearState GearCommand::gearmode() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GearCommand.gearMode)
  return static_cast< ::Cognata::SDK::CarConfiguration_GearState >(gearmode_);
}
inline void GearCommand::set_gearmode(::Cognata::SDK::CarConfiguration_GearState value) {
  
  gearmode_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GearCommand.gearMode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SDK
}  // namespace Cognata

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DrivingCommand_2eproto
