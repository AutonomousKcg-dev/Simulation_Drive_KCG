// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EngineToClientMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EngineToClientMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EngineToClientMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ErrorCodes.pb.h"
#include "vectors.pb.h"
#include "ROIOutput.pb.h"
#include "CarConfiguration.pb.h"
#include "Sensors.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EngineToClientMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EngineToClientMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[45]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EngineToClientMessage_2eproto;
namespace Cognata {
namespace SDK {
class BehaviourParams;
class BehaviourParamsDefaultTypeInternal;
extern BehaviourParamsDefaultTypeInternal _BehaviourParams_default_instance_;
class CarQueryReport;
class CarQueryReportDefaultTypeInternal;
extern CarQueryReportDefaultTypeInternal _CarQueryReport_default_instance_;
class CarTelemetriesOutput;
class CarTelemetriesOutputDefaultTypeInternal;
extern CarTelemetriesOutputDefaultTypeInternal _CarTelemetriesOutput_default_instance_;
class CarsQueryReport;
class CarsQueryReportDefaultTypeInternal;
extern CarsQueryReportDefaultTypeInternal _CarsQueryReport_default_instance_;
class ConnectionPortReport;
class ConnectionPortReportDefaultTypeInternal;
extern ConnectionPortReportDefaultTypeInternal _ConnectionPortReport_default_instance_;
class DepthCameraOutput;
class DepthCameraOutputDefaultTypeInternal;
extern DepthCameraOutputDefaultTypeInternal _DepthCameraOutput_default_instance_;
class DynamicObjectGroundTruthOutput;
class DynamicObjectGroundTruthOutputDefaultTypeInternal;
extern DynamicObjectGroundTruthOutputDefaultTypeInternal _DynamicObjectGroundTruthOutput_default_instance_;
class E2COutput;
class E2COutputDefaultTypeInternal;
extern E2COutputDefaultTypeInternal _E2COutput_default_instance_;
class EndOfSimulation;
class EndOfSimulationDefaultTypeInternal;
extern EndOfSimulationDefaultTypeInternal _EndOfSimulation_default_instance_;
class EngineToClientMessage;
class EngineToClientMessageDefaultTypeInternal;
extern EngineToClientMessageDefaultTypeInternal _EngineToClientMessage_default_instance_;
class EngineVersionReport;
class EngineVersionReportDefaultTypeInternal;
extern EngineVersionReportDefaultTypeInternal _EngineVersionReport_default_instance_;
class GPSOutput;
class GPSOutputDefaultTypeInternal;
extern GPSOutputDefaultTypeInternal _GPSOutput_default_instance_;
class GlobalSensorQueryReport;
class GlobalSensorQueryReportDefaultTypeInternal;
extern GlobalSensorQueryReportDefaultTypeInternal _GlobalSensorQueryReport_default_instance_;
class GlobalSensorsQueryReport;
class GlobalSensorsQueryReportDefaultTypeInternal;
extern GlobalSensorsQueryReportDefaultTypeInternal _GlobalSensorsQueryReport_default_instance_;
class GroundMaterial;
class GroundMaterialDefaultTypeInternal;
extern GroundMaterialDefaultTypeInternal _GroundMaterial_default_instance_;
class LaneDetectorOutput;
class LaneDetectorOutputDefaultTypeInternal;
extern LaneDetectorOutputDefaultTypeInternal _LaneDetectorOutput_default_instance_;
class LidarOutput;
class LidarOutputDefaultTypeInternal;
extern LidarOutputDefaultTypeInternal _LidarOutput_default_instance_;
class LoadingStateReport;
class LoadingStateReportDefaultTypeInternal;
extern LoadingStateReportDefaultTypeInternal _LoadingStateReport_default_instance_;
class LocationParams;
class LocationParamsDefaultTypeInternal;
extern LocationParamsDefaultTypeInternal _LocationParams_default_instance_;
class MovingObjectQueryReport;
class MovingObjectQueryReportDefaultTypeInternal;
extern MovingObjectQueryReportDefaultTypeInternal _MovingObjectQueryReport_default_instance_;
class MovingObjectsQueryReport;
class MovingObjectsQueryReportDefaultTypeInternal;
extern MovingObjectsQueryReportDefaultTypeInternal _MovingObjectsQueryReport_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class QueryReport;
class QueryReportDefaultTypeInternal;
extern QueryReportDefaultTypeInternal _QueryReport_default_instance_;
class RGBCameraOutput;
class RGBCameraOutputDefaultTypeInternal;
extern RGBCameraOutputDefaultTypeInternal _RGBCameraOutput_default_instance_;
class RadarOutput;
class RadarOutputDefaultTypeInternal;
extern RadarOutputDefaultTypeInternal _RadarOutput_default_instance_;
class RadarOutput_BeamInfo;
class RadarOutput_BeamInfoDefaultTypeInternal;
extern RadarOutput_BeamInfoDefaultTypeInternal _RadarOutput_BeamInfo_default_instance_;
class RadarOutput_Header;
class RadarOutput_HeaderDefaultTypeInternal;
extern RadarOutput_HeaderDefaultTypeInternal _RadarOutput_Header_default_instance_;
class RadarOutput_Target;
class RadarOutput_TargetDefaultTypeInternal;
extern RadarOutput_TargetDefaultTypeInternal _RadarOutput_Target_default_instance_;
class RadarOutput_Target_GeometricTarget;
class RadarOutput_Target_GeometricTargetDefaultTypeInternal;
extern RadarOutput_Target_GeometricTargetDefaultTypeInternal _RadarOutput_Target_GeometricTarget_default_instance_;
class RadarOutput_Target_RadarTarget;
class RadarOutput_Target_RadarTargetDefaultTypeInternal;
extern RadarOutput_Target_RadarTargetDefaultTypeInternal _RadarOutput_Target_RadarTarget_default_instance_;
class RadarPlacement;
class RadarPlacementDefaultTypeInternal;
extern RadarPlacementDefaultTypeInternal _RadarPlacement_default_instance_;
class RunIdQueryReport;
class RunIdQueryReportDefaultTypeInternal;
extern RunIdQueryReportDefaultTypeInternal _RunIdQueryReport_default_instance_;
class SemanticClassLabelingOutput;
class SemanticClassLabelingOutputDefaultTypeInternal;
extern SemanticClassLabelingOutputDefaultTypeInternal _SemanticClassLabelingOutput_default_instance_;
class SemanticInstanceLabelingOutput;
class SemanticInstanceLabelingOutputDefaultTypeInternal;
extern SemanticInstanceLabelingOutputDefaultTypeInternal _SemanticInstanceLabelingOutput_default_instance_;
class SemanticMaterialLabelingOutput;
class SemanticMaterialLabelingOutputDefaultTypeInternal;
extern SemanticMaterialLabelingOutputDefaultTypeInternal _SemanticMaterialLabelingOutput_default_instance_;
class SemanticStructureLabelingOutput;
class SemanticStructureLabelingOutputDefaultTypeInternal;
extern SemanticStructureLabelingOutputDefaultTypeInternal _SemanticStructureLabelingOutput_default_instance_;
class SensorData;
class SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
class SensorOutput;
class SensorOutputDefaultTypeInternal;
extern SensorOutputDefaultTypeInternal _SensorOutput_default_instance_;
class SensorQueryReport;
class SensorQueryReportDefaultTypeInternal;
extern SensorQueryReportDefaultTypeInternal _SensorQueryReport_default_instance_;
class SensorsQueryReport;
class SensorsQueryReportDefaultTypeInternal;
extern SensorsQueryReportDefaultTypeInternal _SensorsQueryReport_default_instance_;
class SpawnedObject;
class SpawnedObjectDefaultTypeInternal;
extern SpawnedObjectDefaultTypeInternal _SpawnedObject_default_instance_;
class TerrainQueryReport;
class TerrainQueryReportDefaultTypeInternal;
extern TerrainQueryReportDefaultTypeInternal _TerrainQueryReport_default_instance_;
class ThermalCameraOutput;
class ThermalCameraOutputDefaultTypeInternal;
extern ThermalCameraOutputDefaultTypeInternal _ThermalCameraOutput_default_instance_;
class WakeupOutput;
class WakeupOutputDefaultTypeInternal;
extern WakeupOutputDefaultTypeInternal _WakeupOutput_default_instance_;
class WheelTelemetriesOutput;
class WheelTelemetriesOutputDefaultTypeInternal;
extern WheelTelemetriesOutputDefaultTypeInternal _WheelTelemetriesOutput_default_instance_;
}  // namespace SDK
}  // namespace Cognata
PROTOBUF_NAMESPACE_OPEN
template<> ::Cognata::SDK::BehaviourParams* Arena::CreateMaybeMessage<::Cognata::SDK::BehaviourParams>(Arena*);
template<> ::Cognata::SDK::CarQueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::CarQueryReport>(Arena*);
template<> ::Cognata::SDK::CarTelemetriesOutput* Arena::CreateMaybeMessage<::Cognata::SDK::CarTelemetriesOutput>(Arena*);
template<> ::Cognata::SDK::CarsQueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::CarsQueryReport>(Arena*);
template<> ::Cognata::SDK::ConnectionPortReport* Arena::CreateMaybeMessage<::Cognata::SDK::ConnectionPortReport>(Arena*);
template<> ::Cognata::SDK::DepthCameraOutput* Arena::CreateMaybeMessage<::Cognata::SDK::DepthCameraOutput>(Arena*);
template<> ::Cognata::SDK::DynamicObjectGroundTruthOutput* Arena::CreateMaybeMessage<::Cognata::SDK::DynamicObjectGroundTruthOutput>(Arena*);
template<> ::Cognata::SDK::E2COutput* Arena::CreateMaybeMessage<::Cognata::SDK::E2COutput>(Arena*);
template<> ::Cognata::SDK::EndOfSimulation* Arena::CreateMaybeMessage<::Cognata::SDK::EndOfSimulation>(Arena*);
template<> ::Cognata::SDK::EngineToClientMessage* Arena::CreateMaybeMessage<::Cognata::SDK::EngineToClientMessage>(Arena*);
template<> ::Cognata::SDK::EngineVersionReport* Arena::CreateMaybeMessage<::Cognata::SDK::EngineVersionReport>(Arena*);
template<> ::Cognata::SDK::GPSOutput* Arena::CreateMaybeMessage<::Cognata::SDK::GPSOutput>(Arena*);
template<> ::Cognata::SDK::GlobalSensorQueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::GlobalSensorQueryReport>(Arena*);
template<> ::Cognata::SDK::GlobalSensorsQueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::GlobalSensorsQueryReport>(Arena*);
template<> ::Cognata::SDK::GroundMaterial* Arena::CreateMaybeMessage<::Cognata::SDK::GroundMaterial>(Arena*);
template<> ::Cognata::SDK::LaneDetectorOutput* Arena::CreateMaybeMessage<::Cognata::SDK::LaneDetectorOutput>(Arena*);
template<> ::Cognata::SDK::LidarOutput* Arena::CreateMaybeMessage<::Cognata::SDK::LidarOutput>(Arena*);
template<> ::Cognata::SDK::LoadingStateReport* Arena::CreateMaybeMessage<::Cognata::SDK::LoadingStateReport>(Arena*);
template<> ::Cognata::SDK::LocationParams* Arena::CreateMaybeMessage<::Cognata::SDK::LocationParams>(Arena*);
template<> ::Cognata::SDK::MovingObjectQueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::MovingObjectQueryReport>(Arena*);
template<> ::Cognata::SDK::MovingObjectsQueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::MovingObjectsQueryReport>(Arena*);
template<> ::Cognata::SDK::Path* Arena::CreateMaybeMessage<::Cognata::SDK::Path>(Arena*);
template<> ::Cognata::SDK::QueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::QueryReport>(Arena*);
template<> ::Cognata::SDK::RGBCameraOutput* Arena::CreateMaybeMessage<::Cognata::SDK::RGBCameraOutput>(Arena*);
template<> ::Cognata::SDK::RadarOutput* Arena::CreateMaybeMessage<::Cognata::SDK::RadarOutput>(Arena*);
template<> ::Cognata::SDK::RadarOutput_BeamInfo* Arena::CreateMaybeMessage<::Cognata::SDK::RadarOutput_BeamInfo>(Arena*);
template<> ::Cognata::SDK::RadarOutput_Header* Arena::CreateMaybeMessage<::Cognata::SDK::RadarOutput_Header>(Arena*);
template<> ::Cognata::SDK::RadarOutput_Target* Arena::CreateMaybeMessage<::Cognata::SDK::RadarOutput_Target>(Arena*);
template<> ::Cognata::SDK::RadarOutput_Target_GeometricTarget* Arena::CreateMaybeMessage<::Cognata::SDK::RadarOutput_Target_GeometricTarget>(Arena*);
template<> ::Cognata::SDK::RadarOutput_Target_RadarTarget* Arena::CreateMaybeMessage<::Cognata::SDK::RadarOutput_Target_RadarTarget>(Arena*);
template<> ::Cognata::SDK::RadarPlacement* Arena::CreateMaybeMessage<::Cognata::SDK::RadarPlacement>(Arena*);
template<> ::Cognata::SDK::RunIdQueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::RunIdQueryReport>(Arena*);
template<> ::Cognata::SDK::SemanticClassLabelingOutput* Arena::CreateMaybeMessage<::Cognata::SDK::SemanticClassLabelingOutput>(Arena*);
template<> ::Cognata::SDK::SemanticInstanceLabelingOutput* Arena::CreateMaybeMessage<::Cognata::SDK::SemanticInstanceLabelingOutput>(Arena*);
template<> ::Cognata::SDK::SemanticMaterialLabelingOutput* Arena::CreateMaybeMessage<::Cognata::SDK::SemanticMaterialLabelingOutput>(Arena*);
template<> ::Cognata::SDK::SemanticStructureLabelingOutput* Arena::CreateMaybeMessage<::Cognata::SDK::SemanticStructureLabelingOutput>(Arena*);
template<> ::Cognata::SDK::SensorData* Arena::CreateMaybeMessage<::Cognata::SDK::SensorData>(Arena*);
template<> ::Cognata::SDK::SensorOutput* Arena::CreateMaybeMessage<::Cognata::SDK::SensorOutput>(Arena*);
template<> ::Cognata::SDK::SensorQueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::SensorQueryReport>(Arena*);
template<> ::Cognata::SDK::SensorsQueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::SensorsQueryReport>(Arena*);
template<> ::Cognata::SDK::SpawnedObject* Arena::CreateMaybeMessage<::Cognata::SDK::SpawnedObject>(Arena*);
template<> ::Cognata::SDK::TerrainQueryReport* Arena::CreateMaybeMessage<::Cognata::SDK::TerrainQueryReport>(Arena*);
template<> ::Cognata::SDK::ThermalCameraOutput* Arena::CreateMaybeMessage<::Cognata::SDK::ThermalCameraOutput>(Arena*);
template<> ::Cognata::SDK::WakeupOutput* Arena::CreateMaybeMessage<::Cognata::SDK::WakeupOutput>(Arena*);
template<> ::Cognata::SDK::WheelTelemetriesOutput* Arena::CreateMaybeMessage<::Cognata::SDK::WheelTelemetriesOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Cognata {
namespace SDK {

enum LoadingStateReport_stateType : int {
  LoadingStateReport_stateType_init = 0,
  LoadingStateReport_stateType_Terrain = 1,
  LoadingStateReport_stateType_SpawningEgoCar = 2,
  LoadingStateReport_stateType_Sensors = 3,
  LoadingStateReport_stateType_SpawningCars = 4,
  LoadingStateReport_stateType_SpawningPedestrians = 5,
  LoadingStateReport_stateType_Done = 6,
  LoadingStateReport_stateType_LoadingStateReport_stateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoadingStateReport_stateType_LoadingStateReport_stateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoadingStateReport_stateType_IsValid(int value);
constexpr LoadingStateReport_stateType LoadingStateReport_stateType_stateType_MIN = LoadingStateReport_stateType_init;
constexpr LoadingStateReport_stateType LoadingStateReport_stateType_stateType_MAX = LoadingStateReport_stateType_Done;
constexpr int LoadingStateReport_stateType_stateType_ARRAYSIZE = LoadingStateReport_stateType_stateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoadingStateReport_stateType_descriptor();
template<typename T>
inline const std::string& LoadingStateReport_stateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoadingStateReport_stateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoadingStateReport_stateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoadingStateReport_stateType_descriptor(), enum_t_value);
}
inline bool LoadingStateReport_stateType_Parse(
    const std::string& name, LoadingStateReport_stateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoadingStateReport_stateType>(
    LoadingStateReport_stateType_descriptor(), name, value);
}
enum GroundMaterial_SurfaceType : int {
  GroundMaterial_SurfaceType_HARD = 0,
  GroundMaterial_SurfaceType_SOFT = 1,
  GroundMaterial_SurfaceType_NEUTRAL = 2,
  GroundMaterial_SurfaceType_GroundMaterial_SurfaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GroundMaterial_SurfaceType_GroundMaterial_SurfaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GroundMaterial_SurfaceType_IsValid(int value);
constexpr GroundMaterial_SurfaceType GroundMaterial_SurfaceType_SurfaceType_MIN = GroundMaterial_SurfaceType_HARD;
constexpr GroundMaterial_SurfaceType GroundMaterial_SurfaceType_SurfaceType_MAX = GroundMaterial_SurfaceType_NEUTRAL;
constexpr int GroundMaterial_SurfaceType_SurfaceType_ARRAYSIZE = GroundMaterial_SurfaceType_SurfaceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroundMaterial_SurfaceType_descriptor();
template<typename T>
inline const std::string& GroundMaterial_SurfaceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroundMaterial_SurfaceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroundMaterial_SurfaceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroundMaterial_SurfaceType_descriptor(), enum_t_value);
}
inline bool GroundMaterial_SurfaceType_Parse(
    const std::string& name, GroundMaterial_SurfaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroundMaterial_SurfaceType>(
    GroundMaterial_SurfaceType_descriptor(), name, value);
}
enum DrivingControllerType : int {
  UNDEFINED_DRIVER = 0,
  INTERNAL_AI_DRIVER = 1,
  EXTERNAL_SDK_DRIVER = 2,
  DrivingControllerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DrivingControllerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DrivingControllerType_IsValid(int value);
constexpr DrivingControllerType DrivingControllerType_MIN = UNDEFINED_DRIVER;
constexpr DrivingControllerType DrivingControllerType_MAX = EXTERNAL_SDK_DRIVER;
constexpr int DrivingControllerType_ARRAYSIZE = DrivingControllerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrivingControllerType_descriptor();
template<typename T>
inline const std::string& DrivingControllerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DrivingControllerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DrivingControllerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DrivingControllerType_descriptor(), enum_t_value);
}
inline bool DrivingControllerType_Parse(
    const std::string& name, DrivingControllerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DrivingControllerType>(
    DrivingControllerType_descriptor(), name, value);
}
// ===================================================================

class EngineToClientMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.EngineToClientMessage) */ {
 public:
  EngineToClientMessage();
  virtual ~EngineToClientMessage();

  EngineToClientMessage(const EngineToClientMessage& from);
  EngineToClientMessage(EngineToClientMessage&& from) noexcept
    : EngineToClientMessage() {
    *this = ::std::move(from);
  }

  inline EngineToClientMessage& operator=(const EngineToClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineToClientMessage& operator=(EngineToClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineToClientMessage& default_instance();

  enum ReportTypeCase {
    kQueryReport = 10,
    kRegisterReport = 11,
    kErrorMessage = 12,
    kEndOfSimulation = 13,
    kLoadingState = 14,
    REPORTTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EngineToClientMessage* internal_default_instance() {
    return reinterpret_cast<const EngineToClientMessage*>(
               &_EngineToClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EngineToClientMessage* other);
  friend void swap(EngineToClientMessage& a, EngineToClientMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EngineToClientMessage* New() const final {
    return CreateMaybeMessage<EngineToClientMessage>(nullptr);
  }

  EngineToClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineToClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineToClientMessage& from);
  void MergeFrom(const EngineToClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineToClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.EngineToClientMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float simulationTimeInSec = 1;
  void clear_simulationtimeinsec();
  static const int kSimulationTimeInSecFieldNumber = 1;
  float simulationtimeinsec() const;
  void set_simulationtimeinsec(float value);

  // uint32 frameNumber = 2;
  void clear_framenumber();
  static const int kFrameNumberFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 framenumber() const;
  void set_framenumber(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .Cognata.SDK.QueryReport queryReport = 10;
  bool has_queryreport() const;
  void clear_queryreport();
  static const int kQueryReportFieldNumber = 10;
  const ::Cognata::SDK::QueryReport& queryreport() const;
  ::Cognata::SDK::QueryReport* release_queryreport();
  ::Cognata::SDK::QueryReport* mutable_queryreport();
  void set_allocated_queryreport(::Cognata::SDK::QueryReport* queryreport);

  // .Cognata.SDK.SensorData registerReport = 11;
  bool has_registerreport() const;
  void clear_registerreport();
  static const int kRegisterReportFieldNumber = 11;
  const ::Cognata::SDK::SensorData& registerreport() const;
  ::Cognata::SDK::SensorData* release_registerreport();
  ::Cognata::SDK::SensorData* mutable_registerreport();
  void set_allocated_registerreport(::Cognata::SDK::SensorData* registerreport);

  // .Cognata.SDK.ErrorMessage errorMessage = 12;
  bool has_errormessage() const;
  void clear_errormessage();
  static const int kErrorMessageFieldNumber = 12;
  const ::Cognata::SDK::ErrorMessage& errormessage() const;
  ::Cognata::SDK::ErrorMessage* release_errormessage();
  ::Cognata::SDK::ErrorMessage* mutable_errormessage();
  void set_allocated_errormessage(::Cognata::SDK::ErrorMessage* errormessage);

  // .Cognata.SDK.EndOfSimulation endOfSimulation = 13;
  bool has_endofsimulation() const;
  void clear_endofsimulation();
  static const int kEndOfSimulationFieldNumber = 13;
  const ::Cognata::SDK::EndOfSimulation& endofsimulation() const;
  ::Cognata::SDK::EndOfSimulation* release_endofsimulation();
  ::Cognata::SDK::EndOfSimulation* mutable_endofsimulation();
  void set_allocated_endofsimulation(::Cognata::SDK::EndOfSimulation* endofsimulation);

  // .Cognata.SDK.LoadingStateReport loadingState = 14;
  bool has_loadingstate() const;
  void clear_loadingstate();
  static const int kLoadingStateFieldNumber = 14;
  const ::Cognata::SDK::LoadingStateReport& loadingstate() const;
  ::Cognata::SDK::LoadingStateReport* release_loadingstate();
  ::Cognata::SDK::LoadingStateReport* mutable_loadingstate();
  void set_allocated_loadingstate(::Cognata::SDK::LoadingStateReport* loadingstate);

  void clear_ReportType();
  ReportTypeCase ReportType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.EngineToClientMessage)
 private:
  class HasBitSetters;
  void set_has_queryreport();
  void set_has_registerreport();
  void set_has_errormessage();
  void set_has_endofsimulation();
  void set_has_loadingstate();

  inline bool has_ReportType() const;
  inline void clear_has_ReportType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float simulationtimeinsec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 framenumber_;
  union ReportTypeUnion {
    ReportTypeUnion() {}
    ::Cognata::SDK::QueryReport* queryreport_;
    ::Cognata::SDK::SensorData* registerreport_;
    ::Cognata::SDK::ErrorMessage* errormessage_;
    ::Cognata::SDK::EndOfSimulation* endofsimulation_;
    ::Cognata::SDK::LoadingStateReport* loadingstate_;
  } ReportType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class ConnectionPortReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ConnectionPortReport) */ {
 public:
  ConnectionPortReport();
  virtual ~ConnectionPortReport();

  ConnectionPortReport(const ConnectionPortReport& from);
  ConnectionPortReport(ConnectionPortReport&& from) noexcept
    : ConnectionPortReport() {
    *this = ::std::move(from);
  }

  inline ConnectionPortReport& operator=(const ConnectionPortReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionPortReport& operator=(ConnectionPortReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionPortReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionPortReport* internal_default_instance() {
    return reinterpret_cast<const ConnectionPortReport*>(
               &_ConnectionPortReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConnectionPortReport* other);
  friend void swap(ConnectionPortReport& a, ConnectionPortReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionPortReport* New() const final {
    return CreateMaybeMessage<ConnectionPortReport>(nullptr);
  }

  ConnectionPortReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionPortReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionPortReport& from);
  void MergeFrom(const ConnectionPortReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionPortReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ConnectionPortReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string port = 1;
  void clear_port();
  static const int kPortFieldNumber = 1;
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.ConnectionPortReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.QueryReport) */ {
 public:
  QueryReport();
  virtual ~QueryReport();

  QueryReport(const QueryReport& from);
  QueryReport(QueryReport&& from) noexcept
    : QueryReport() {
    *this = ::std::move(from);
  }

  inline QueryReport& operator=(const QueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryReport& operator=(QueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryReport& default_instance();

  enum QueryTypeCase {
    kSensorsQueryReport = 10,
    kCarsQueryReport = 11,
    kTerrainQueryReport = 12,
    kEngineVersionReport = 13,
    kMovingObjectsQueryReport = 14,
    kGlobalSensorsQueryReport = 15,
    kConnectPortReport = 16,
    kRunIdQueryReport = 17,
    QUERYTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryReport* internal_default_instance() {
    return reinterpret_cast<const QueryReport*>(
               &_QueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(QueryReport* other);
  friend void swap(QueryReport& a, QueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryReport* New() const final {
    return CreateMaybeMessage<QueryReport>(nullptr);
  }

  QueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryReport& from);
  void MergeFrom(const QueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.QueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.SensorsQueryReport sensorsQueryReport = 10;
  bool has_sensorsqueryreport() const;
  void clear_sensorsqueryreport();
  static const int kSensorsQueryReportFieldNumber = 10;
  const ::Cognata::SDK::SensorsQueryReport& sensorsqueryreport() const;
  ::Cognata::SDK::SensorsQueryReport* release_sensorsqueryreport();
  ::Cognata::SDK::SensorsQueryReport* mutable_sensorsqueryreport();
  void set_allocated_sensorsqueryreport(::Cognata::SDK::SensorsQueryReport* sensorsqueryreport);

  // .Cognata.SDK.CarsQueryReport carsQueryReport = 11;
  bool has_carsqueryreport() const;
  void clear_carsqueryreport();
  static const int kCarsQueryReportFieldNumber = 11;
  const ::Cognata::SDK::CarsQueryReport& carsqueryreport() const;
  ::Cognata::SDK::CarsQueryReport* release_carsqueryreport();
  ::Cognata::SDK::CarsQueryReport* mutable_carsqueryreport();
  void set_allocated_carsqueryreport(::Cognata::SDK::CarsQueryReport* carsqueryreport);

  // .Cognata.SDK.TerrainQueryReport terrainQueryReport = 12;
  bool has_terrainqueryreport() const;
  void clear_terrainqueryreport();
  static const int kTerrainQueryReportFieldNumber = 12;
  const ::Cognata::SDK::TerrainQueryReport& terrainqueryreport() const;
  ::Cognata::SDK::TerrainQueryReport* release_terrainqueryreport();
  ::Cognata::SDK::TerrainQueryReport* mutable_terrainqueryreport();
  void set_allocated_terrainqueryreport(::Cognata::SDK::TerrainQueryReport* terrainqueryreport);

  // .Cognata.SDK.EngineVersionReport engineVersionReport = 13;
  bool has_engineversionreport() const;
  void clear_engineversionreport();
  static const int kEngineVersionReportFieldNumber = 13;
  const ::Cognata::SDK::EngineVersionReport& engineversionreport() const;
  ::Cognata::SDK::EngineVersionReport* release_engineversionreport();
  ::Cognata::SDK::EngineVersionReport* mutable_engineversionreport();
  void set_allocated_engineversionreport(::Cognata::SDK::EngineVersionReport* engineversionreport);

  // .Cognata.SDK.MovingObjectsQueryReport movingObjectsQueryReport = 14;
  bool has_movingobjectsqueryreport() const;
  void clear_movingobjectsqueryreport();
  static const int kMovingObjectsQueryReportFieldNumber = 14;
  const ::Cognata::SDK::MovingObjectsQueryReport& movingobjectsqueryreport() const;
  ::Cognata::SDK::MovingObjectsQueryReport* release_movingobjectsqueryreport();
  ::Cognata::SDK::MovingObjectsQueryReport* mutable_movingobjectsqueryreport();
  void set_allocated_movingobjectsqueryreport(::Cognata::SDK::MovingObjectsQueryReport* movingobjectsqueryreport);

  // .Cognata.SDK.GlobalSensorsQueryReport globalSensorsQueryReport = 15;
  bool has_globalsensorsqueryreport() const;
  void clear_globalsensorsqueryreport();
  static const int kGlobalSensorsQueryReportFieldNumber = 15;
  const ::Cognata::SDK::GlobalSensorsQueryReport& globalsensorsqueryreport() const;
  ::Cognata::SDK::GlobalSensorsQueryReport* release_globalsensorsqueryreport();
  ::Cognata::SDK::GlobalSensorsQueryReport* mutable_globalsensorsqueryreport();
  void set_allocated_globalsensorsqueryreport(::Cognata::SDK::GlobalSensorsQueryReport* globalsensorsqueryreport);

  // .Cognata.SDK.ConnectionPortReport connectPortReport = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_connectportreport() const;
  PROTOBUF_DEPRECATED void clear_connectportreport();
  PROTOBUF_DEPRECATED static const int kConnectPortReportFieldNumber = 16;
  PROTOBUF_DEPRECATED const ::Cognata::SDK::ConnectionPortReport& connectportreport() const;
  PROTOBUF_DEPRECATED ::Cognata::SDK::ConnectionPortReport* release_connectportreport();
  PROTOBUF_DEPRECATED ::Cognata::SDK::ConnectionPortReport* mutable_connectportreport();
  PROTOBUF_DEPRECATED void set_allocated_connectportreport(::Cognata::SDK::ConnectionPortReport* connectportreport);

  // .Cognata.SDK.RunIdQueryReport runIdQueryReport = 17;
  bool has_runidqueryreport() const;
  void clear_runidqueryreport();
  static const int kRunIdQueryReportFieldNumber = 17;
  const ::Cognata::SDK::RunIdQueryReport& runidqueryreport() const;
  ::Cognata::SDK::RunIdQueryReport* release_runidqueryreport();
  ::Cognata::SDK::RunIdQueryReport* mutable_runidqueryreport();
  void set_allocated_runidqueryreport(::Cognata::SDK::RunIdQueryReport* runidqueryreport);

  void clear_QueryType();
  QueryTypeCase QueryType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.QueryReport)
 private:
  class HasBitSetters;
  void set_has_sensorsqueryreport();
  void set_has_carsqueryreport();
  void set_has_terrainqueryreport();
  void set_has_engineversionreport();
  void set_has_movingobjectsqueryreport();
  void set_has_globalsensorsqueryreport();
  void set_has_connectportreport();
  void set_has_runidqueryreport();

  inline bool has_QueryType() const;
  inline void clear_has_QueryType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union QueryTypeUnion {
    QueryTypeUnion() {}
    ::Cognata::SDK::SensorsQueryReport* sensorsqueryreport_;
    ::Cognata::SDK::CarsQueryReport* carsqueryreport_;
    ::Cognata::SDK::TerrainQueryReport* terrainqueryreport_;
    ::Cognata::SDK::EngineVersionReport* engineversionreport_;
    ::Cognata::SDK::MovingObjectsQueryReport* movingobjectsqueryreport_;
    ::Cognata::SDK::GlobalSensorsQueryReport* globalsensorsqueryreport_;
    ::Cognata::SDK::ConnectionPortReport* connectportreport_;
    ::Cognata::SDK::RunIdQueryReport* runidqueryreport_;
  } QueryType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class RunIdQueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RunIdQueryReport) */ {
 public:
  RunIdQueryReport();
  virtual ~RunIdQueryReport();

  RunIdQueryReport(const RunIdQueryReport& from);
  RunIdQueryReport(RunIdQueryReport&& from) noexcept
    : RunIdQueryReport() {
    *this = ::std::move(from);
  }

  inline RunIdQueryReport& operator=(const RunIdQueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunIdQueryReport& operator=(RunIdQueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunIdQueryReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunIdQueryReport* internal_default_instance() {
    return reinterpret_cast<const RunIdQueryReport*>(
               &_RunIdQueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RunIdQueryReport* other);
  friend void swap(RunIdQueryReport& a, RunIdQueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunIdQueryReport* New() const final {
    return CreateMaybeMessage<RunIdQueryReport>(nullptr);
  }

  RunIdQueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunIdQueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunIdQueryReport& from);
  void MergeFrom(const RunIdQueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunIdQueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RunIdQueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string runId = 1;
  void clear_runid();
  static const int kRunIdFieldNumber = 1;
  const std::string& runid() const;
  void set_runid(const std::string& value);
  void set_runid(std::string&& value);
  void set_runid(const char* value);
  void set_runid(const char* value, size_t size);
  std::string* mutable_runid();
  std::string* release_runid();
  void set_allocated_runid(std::string* runid);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RunIdQueryReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class SensorData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SensorData) */ {
 public:
  SensorData();
  virtual ~SensorData();

  SensorData(const SensorData& from);
  SensorData(SensorData&& from) noexcept
    : SensorData() {
    *this = ::std::move(from);
  }

  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorData& operator=(SensorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorData* internal_default_instance() {
    return reinterpret_cast<const SensorData*>(
               &_SensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SensorData* other);
  friend void swap(SensorData& a, SensorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorData* New() const final {
    return CreateMaybeMessage<SensorData>(nullptr);
  }

  SensorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorData& from);
  void MergeFrom(const SensorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SensorData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.SensorOutput sensorsOutput = 1;
  int sensorsoutput_size() const;
  void clear_sensorsoutput();
  static const int kSensorsOutputFieldNumber = 1;
  ::Cognata::SDK::SensorOutput* mutable_sensorsoutput(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SensorOutput >*
      mutable_sensorsoutput();
  const ::Cognata::SDK::SensorOutput& sensorsoutput(int index) const;
  ::Cognata::SDK::SensorOutput* add_sensorsoutput();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SensorOutput >&
      sensorsoutput() const;

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SensorData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SensorOutput > sensorsoutput_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class SensorsQueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SensorsQueryReport) */ {
 public:
  SensorsQueryReport();
  virtual ~SensorsQueryReport();

  SensorsQueryReport(const SensorsQueryReport& from);
  SensorsQueryReport(SensorsQueryReport&& from) noexcept
    : SensorsQueryReport() {
    *this = ::std::move(from);
  }

  inline SensorsQueryReport& operator=(const SensorsQueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorsQueryReport& operator=(SensorsQueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorsQueryReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorsQueryReport* internal_default_instance() {
    return reinterpret_cast<const SensorsQueryReport*>(
               &_SensorsQueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SensorsQueryReport* other);
  friend void swap(SensorsQueryReport& a, SensorsQueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorsQueryReport* New() const final {
    return CreateMaybeMessage<SensorsQueryReport>(nullptr);
  }

  SensorsQueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorsQueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorsQueryReport& from);
  void MergeFrom(const SensorsQueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorsQueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SensorsQueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.SensorQueryReport sensorsQueryReport = 1;
  int sensorsqueryreport_size() const;
  void clear_sensorsqueryreport();
  static const int kSensorsQueryReportFieldNumber = 1;
  ::Cognata::SDK::SensorQueryReport* mutable_sensorsqueryreport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SensorQueryReport >*
      mutable_sensorsqueryreport();
  const ::Cognata::SDK::SensorQueryReport& sensorsqueryreport(int index) const;
  ::Cognata::SDK::SensorQueryReport* add_sensorsqueryreport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SensorQueryReport >&
      sensorsqueryreport() const;

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SensorsQueryReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SensorQueryReport > sensorsqueryreport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class GlobalSensorsQueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GlobalSensorsQueryReport) */ {
 public:
  GlobalSensorsQueryReport();
  virtual ~GlobalSensorsQueryReport();

  GlobalSensorsQueryReport(const GlobalSensorsQueryReport& from);
  GlobalSensorsQueryReport(GlobalSensorsQueryReport&& from) noexcept
    : GlobalSensorsQueryReport() {
    *this = ::std::move(from);
  }

  inline GlobalSensorsQueryReport& operator=(const GlobalSensorsQueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSensorsQueryReport& operator=(GlobalSensorsQueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalSensorsQueryReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSensorsQueryReport* internal_default_instance() {
    return reinterpret_cast<const GlobalSensorsQueryReport*>(
               &_GlobalSensorsQueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GlobalSensorsQueryReport* other);
  friend void swap(GlobalSensorsQueryReport& a, GlobalSensorsQueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalSensorsQueryReport* New() const final {
    return CreateMaybeMessage<GlobalSensorsQueryReport>(nullptr);
  }

  GlobalSensorsQueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSensorsQueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalSensorsQueryReport& from);
  void MergeFrom(const GlobalSensorsQueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalSensorsQueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GlobalSensorsQueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.GlobalSensorQueryReport globalSensorQueryReport = 1;
  int globalsensorqueryreport_size() const;
  void clear_globalsensorqueryreport();
  static const int kGlobalSensorQueryReportFieldNumber = 1;
  ::Cognata::SDK::GlobalSensorQueryReport* mutable_globalsensorqueryreport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::GlobalSensorQueryReport >*
      mutable_globalsensorqueryreport();
  const ::Cognata::SDK::GlobalSensorQueryReport& globalsensorqueryreport(int index) const;
  ::Cognata::SDK::GlobalSensorQueryReport* add_globalsensorqueryreport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::GlobalSensorQueryReport >&
      globalsensorqueryreport() const;

  // @@protoc_insertion_point(class_scope:Cognata.SDK.GlobalSensorsQueryReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::GlobalSensorQueryReport > globalsensorqueryreport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class GlobalSensorQueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GlobalSensorQueryReport) */ {
 public:
  GlobalSensorQueryReport();
  virtual ~GlobalSensorQueryReport();

  GlobalSensorQueryReport(const GlobalSensorQueryReport& from);
  GlobalSensorQueryReport(GlobalSensorQueryReport&& from) noexcept
    : GlobalSensorQueryReport() {
    *this = ::std::move(from);
  }

  inline GlobalSensorQueryReport& operator=(const GlobalSensorQueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSensorQueryReport& operator=(GlobalSensorQueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalSensorQueryReport& default_instance();

  enum QueryTypeCase {
    kDOGTReport = 10,
    QUERYTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSensorQueryReport* internal_default_instance() {
    return reinterpret_cast<const GlobalSensorQueryReport*>(
               &_GlobalSensorQueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GlobalSensorQueryReport* other);
  friend void swap(GlobalSensorQueryReport& a, GlobalSensorQueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalSensorQueryReport* New() const final {
    return CreateMaybeMessage<GlobalSensorQueryReport>(nullptr);
  }

  GlobalSensorQueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSensorQueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalSensorQueryReport& from);
  void MergeFrom(const GlobalSensorQueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalSensorQueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GlobalSensorQueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint32 sensorID = 2;
  void clear_sensorid();
  static const int kSensorIDFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorid() const;
  void set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 fps = 4;
  void clear_fps();
  static const int kFpsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps() const;
  void set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .Cognata.SDK.DOGTConfig DOGTReport = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_dogtreport() const;
  PROTOBUF_DEPRECATED void clear_dogtreport();
  PROTOBUF_DEPRECATED static const int kDOGTReportFieldNumber = 10;
  PROTOBUF_DEPRECATED const ::Cognata::SDK::DOGTConfig& dogtreport() const;
  PROTOBUF_DEPRECATED ::Cognata::SDK::DOGTConfig* release_dogtreport();
  PROTOBUF_DEPRECATED ::Cognata::SDK::DOGTConfig* mutable_dogtreport();
  PROTOBUF_DEPRECATED void set_allocated_dogtreport(::Cognata::SDK::DOGTConfig* dogtreport);

  void clear_QueryType();
  QueryTypeCase QueryType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.GlobalSensorQueryReport)
 private:
  class HasBitSetters;
  void set_has_dogtreport();

  inline bool has_QueryType() const;
  inline void clear_has_QueryType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps_;
  union QueryTypeUnion {
    QueryTypeUnion() {}
    ::Cognata::SDK::DOGTConfig* dogtreport_;
  } QueryType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class SensorQueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SensorQueryReport) */ {
 public:
  SensorQueryReport();
  virtual ~SensorQueryReport();

  SensorQueryReport(const SensorQueryReport& from);
  SensorQueryReport(SensorQueryReport&& from) noexcept
    : SensorQueryReport() {
    *this = ::std::move(from);
  }

  inline SensorQueryReport& operator=(const SensorQueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorQueryReport& operator=(SensorQueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorQueryReport& default_instance();

  enum QueryTypeCase {
    kRgbCameraReport = 10,
    kLidarReport = 11,
    kRadarReport = 12,
    kGpsReport = 13,
    kRoiReport = 14,
    kE2CReport = 15,
    kLaneDetectorReport = 16,
    kSlInstanceReport = 17,
    kSlClassReport = 18,
    kCarTelemetriesReport = 19,
    kDepthCameraReport = 20,
    kThermalCameraReport = 21,
    kDOGTReport = 22,
    kSlMaterialReport = 23,
    kSlStructureReport = 24,
    QUERYTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorQueryReport* internal_default_instance() {
    return reinterpret_cast<const SensorQueryReport*>(
               &_SensorQueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SensorQueryReport* other);
  friend void swap(SensorQueryReport& a, SensorQueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorQueryReport* New() const final {
    return CreateMaybeMessage<SensorQueryReport>(nullptr);
  }

  SensorQueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorQueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorQueryReport& from);
  void MergeFrom(const SensorQueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorQueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SensorQueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .Cognata.SDK.Transform3 transform = 3;
  bool has_transform() const;
  void clear_transform();
  static const int kTransformFieldNumber = 3;
  const ::Cognata::SDK::Transform3& transform() const;
  ::Cognata::SDK::Transform3* release_transform();
  ::Cognata::SDK::Transform3* mutable_transform();
  void set_allocated_transform(::Cognata::SDK::Transform3* transform);

  // uint32 sensorID = 2;
  void clear_sensorid();
  static const int kSensorIDFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorid() const;
  void set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 fps = 4;
  void clear_fps();
  static const int kFpsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps() const;
  void set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .Cognata.SDK.RGBCameraConfig rgbCameraReport = 10;
  bool has_rgbcamerareport() const;
  void clear_rgbcamerareport();
  static const int kRgbCameraReportFieldNumber = 10;
  const ::Cognata::SDK::RGBCameraConfig& rgbcamerareport() const;
  ::Cognata::SDK::RGBCameraConfig* release_rgbcamerareport();
  ::Cognata::SDK::RGBCameraConfig* mutable_rgbcamerareport();
  void set_allocated_rgbcamerareport(::Cognata::SDK::RGBCameraConfig* rgbcamerareport);

  // .Cognata.SDK.LidarConfig lidarReport = 11;
  bool has_lidarreport() const;
  void clear_lidarreport();
  static const int kLidarReportFieldNumber = 11;
  const ::Cognata::SDK::LidarConfig& lidarreport() const;
  ::Cognata::SDK::LidarConfig* release_lidarreport();
  ::Cognata::SDK::LidarConfig* mutable_lidarreport();
  void set_allocated_lidarreport(::Cognata::SDK::LidarConfig* lidarreport);

  // .Cognata.SDK.RadarConfig radarReport = 12;
  bool has_radarreport() const;
  void clear_radarreport();
  static const int kRadarReportFieldNumber = 12;
  const ::Cognata::SDK::RadarConfig& radarreport() const;
  ::Cognata::SDK::RadarConfig* release_radarreport();
  ::Cognata::SDK::RadarConfig* mutable_radarreport();
  void set_allocated_radarreport(::Cognata::SDK::RadarConfig* radarreport);

  // .Cognata.SDK.GPSConfig gpsReport = 13;
  bool has_gpsreport() const;
  void clear_gpsreport();
  static const int kGpsReportFieldNumber = 13;
  const ::Cognata::SDK::GPSConfig& gpsreport() const;
  ::Cognata::SDK::GPSConfig* release_gpsreport();
  ::Cognata::SDK::GPSConfig* mutable_gpsreport();
  void set_allocated_gpsreport(::Cognata::SDK::GPSConfig* gpsreport);

  // .Cognata.SDK.ROIConfig roiReport = 14;
  bool has_roireport() const;
  void clear_roireport();
  static const int kRoiReportFieldNumber = 14;
  const ::Cognata::SDK::ROIConfig& roireport() const;
  ::Cognata::SDK::ROIConfig* release_roireport();
  ::Cognata::SDK::ROIConfig* mutable_roireport();
  void set_allocated_roireport(::Cognata::SDK::ROIConfig* roireport);

  // .Cognata.SDK.E2CConfig e2cReport = 15;
  bool has_e2creport() const;
  void clear_e2creport();
  static const int kE2CReportFieldNumber = 15;
  const ::Cognata::SDK::E2CConfig& e2creport() const;
  ::Cognata::SDK::E2CConfig* release_e2creport();
  ::Cognata::SDK::E2CConfig* mutable_e2creport();
  void set_allocated_e2creport(::Cognata::SDK::E2CConfig* e2creport);

  // .Cognata.SDK.LaneDetectorConfig laneDetectorReport = 16;
  bool has_lanedetectorreport() const;
  void clear_lanedetectorreport();
  static const int kLaneDetectorReportFieldNumber = 16;
  const ::Cognata::SDK::LaneDetectorConfig& lanedetectorreport() const;
  ::Cognata::SDK::LaneDetectorConfig* release_lanedetectorreport();
  ::Cognata::SDK::LaneDetectorConfig* mutable_lanedetectorreport();
  void set_allocated_lanedetectorreport(::Cognata::SDK::LaneDetectorConfig* lanedetectorreport);

  // .Cognata.SDK.SLInstanceCameraConfig slInstanceReport = 17;
  bool has_slinstancereport() const;
  void clear_slinstancereport();
  static const int kSlInstanceReportFieldNumber = 17;
  const ::Cognata::SDK::SLInstanceCameraConfig& slinstancereport() const;
  ::Cognata::SDK::SLInstanceCameraConfig* release_slinstancereport();
  ::Cognata::SDK::SLInstanceCameraConfig* mutable_slinstancereport();
  void set_allocated_slinstancereport(::Cognata::SDK::SLInstanceCameraConfig* slinstancereport);

  // .Cognata.SDK.SLClassCameraConfig slClassReport = 18;
  bool has_slclassreport() const;
  void clear_slclassreport();
  static const int kSlClassReportFieldNumber = 18;
  const ::Cognata::SDK::SLClassCameraConfig& slclassreport() const;
  ::Cognata::SDK::SLClassCameraConfig* release_slclassreport();
  ::Cognata::SDK::SLClassCameraConfig* mutable_slclassreport();
  void set_allocated_slclassreport(::Cognata::SDK::SLClassCameraConfig* slclassreport);

  // .Cognata.SDK.CarTelemetriesConfig carTelemetriesReport = 19;
  bool has_cartelemetriesreport() const;
  void clear_cartelemetriesreport();
  static const int kCarTelemetriesReportFieldNumber = 19;
  const ::Cognata::SDK::CarTelemetriesConfig& cartelemetriesreport() const;
  ::Cognata::SDK::CarTelemetriesConfig* release_cartelemetriesreport();
  ::Cognata::SDK::CarTelemetriesConfig* mutable_cartelemetriesreport();
  void set_allocated_cartelemetriesreport(::Cognata::SDK::CarTelemetriesConfig* cartelemetriesreport);

  // .Cognata.SDK.DepthCameraConfig depthCameraReport = 20;
  bool has_depthcamerareport() const;
  void clear_depthcamerareport();
  static const int kDepthCameraReportFieldNumber = 20;
  const ::Cognata::SDK::DepthCameraConfig& depthcamerareport() const;
  ::Cognata::SDK::DepthCameraConfig* release_depthcamerareport();
  ::Cognata::SDK::DepthCameraConfig* mutable_depthcamerareport();
  void set_allocated_depthcamerareport(::Cognata::SDK::DepthCameraConfig* depthcamerareport);

  // .Cognata.SDK.ThermalCameraConfig thermalCameraReport = 21;
  bool has_thermalcamerareport() const;
  void clear_thermalcamerareport();
  static const int kThermalCameraReportFieldNumber = 21;
  const ::Cognata::SDK::ThermalCameraConfig& thermalcamerareport() const;
  ::Cognata::SDK::ThermalCameraConfig* release_thermalcamerareport();
  ::Cognata::SDK::ThermalCameraConfig* mutable_thermalcamerareport();
  void set_allocated_thermalcamerareport(::Cognata::SDK::ThermalCameraConfig* thermalcamerareport);

  // .Cognata.SDK.DOGTConfig DOGTReport = 22;
  bool has_dogtreport() const;
  void clear_dogtreport();
  static const int kDOGTReportFieldNumber = 22;
  const ::Cognata::SDK::DOGTConfig& dogtreport() const;
  ::Cognata::SDK::DOGTConfig* release_dogtreport();
  ::Cognata::SDK::DOGTConfig* mutable_dogtreport();
  void set_allocated_dogtreport(::Cognata::SDK::DOGTConfig* dogtreport);

  // .Cognata.SDK.SLMaterialCameraConfig slMaterialReport = 23;
  bool has_slmaterialreport() const;
  void clear_slmaterialreport();
  static const int kSlMaterialReportFieldNumber = 23;
  const ::Cognata::SDK::SLMaterialCameraConfig& slmaterialreport() const;
  ::Cognata::SDK::SLMaterialCameraConfig* release_slmaterialreport();
  ::Cognata::SDK::SLMaterialCameraConfig* mutable_slmaterialreport();
  void set_allocated_slmaterialreport(::Cognata::SDK::SLMaterialCameraConfig* slmaterialreport);

  // .Cognata.SDK.SLStructureCameraConfig slStructureReport = 24;
  bool has_slstructurereport() const;
  void clear_slstructurereport();
  static const int kSlStructureReportFieldNumber = 24;
  const ::Cognata::SDK::SLStructureCameraConfig& slstructurereport() const;
  ::Cognata::SDK::SLStructureCameraConfig* release_slstructurereport();
  ::Cognata::SDK::SLStructureCameraConfig* mutable_slstructurereport();
  void set_allocated_slstructurereport(::Cognata::SDK::SLStructureCameraConfig* slstructurereport);

  void clear_QueryType();
  QueryTypeCase QueryType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.SensorQueryReport)
 private:
  class HasBitSetters;
  void set_has_rgbcamerareport();
  void set_has_lidarreport();
  void set_has_radarreport();
  void set_has_gpsreport();
  void set_has_roireport();
  void set_has_e2creport();
  void set_has_lanedetectorreport();
  void set_has_slinstancereport();
  void set_has_slclassreport();
  void set_has_cartelemetriesreport();
  void set_has_depthcamerareport();
  void set_has_thermalcamerareport();
  void set_has_dogtreport();
  void set_has_slmaterialreport();
  void set_has_slstructurereport();

  inline bool has_QueryType() const;
  inline void clear_has_QueryType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Cognata::SDK::Transform3* transform_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fps_;
  union QueryTypeUnion {
    QueryTypeUnion() {}
    ::Cognata::SDK::RGBCameraConfig* rgbcamerareport_;
    ::Cognata::SDK::LidarConfig* lidarreport_;
    ::Cognata::SDK::RadarConfig* radarreport_;
    ::Cognata::SDK::GPSConfig* gpsreport_;
    ::Cognata::SDK::ROIConfig* roireport_;
    ::Cognata::SDK::E2CConfig* e2creport_;
    ::Cognata::SDK::LaneDetectorConfig* lanedetectorreport_;
    ::Cognata::SDK::SLInstanceCameraConfig* slinstancereport_;
    ::Cognata::SDK::SLClassCameraConfig* slclassreport_;
    ::Cognata::SDK::CarTelemetriesConfig* cartelemetriesreport_;
    ::Cognata::SDK::DepthCameraConfig* depthcamerareport_;
    ::Cognata::SDK::ThermalCameraConfig* thermalcamerareport_;
    ::Cognata::SDK::DOGTConfig* dogtreport_;
    ::Cognata::SDK::SLMaterialCameraConfig* slmaterialreport_;
    ::Cognata::SDK::SLStructureCameraConfig* slstructurereport_;
  } QueryType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class CarsQueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.CarsQueryReport) */ {
 public:
  CarsQueryReport();
  virtual ~CarsQueryReport();

  CarsQueryReport(const CarsQueryReport& from);
  CarsQueryReport(CarsQueryReport&& from) noexcept
    : CarsQueryReport() {
    *this = ::std::move(from);
  }

  inline CarsQueryReport& operator=(const CarsQueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarsQueryReport& operator=(CarsQueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarsQueryReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarsQueryReport* internal_default_instance() {
    return reinterpret_cast<const CarsQueryReport*>(
               &_CarsQueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CarsQueryReport* other);
  friend void swap(CarsQueryReport& a, CarsQueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarsQueryReport* New() const final {
    return CreateMaybeMessage<CarsQueryReport>(nullptr);
  }

  CarsQueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarsQueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarsQueryReport& from);
  void MergeFrom(const CarsQueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarsQueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.CarsQueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.CarQueryReport carQueryReport = 1;
  int carqueryreport_size() const;
  void clear_carqueryreport();
  static const int kCarQueryReportFieldNumber = 1;
  ::Cognata::SDK::CarQueryReport* mutable_carqueryreport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::CarQueryReport >*
      mutable_carqueryreport();
  const ::Cognata::SDK::CarQueryReport& carqueryreport(int index) const;
  ::Cognata::SDK::CarQueryReport* add_carqueryreport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::CarQueryReport >&
      carqueryreport() const;

  // @@protoc_insertion_point(class_scope:Cognata.SDK.CarsQueryReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::CarQueryReport > carqueryreport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class CarQueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.CarQueryReport) */ {
 public:
  CarQueryReport();
  virtual ~CarQueryReport();

  CarQueryReport(const CarQueryReport& from);
  CarQueryReport(CarQueryReport&& from) noexcept
    : CarQueryReport() {
    *this = ::std::move(from);
  }

  inline CarQueryReport& operator=(const CarQueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarQueryReport& operator=(CarQueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarQueryReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarQueryReport* internal_default_instance() {
    return reinterpret_cast<const CarQueryReport*>(
               &_CarQueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CarQueryReport* other);
  friend void swap(CarQueryReport& a, CarQueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarQueryReport* New() const final {
    return CreateMaybeMessage<CarQueryReport>(nullptr);
  }

  CarQueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarQueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarQueryReport& from);
  void MergeFrom(const CarQueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarQueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.CarQueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string brand = 2;
  void clear_brand();
  static const int kBrandFieldNumber = 2;
  const std::string& brand() const;
  void set_brand(const std::string& value);
  void set_brand(std::string&& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  std::string* mutable_brand();
  std::string* release_brand();
  void set_allocated_brand(std::string* brand);

  // .Cognata.SDK.SDKVector3 velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  const ::Cognata::SDK::SDKVector3& velocity() const;
  ::Cognata::SDK::SDKVector3* release_velocity();
  ::Cognata::SDK::SDKVector3* mutable_velocity();
  void set_allocated_velocity(::Cognata::SDK::SDKVector3* velocity);

  // .Cognata.SDK.SDKBoundingBox boundingBox = 5;
  bool has_boundingbox() const;
  void clear_boundingbox();
  static const int kBoundingBoxFieldNumber = 5;
  const ::Cognata::SDK::SDKBoundingBox& boundingbox() const;
  ::Cognata::SDK::SDKBoundingBox* release_boundingbox();
  ::Cognata::SDK::SDKBoundingBox* mutable_boundingbox();
  void set_allocated_boundingbox(::Cognata::SDK::SDKBoundingBox* boundingbox);

  // .Cognata.SDK.LocationParams locationParams = 6;
  bool has_locationparams() const;
  void clear_locationparams();
  static const int kLocationParamsFieldNumber = 6;
  const ::Cognata::SDK::LocationParams& locationparams() const;
  ::Cognata::SDK::LocationParams* release_locationparams();
  ::Cognata::SDK::LocationParams* mutable_locationparams();
  void set_allocated_locationparams(::Cognata::SDK::LocationParams* locationparams);

  // .Cognata.SDK.BehaviourParams behaviourParams = 7;
  bool has_behaviourparams() const;
  void clear_behaviourparams();
  static const int kBehaviourParamsFieldNumber = 7;
  const ::Cognata::SDK::BehaviourParams& behaviourparams() const;
  ::Cognata::SDK::BehaviourParams* release_behaviourparams();
  ::Cognata::SDK::BehaviourParams* mutable_behaviourparams();
  void set_allocated_behaviourparams(::Cognata::SDK::BehaviourParams* behaviourparams);

  // .Cognata.SDK.SDKVector3 acceleration = 8;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 8;
  const ::Cognata::SDK::SDKVector3& acceleration() const;
  ::Cognata::SDK::SDKVector3* release_acceleration();
  ::Cognata::SDK::SDKVector3* mutable_acceleration();
  void set_allocated_acceleration(::Cognata::SDK::SDKVector3* acceleration);

  // .Cognata.SDK.SpawnedObject sdkSpawnedObject = 9;
  bool has_sdkspawnedobject() const;
  void clear_sdkspawnedobject();
  static const int kSdkSpawnedObjectFieldNumber = 9;
  const ::Cognata::SDK::SpawnedObject& sdkspawnedobject() const;
  ::Cognata::SDK::SpawnedObject* release_sdkspawnedobject();
  ::Cognata::SDK::SpawnedObject* mutable_sdkspawnedobject();
  void set_allocated_sdkspawnedobject(::Cognata::SDK::SpawnedObject* sdkspawnedobject);

  // uint32 roiObjectId = 4;
  void clear_roiobjectid();
  static const int kRoiObjectIdFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 roiobjectid() const;
  void set_roiobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.CarQueryReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::Cognata::SDK::SDKVector3* velocity_;
  ::Cognata::SDK::SDKBoundingBox* boundingbox_;
  ::Cognata::SDK::LocationParams* locationparams_;
  ::Cognata::SDK::BehaviourParams* behaviourparams_;
  ::Cognata::SDK::SDKVector3* acceleration_;
  ::Cognata::SDK::SpawnedObject* sdkspawnedobject_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roiobjectid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class SpawnedObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SpawnedObject) */ {
 public:
  SpawnedObject();
  virtual ~SpawnedObject();

  SpawnedObject(const SpawnedObject& from);
  SpawnedObject(SpawnedObject&& from) noexcept
    : SpawnedObject() {
    *this = ::std::move(from);
  }

  inline SpawnedObject& operator=(const SpawnedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnedObject& operator=(SpawnedObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpawnedObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpawnedObject* internal_default_instance() {
    return reinterpret_cast<const SpawnedObject*>(
               &_SpawnedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SpawnedObject* other);
  friend void swap(SpawnedObject& a, SpawnedObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpawnedObject* New() const final {
    return CreateMaybeMessage<SpawnedObject>(nullptr);
  }

  SpawnedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpawnedObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpawnedObject& from);
  void MergeFrom(const SpawnedObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnedObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SpawnedObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string clientName = 1;
  void clear_clientname();
  static const int kClientNameFieldNumber = 1;
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);

  // string clientObjectID = 2;
  void clear_clientobjectid();
  static const int kClientObjectIDFieldNumber = 2;
  const std::string& clientobjectid() const;
  void set_clientobjectid(const std::string& value);
  void set_clientobjectid(std::string&& value);
  void set_clientobjectid(const char* value);
  void set_clientobjectid(const char* value, size_t size);
  std::string* mutable_clientobjectid();
  std::string* release_clientobjectid();
  void set_allocated_clientobjectid(std::string* clientobjectid);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SpawnedObject)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientobjectid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class MovingObjectsQueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.MovingObjectsQueryReport) */ {
 public:
  MovingObjectsQueryReport();
  virtual ~MovingObjectsQueryReport();

  MovingObjectsQueryReport(const MovingObjectsQueryReport& from);
  MovingObjectsQueryReport(MovingObjectsQueryReport&& from) noexcept
    : MovingObjectsQueryReport() {
    *this = ::std::move(from);
  }

  inline MovingObjectsQueryReport& operator=(const MovingObjectsQueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovingObjectsQueryReport& operator=(MovingObjectsQueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovingObjectsQueryReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MovingObjectsQueryReport* internal_default_instance() {
    return reinterpret_cast<const MovingObjectsQueryReport*>(
               &_MovingObjectsQueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(MovingObjectsQueryReport* other);
  friend void swap(MovingObjectsQueryReport& a, MovingObjectsQueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MovingObjectsQueryReport* New() const final {
    return CreateMaybeMessage<MovingObjectsQueryReport>(nullptr);
  }

  MovingObjectsQueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovingObjectsQueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovingObjectsQueryReport& from);
  void MergeFrom(const MovingObjectsQueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovingObjectsQueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.MovingObjectsQueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.MovingObjectQueryReport movingObjectQueryReport = 1;
  int movingobjectqueryreport_size() const;
  void clear_movingobjectqueryreport();
  static const int kMovingObjectQueryReportFieldNumber = 1;
  ::Cognata::SDK::MovingObjectQueryReport* mutable_movingobjectqueryreport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::MovingObjectQueryReport >*
      mutable_movingobjectqueryreport();
  const ::Cognata::SDK::MovingObjectQueryReport& movingobjectqueryreport(int index) const;
  ::Cognata::SDK::MovingObjectQueryReport* add_movingobjectqueryreport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::MovingObjectQueryReport >&
      movingobjectqueryreport() const;

  // @@protoc_insertion_point(class_scope:Cognata.SDK.MovingObjectsQueryReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::MovingObjectQueryReport > movingobjectqueryreport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class MovingObjectQueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.MovingObjectQueryReport) */ {
 public:
  MovingObjectQueryReport();
  virtual ~MovingObjectQueryReport();

  MovingObjectQueryReport(const MovingObjectQueryReport& from);
  MovingObjectQueryReport(MovingObjectQueryReport&& from) noexcept
    : MovingObjectQueryReport() {
    *this = ::std::move(from);
  }

  inline MovingObjectQueryReport& operator=(const MovingObjectQueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovingObjectQueryReport& operator=(MovingObjectQueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovingObjectQueryReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MovingObjectQueryReport* internal_default_instance() {
    return reinterpret_cast<const MovingObjectQueryReport*>(
               &_MovingObjectQueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(MovingObjectQueryReport* other);
  friend void swap(MovingObjectQueryReport& a, MovingObjectQueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MovingObjectQueryReport* New() const final {
    return CreateMaybeMessage<MovingObjectQueryReport>(nullptr);
  }

  MovingObjectQueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovingObjectQueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovingObjectQueryReport& from);
  void MergeFrom(const MovingObjectQueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovingObjectQueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.MovingObjectQueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string brand = 2;
  void clear_brand();
  static const int kBrandFieldNumber = 2;
  const std::string& brand() const;
  void set_brand(const std::string& value);
  void set_brand(std::string&& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  std::string* mutable_brand();
  std::string* release_brand();
  void set_allocated_brand(std::string* brand);

  // .Cognata.SDK.SDKBoundingBox boundingBox = 5;
  bool has_boundingbox() const;
  void clear_boundingbox();
  static const int kBoundingBoxFieldNumber = 5;
  const ::Cognata::SDK::SDKBoundingBox& boundingbox() const;
  ::Cognata::SDK::SDKBoundingBox* release_boundingbox();
  ::Cognata::SDK::SDKBoundingBox* mutable_boundingbox();
  void set_allocated_boundingbox(::Cognata::SDK::SDKBoundingBox* boundingbox);

  // .Cognata.SDK.LocationParams locationParams = 6;
  bool has_locationparams() const;
  void clear_locationparams();
  static const int kLocationParamsFieldNumber = 6;
  const ::Cognata::SDK::LocationParams& locationparams() const;
  ::Cognata::SDK::LocationParams* release_locationparams();
  ::Cognata::SDK::LocationParams* mutable_locationparams();
  void set_allocated_locationparams(::Cognata::SDK::LocationParams* locationparams);

  // .Cognata.SDK.Path path = 7;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 7;
  const ::Cognata::SDK::Path& path() const;
  ::Cognata::SDK::Path* release_path();
  ::Cognata::SDK::Path* mutable_path();
  void set_allocated_path(::Cognata::SDK::Path* path);

  // uint32 roiObjectId = 4;
  void clear_roiobjectid();
  static const int kRoiObjectIdFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 roiobjectid() const;
  void set_roiobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.MovingObjectQueryReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::Cognata::SDK::SDKBoundingBox* boundingbox_;
  ::Cognata::SDK::LocationParams* locationparams_;
  ::Cognata::SDK::Path* path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roiobjectid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class LocationParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.LocationParams) */ {
 public:
  LocationParams();
  virtual ~LocationParams();

  LocationParams(const LocationParams& from);
  LocationParams(LocationParams&& from) noexcept
    : LocationParams() {
    *this = ::std::move(from);
  }

  inline LocationParams& operator=(const LocationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationParams& operator=(LocationParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationParams* internal_default_instance() {
    return reinterpret_cast<const LocationParams*>(
               &_LocationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(LocationParams* other);
  friend void swap(LocationParams& a, LocationParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationParams* New() const final {
    return CreateMaybeMessage<LocationParams>(nullptr);
  }

  LocationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationParams& from);
  void MergeFrom(const LocationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.LocationParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roadID = 1;
  void clear_roadid();
  static const int kRoadIDFieldNumber = 1;
  const std::string& roadid() const;
  void set_roadid(const std::string& value);
  void set_roadid(std::string&& value);
  void set_roadid(const char* value);
  void set_roadid(const char* value, size_t size);
  std::string* mutable_roadid();
  std::string* release_roadid();
  void set_allocated_roadid(std::string* roadid);

  // int32 laneID = 2;
  void clear_laneid();
  static const int kLaneIDFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 laneid() const;
  void set_laneid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.LocationParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roadid_;
  ::PROTOBUF_NAMESPACE_ID::int32 laneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Path* other);
  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.SDKVector2 wayPoints = 1;
  int waypoints_size() const;
  void clear_waypoints();
  static const int kWayPointsFieldNumber = 1;
  ::Cognata::SDK::SDKVector2* mutable_waypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector2 >*
      mutable_waypoints();
  const ::Cognata::SDK::SDKVector2& waypoints(int index) const;
  ::Cognata::SDK::SDKVector2* add_waypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector2 >&
      waypoints() const;

  // @@protoc_insertion_point(class_scope:Cognata.SDK.Path)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector2 > waypoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class BehaviourParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.BehaviourParams) */ {
 public:
  BehaviourParams();
  virtual ~BehaviourParams();

  BehaviourParams(const BehaviourParams& from);
  BehaviourParams(BehaviourParams&& from) noexcept
    : BehaviourParams() {
    *this = ::std::move(from);
  }

  inline BehaviourParams& operator=(const BehaviourParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline BehaviourParams& operator=(BehaviourParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BehaviourParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BehaviourParams* internal_default_instance() {
    return reinterpret_cast<const BehaviourParams*>(
               &_BehaviourParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(BehaviourParams* other);
  friend void swap(BehaviourParams& a, BehaviourParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BehaviourParams* New() const final {
    return CreateMaybeMessage<BehaviourParams>(nullptr);
  }

  BehaviourParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BehaviourParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BehaviourParams& from);
  void MergeFrom(const BehaviourParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BehaviourParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.BehaviourParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float politeness = 1;
  void clear_politeness();
  static const int kPolitenessFieldNumber = 1;
  float politeness() const;
  void set_politeness(float value);

  // float safetyTime = 2;
  void clear_safetytime();
  static const int kSafetyTimeFieldNumber = 2;
  float safetytime() const;
  void set_safetytime(float value);

  // float comfortableBraking = 3;
  void clear_comfortablebraking();
  static const int kComfortableBrakingFieldNumber = 3;
  float comfortablebraking() const;
  void set_comfortablebraking(float value);

  // float desiredSpeed = 4;
  void clear_desiredspeed();
  static const int kDesiredSpeedFieldNumber = 4;
  float desiredspeed() const;
  void set_desiredspeed(float value);

  // float desiredInterval = 5;
  void clear_desiredinterval();
  static const int kDesiredIntervalFieldNumber = 5;
  float desiredinterval() const;
  void set_desiredinterval(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.BehaviourParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float politeness_;
  float safetytime_;
  float comfortablebraking_;
  float desiredspeed_;
  float desiredinterval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class TerrainQueryReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.TerrainQueryReport) */ {
 public:
  TerrainQueryReport();
  virtual ~TerrainQueryReport();

  TerrainQueryReport(const TerrainQueryReport& from);
  TerrainQueryReport(TerrainQueryReport&& from) noexcept
    : TerrainQueryReport() {
    *this = ::std::move(from);
  }

  inline TerrainQueryReport& operator=(const TerrainQueryReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerrainQueryReport& operator=(TerrainQueryReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TerrainQueryReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TerrainQueryReport* internal_default_instance() {
    return reinterpret_cast<const TerrainQueryReport*>(
               &_TerrainQueryReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(TerrainQueryReport* other);
  friend void swap(TerrainQueryReport& a, TerrainQueryReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TerrainQueryReport* New() const final {
    return CreateMaybeMessage<TerrainQueryReport>(nullptr);
  }

  TerrainQueryReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TerrainQueryReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TerrainQueryReport& from);
  void MergeFrom(const TerrainQueryReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerrainQueryReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.TerrainQueryReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string terrainType = 1;
  void clear_terraintype();
  static const int kTerrainTypeFieldNumber = 1;
  const std::string& terraintype() const;
  void set_terraintype(const std::string& value);
  void set_terraintype(std::string&& value);
  void set_terraintype(const char* value);
  void set_terraintype(const char* value, size_t size);
  std::string* mutable_terraintype();
  std::string* release_terraintype();
  void set_allocated_terraintype(std::string* terraintype);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.TerrainQueryReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terraintype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class LoadingStateReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.LoadingStateReport) */ {
 public:
  LoadingStateReport();
  virtual ~LoadingStateReport();

  LoadingStateReport(const LoadingStateReport& from);
  LoadingStateReport(LoadingStateReport&& from) noexcept
    : LoadingStateReport() {
    *this = ::std::move(from);
  }

  inline LoadingStateReport& operator=(const LoadingStateReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadingStateReport& operator=(LoadingStateReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadingStateReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadingStateReport* internal_default_instance() {
    return reinterpret_cast<const LoadingStateReport*>(
               &_LoadingStateReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(LoadingStateReport* other);
  friend void swap(LoadingStateReport& a, LoadingStateReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadingStateReport* New() const final {
    return CreateMaybeMessage<LoadingStateReport>(nullptr);
  }

  LoadingStateReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadingStateReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadingStateReport& from);
  void MergeFrom(const LoadingStateReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadingStateReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.LoadingStateReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoadingStateReport_stateType stateType;
  static constexpr stateType init =
    LoadingStateReport_stateType_init;
  static constexpr stateType Terrain =
    LoadingStateReport_stateType_Terrain;
  static constexpr stateType SpawningEgoCar =
    LoadingStateReport_stateType_SpawningEgoCar;
  static constexpr stateType Sensors =
    LoadingStateReport_stateType_Sensors;
  static constexpr stateType SpawningCars =
    LoadingStateReport_stateType_SpawningCars;
  static constexpr stateType SpawningPedestrians =
    LoadingStateReport_stateType_SpawningPedestrians;
  static constexpr stateType Done =
    LoadingStateReport_stateType_Done;
  static inline bool stateType_IsValid(int value) {
    return LoadingStateReport_stateType_IsValid(value);
  }
  static constexpr stateType stateType_MIN =
    LoadingStateReport_stateType_stateType_MIN;
  static constexpr stateType stateType_MAX =
    LoadingStateReport_stateType_stateType_MAX;
  static constexpr int stateType_ARRAYSIZE =
    LoadingStateReport_stateType_stateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  stateType_descriptor() {
    return LoadingStateReport_stateType_descriptor();
  }
  template<typename T>
  static inline const std::string& stateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, stateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function stateType_Name.");
    return LoadingStateReport_stateType_Name(enum_t_value);
  }
  static inline bool stateType_Parse(const std::string& name,
      stateType* value) {
    return LoadingStateReport_stateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Cognata.SDK.LoadingStateReport.stateType state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::Cognata::SDK::LoadingStateReport_stateType state() const;
  void set_state(::Cognata::SDK::LoadingStateReport_stateType value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.LoadingStateReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class SensorOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SensorOutput) */ {
 public:
  SensorOutput();
  virtual ~SensorOutput();

  SensorOutput(const SensorOutput& from);
  SensorOutput(SensorOutput&& from) noexcept
    : SensorOutput() {
    *this = ::std::move(from);
  }

  inline SensorOutput& operator=(const SensorOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorOutput& operator=(SensorOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorOutput& default_instance();

  enum SensorTypeCase {
    kRgbCameraOutput = 10,
    kRoiOutput = 11,
    kGpsOutput = 12,
    kWakeupOutput = 13,
    kLidarOutput = 14,
    kMsgToClientOutput = 15,
    kLaneDetectorOutput = 16,
    kSemanticInstanceLabelingOutput = 17,
    kSemanticClassLabelingOutput = 18,
    kCarTelemetriesOutput = 19,
    kDepthCameraOutput = 20,
    kRadarOutput = 21,
    kSemanticMaterialLabelingOutput = 22,
    kSemanticStructureLabelingOutput = 23,
    kDynamicObjectGroundTruthOutput = 40,
    kCarsListOutput = 41,
    kThermalCameraOutput = 42,
    SENSORTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorOutput* internal_default_instance() {
    return reinterpret_cast<const SensorOutput*>(
               &_SensorOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SensorOutput* other);
  friend void swap(SensorOutput& a, SensorOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorOutput* New() const final {
    return CreateMaybeMessage<SensorOutput>(nullptr);
  }

  SensorOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorOutput& from);
  void MergeFrom(const SensorOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SensorOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float outputTime = 1;
  void clear_outputtime();
  static const int kOutputTimeFieldNumber = 1;
  float outputtime() const;
  void set_outputtime(float value);

  // uint32 outputFrameNum = 2;
  void clear_outputframenum();
  static const int kOutputFrameNumFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputframenum() const;
  void set_outputframenum(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 outputSensorID = 3;
  void clear_outputsensorid();
  static const int kOutputSensorIDFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputsensorid() const;
  void set_outputsensorid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 outputVehicleID = 4;
  void clear_outputvehicleid();
  static const int kOutputVehicleIDFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputvehicleid() const;
  void set_outputvehicleid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .Cognata.SDK.RGBCameraOutput rgbCameraOutput = 10;
  bool has_rgbcameraoutput() const;
  void clear_rgbcameraoutput();
  static const int kRgbCameraOutputFieldNumber = 10;
  const ::Cognata::SDK::RGBCameraOutput& rgbcameraoutput() const;
  ::Cognata::SDK::RGBCameraOutput* release_rgbcameraoutput();
  ::Cognata::SDK::RGBCameraOutput* mutable_rgbcameraoutput();
  void set_allocated_rgbcameraoutput(::Cognata::SDK::RGBCameraOutput* rgbcameraoutput);

  // .Cognata.SDK.ROIOutput roiOutput = 11;
  bool has_roioutput() const;
  void clear_roioutput();
  static const int kRoiOutputFieldNumber = 11;
  const ::Cognata::SDK::ROIOutput& roioutput() const;
  ::Cognata::SDK::ROIOutput* release_roioutput();
  ::Cognata::SDK::ROIOutput* mutable_roioutput();
  void set_allocated_roioutput(::Cognata::SDK::ROIOutput* roioutput);

  // .Cognata.SDK.GPSOutput gpsOutput = 12;
  bool has_gpsoutput() const;
  void clear_gpsoutput();
  static const int kGpsOutputFieldNumber = 12;
  const ::Cognata::SDK::GPSOutput& gpsoutput() const;
  ::Cognata::SDK::GPSOutput* release_gpsoutput();
  ::Cognata::SDK::GPSOutput* mutable_gpsoutput();
  void set_allocated_gpsoutput(::Cognata::SDK::GPSOutput* gpsoutput);

  // .Cognata.SDK.WakeupOutput wakeupOutput = 13;
  bool has_wakeupoutput() const;
  void clear_wakeupoutput();
  static const int kWakeupOutputFieldNumber = 13;
  const ::Cognata::SDK::WakeupOutput& wakeupoutput() const;
  ::Cognata::SDK::WakeupOutput* release_wakeupoutput();
  ::Cognata::SDK::WakeupOutput* mutable_wakeupoutput();
  void set_allocated_wakeupoutput(::Cognata::SDK::WakeupOutput* wakeupoutput);

  // .Cognata.SDK.LidarOutput lidarOutput = 14;
  bool has_lidaroutput() const;
  void clear_lidaroutput();
  static const int kLidarOutputFieldNumber = 14;
  const ::Cognata::SDK::LidarOutput& lidaroutput() const;
  ::Cognata::SDK::LidarOutput* release_lidaroutput();
  ::Cognata::SDK::LidarOutput* mutable_lidaroutput();
  void set_allocated_lidaroutput(::Cognata::SDK::LidarOutput* lidaroutput);

  // .Cognata.SDK.E2COutput msgToClientOutput = 15;
  bool has_msgtoclientoutput() const;
  void clear_msgtoclientoutput();
  static const int kMsgToClientOutputFieldNumber = 15;
  const ::Cognata::SDK::E2COutput& msgtoclientoutput() const;
  ::Cognata::SDK::E2COutput* release_msgtoclientoutput();
  ::Cognata::SDK::E2COutput* mutable_msgtoclientoutput();
  void set_allocated_msgtoclientoutput(::Cognata::SDK::E2COutput* msgtoclientoutput);

  // .Cognata.SDK.LaneDetectorOutput laneDetectorOutput = 16;
  bool has_lanedetectoroutput() const;
  void clear_lanedetectoroutput();
  static const int kLaneDetectorOutputFieldNumber = 16;
  const ::Cognata::SDK::LaneDetectorOutput& lanedetectoroutput() const;
  ::Cognata::SDK::LaneDetectorOutput* release_lanedetectoroutput();
  ::Cognata::SDK::LaneDetectorOutput* mutable_lanedetectoroutput();
  void set_allocated_lanedetectoroutput(::Cognata::SDK::LaneDetectorOutput* lanedetectoroutput);

  // .Cognata.SDK.SemanticInstanceLabelingOutput semanticInstanceLabelingOutput = 17;
  bool has_semanticinstancelabelingoutput() const;
  void clear_semanticinstancelabelingoutput();
  static const int kSemanticInstanceLabelingOutputFieldNumber = 17;
  const ::Cognata::SDK::SemanticInstanceLabelingOutput& semanticinstancelabelingoutput() const;
  ::Cognata::SDK::SemanticInstanceLabelingOutput* release_semanticinstancelabelingoutput();
  ::Cognata::SDK::SemanticInstanceLabelingOutput* mutable_semanticinstancelabelingoutput();
  void set_allocated_semanticinstancelabelingoutput(::Cognata::SDK::SemanticInstanceLabelingOutput* semanticinstancelabelingoutput);

  // .Cognata.SDK.SemanticClassLabelingOutput semanticClassLabelingOutput = 18;
  bool has_semanticclasslabelingoutput() const;
  void clear_semanticclasslabelingoutput();
  static const int kSemanticClassLabelingOutputFieldNumber = 18;
  const ::Cognata::SDK::SemanticClassLabelingOutput& semanticclasslabelingoutput() const;
  ::Cognata::SDK::SemanticClassLabelingOutput* release_semanticclasslabelingoutput();
  ::Cognata::SDK::SemanticClassLabelingOutput* mutable_semanticclasslabelingoutput();
  void set_allocated_semanticclasslabelingoutput(::Cognata::SDK::SemanticClassLabelingOutput* semanticclasslabelingoutput);

  // .Cognata.SDK.CarTelemetriesOutput carTelemetriesOutput = 19;
  bool has_cartelemetriesoutput() const;
  void clear_cartelemetriesoutput();
  static const int kCarTelemetriesOutputFieldNumber = 19;
  const ::Cognata::SDK::CarTelemetriesOutput& cartelemetriesoutput() const;
  ::Cognata::SDK::CarTelemetriesOutput* release_cartelemetriesoutput();
  ::Cognata::SDK::CarTelemetriesOutput* mutable_cartelemetriesoutput();
  void set_allocated_cartelemetriesoutput(::Cognata::SDK::CarTelemetriesOutput* cartelemetriesoutput);

  // .Cognata.SDK.DepthCameraOutput depthCameraOutput = 20;
  bool has_depthcameraoutput() const;
  void clear_depthcameraoutput();
  static const int kDepthCameraOutputFieldNumber = 20;
  const ::Cognata::SDK::DepthCameraOutput& depthcameraoutput() const;
  ::Cognata::SDK::DepthCameraOutput* release_depthcameraoutput();
  ::Cognata::SDK::DepthCameraOutput* mutable_depthcameraoutput();
  void set_allocated_depthcameraoutput(::Cognata::SDK::DepthCameraOutput* depthcameraoutput);

  // .Cognata.SDK.RadarOutput radarOutput = 21;
  bool has_radaroutput() const;
  void clear_radaroutput();
  static const int kRadarOutputFieldNumber = 21;
  const ::Cognata::SDK::RadarOutput& radaroutput() const;
  ::Cognata::SDK::RadarOutput* release_radaroutput();
  ::Cognata::SDK::RadarOutput* mutable_radaroutput();
  void set_allocated_radaroutput(::Cognata::SDK::RadarOutput* radaroutput);

  // .Cognata.SDK.SemanticMaterialLabelingOutput semanticMaterialLabelingOutput = 22;
  bool has_semanticmateriallabelingoutput() const;
  void clear_semanticmateriallabelingoutput();
  static const int kSemanticMaterialLabelingOutputFieldNumber = 22;
  const ::Cognata::SDK::SemanticMaterialLabelingOutput& semanticmateriallabelingoutput() const;
  ::Cognata::SDK::SemanticMaterialLabelingOutput* release_semanticmateriallabelingoutput();
  ::Cognata::SDK::SemanticMaterialLabelingOutput* mutable_semanticmateriallabelingoutput();
  void set_allocated_semanticmateriallabelingoutput(::Cognata::SDK::SemanticMaterialLabelingOutput* semanticmateriallabelingoutput);

  // .Cognata.SDK.SemanticStructureLabelingOutput semanticStructureLabelingOutput = 23;
  bool has_semanticstructurelabelingoutput() const;
  void clear_semanticstructurelabelingoutput();
  static const int kSemanticStructureLabelingOutputFieldNumber = 23;
  const ::Cognata::SDK::SemanticStructureLabelingOutput& semanticstructurelabelingoutput() const;
  ::Cognata::SDK::SemanticStructureLabelingOutput* release_semanticstructurelabelingoutput();
  ::Cognata::SDK::SemanticStructureLabelingOutput* mutable_semanticstructurelabelingoutput();
  void set_allocated_semanticstructurelabelingoutput(::Cognata::SDK::SemanticStructureLabelingOutput* semanticstructurelabelingoutput);

  // .Cognata.SDK.DynamicObjectGroundTruthOutput dynamicObjectGroundTruthOutput = 40;
  bool has_dynamicobjectgroundtruthoutput() const;
  void clear_dynamicobjectgroundtruthoutput();
  static const int kDynamicObjectGroundTruthOutputFieldNumber = 40;
  const ::Cognata::SDK::DynamicObjectGroundTruthOutput& dynamicobjectgroundtruthoutput() const;
  ::Cognata::SDK::DynamicObjectGroundTruthOutput* release_dynamicobjectgroundtruthoutput();
  ::Cognata::SDK::DynamicObjectGroundTruthOutput* mutable_dynamicobjectgroundtruthoutput();
  void set_allocated_dynamicobjectgroundtruthoutput(::Cognata::SDK::DynamicObjectGroundTruthOutput* dynamicobjectgroundtruthoutput);

  // .Cognata.SDK.CarsQueryReport carsListOutput = 41;
  bool has_carslistoutput() const;
  void clear_carslistoutput();
  static const int kCarsListOutputFieldNumber = 41;
  const ::Cognata::SDK::CarsQueryReport& carslistoutput() const;
  ::Cognata::SDK::CarsQueryReport* release_carslistoutput();
  ::Cognata::SDK::CarsQueryReport* mutable_carslistoutput();
  void set_allocated_carslistoutput(::Cognata::SDK::CarsQueryReport* carslistoutput);

  // .Cognata.SDK.ThermalCameraOutput thermalCameraOutput = 42;
  bool has_thermalcameraoutput() const;
  void clear_thermalcameraoutput();
  static const int kThermalCameraOutputFieldNumber = 42;
  const ::Cognata::SDK::ThermalCameraOutput& thermalcameraoutput() const;
  ::Cognata::SDK::ThermalCameraOutput* release_thermalcameraoutput();
  ::Cognata::SDK::ThermalCameraOutput* mutable_thermalcameraoutput();
  void set_allocated_thermalcameraoutput(::Cognata::SDK::ThermalCameraOutput* thermalcameraoutput);

  void clear_SensorType();
  SensorTypeCase SensorType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.SensorOutput)
 private:
  class HasBitSetters;
  void set_has_rgbcameraoutput();
  void set_has_roioutput();
  void set_has_gpsoutput();
  void set_has_wakeupoutput();
  void set_has_lidaroutput();
  void set_has_msgtoclientoutput();
  void set_has_lanedetectoroutput();
  void set_has_semanticinstancelabelingoutput();
  void set_has_semanticclasslabelingoutput();
  void set_has_cartelemetriesoutput();
  void set_has_depthcameraoutput();
  void set_has_radaroutput();
  void set_has_semanticmateriallabelingoutput();
  void set_has_semanticstructurelabelingoutput();
  void set_has_dynamicobjectgroundtruthoutput();
  void set_has_carslistoutput();
  void set_has_thermalcameraoutput();

  inline bool has_SensorType() const;
  inline void clear_has_SensorType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float outputtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputframenum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputsensorid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputvehicleid_;
  union SensorTypeUnion {
    SensorTypeUnion() {}
    ::Cognata::SDK::RGBCameraOutput* rgbcameraoutput_;
    ::Cognata::SDK::ROIOutput* roioutput_;
    ::Cognata::SDK::GPSOutput* gpsoutput_;
    ::Cognata::SDK::WakeupOutput* wakeupoutput_;
    ::Cognata::SDK::LidarOutput* lidaroutput_;
    ::Cognata::SDK::E2COutput* msgtoclientoutput_;
    ::Cognata::SDK::LaneDetectorOutput* lanedetectoroutput_;
    ::Cognata::SDK::SemanticInstanceLabelingOutput* semanticinstancelabelingoutput_;
    ::Cognata::SDK::SemanticClassLabelingOutput* semanticclasslabelingoutput_;
    ::Cognata::SDK::CarTelemetriesOutput* cartelemetriesoutput_;
    ::Cognata::SDK::DepthCameraOutput* depthcameraoutput_;
    ::Cognata::SDK::RadarOutput* radaroutput_;
    ::Cognata::SDK::SemanticMaterialLabelingOutput* semanticmateriallabelingoutput_;
    ::Cognata::SDK::SemanticStructureLabelingOutput* semanticstructurelabelingoutput_;
    ::Cognata::SDK::DynamicObjectGroundTruthOutput* dynamicobjectgroundtruthoutput_;
    ::Cognata::SDK::CarsQueryReport* carslistoutput_;
    ::Cognata::SDK::ThermalCameraOutput* thermalcameraoutput_;
  } SensorType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class DepthCameraOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.DepthCameraOutput) */ {
 public:
  DepthCameraOutput();
  virtual ~DepthCameraOutput();

  DepthCameraOutput(const DepthCameraOutput& from);
  DepthCameraOutput(DepthCameraOutput&& from) noexcept
    : DepthCameraOutput() {
    *this = ::std::move(from);
  }

  inline DepthCameraOutput& operator=(const DepthCameraOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthCameraOutput& operator=(DepthCameraOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthCameraOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthCameraOutput* internal_default_instance() {
    return reinterpret_cast<const DepthCameraOutput*>(
               &_DepthCameraOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(DepthCameraOutput* other);
  friend void swap(DepthCameraOutput& a, DepthCameraOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DepthCameraOutput* New() const final {
    return CreateMaybeMessage<DepthCameraOutput>(nullptr);
  }

  DepthCameraOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthCameraOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthCameraOutput& from);
  void MergeFrom(const DepthCameraOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthCameraOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.DepthCameraOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pixels = 3;
  void clear_pixels();
  static const int kPixelsFieldNumber = 3;
  const std::string& pixels() const;
  void set_pixels(const std::string& value);
  void set_pixels(std::string&& value);
  void set_pixels(const char* value);
  void set_pixels(const void* value, size_t size);
  std::string* mutable_pixels();
  std::string* release_pixels();
  void set_allocated_pixels(std::string* pixels);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.DepthCameraOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class RGBCameraOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RGBCameraOutput) */ {
 public:
  RGBCameraOutput();
  virtual ~RGBCameraOutput();

  RGBCameraOutput(const RGBCameraOutput& from);
  RGBCameraOutput(RGBCameraOutput&& from) noexcept
    : RGBCameraOutput() {
    *this = ::std::move(from);
  }

  inline RGBCameraOutput& operator=(const RGBCameraOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline RGBCameraOutput& operator=(RGBCameraOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RGBCameraOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RGBCameraOutput* internal_default_instance() {
    return reinterpret_cast<const RGBCameraOutput*>(
               &_RGBCameraOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(RGBCameraOutput* other);
  friend void swap(RGBCameraOutput& a, RGBCameraOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RGBCameraOutput* New() const final {
    return CreateMaybeMessage<RGBCameraOutput>(nullptr);
  }

  RGBCameraOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RGBCameraOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RGBCameraOutput& from);
  void MergeFrom(const RGBCameraOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RGBCameraOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RGBCameraOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pixels = 3;
  void clear_pixels();
  static const int kPixelsFieldNumber = 3;
  const std::string& pixels() const;
  void set_pixels(const std::string& value);
  void set_pixels(std::string&& value);
  void set_pixels(const char* value);
  void set_pixels(const void* value, size_t size);
  std::string* mutable_pixels();
  std::string* release_pixels();
  void set_allocated_pixels(std::string* pixels);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RGBCameraOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class SemanticInstanceLabelingOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SemanticInstanceLabelingOutput) */ {
 public:
  SemanticInstanceLabelingOutput();
  virtual ~SemanticInstanceLabelingOutput();

  SemanticInstanceLabelingOutput(const SemanticInstanceLabelingOutput& from);
  SemanticInstanceLabelingOutput(SemanticInstanceLabelingOutput&& from) noexcept
    : SemanticInstanceLabelingOutput() {
    *this = ::std::move(from);
  }

  inline SemanticInstanceLabelingOutput& operator=(const SemanticInstanceLabelingOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SemanticInstanceLabelingOutput& operator=(SemanticInstanceLabelingOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SemanticInstanceLabelingOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SemanticInstanceLabelingOutput* internal_default_instance() {
    return reinterpret_cast<const SemanticInstanceLabelingOutput*>(
               &_SemanticInstanceLabelingOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(SemanticInstanceLabelingOutput* other);
  friend void swap(SemanticInstanceLabelingOutput& a, SemanticInstanceLabelingOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SemanticInstanceLabelingOutput* New() const final {
    return CreateMaybeMessage<SemanticInstanceLabelingOutput>(nullptr);
  }

  SemanticInstanceLabelingOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SemanticInstanceLabelingOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SemanticInstanceLabelingOutput& from);
  void MergeFrom(const SemanticInstanceLabelingOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SemanticInstanceLabelingOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SemanticInstanceLabelingOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pixels = 3;
  void clear_pixels();
  static const int kPixelsFieldNumber = 3;
  const std::string& pixels() const;
  void set_pixels(const std::string& value);
  void set_pixels(std::string&& value);
  void set_pixels(const char* value);
  void set_pixels(const void* value, size_t size);
  std::string* mutable_pixels();
  std::string* release_pixels();
  void set_allocated_pixels(std::string* pixels);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SemanticInstanceLabelingOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class SemanticClassLabelingOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SemanticClassLabelingOutput) */ {
 public:
  SemanticClassLabelingOutput();
  virtual ~SemanticClassLabelingOutput();

  SemanticClassLabelingOutput(const SemanticClassLabelingOutput& from);
  SemanticClassLabelingOutput(SemanticClassLabelingOutput&& from) noexcept
    : SemanticClassLabelingOutput() {
    *this = ::std::move(from);
  }

  inline SemanticClassLabelingOutput& operator=(const SemanticClassLabelingOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SemanticClassLabelingOutput& operator=(SemanticClassLabelingOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SemanticClassLabelingOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SemanticClassLabelingOutput* internal_default_instance() {
    return reinterpret_cast<const SemanticClassLabelingOutput*>(
               &_SemanticClassLabelingOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(SemanticClassLabelingOutput* other);
  friend void swap(SemanticClassLabelingOutput& a, SemanticClassLabelingOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SemanticClassLabelingOutput* New() const final {
    return CreateMaybeMessage<SemanticClassLabelingOutput>(nullptr);
  }

  SemanticClassLabelingOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SemanticClassLabelingOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SemanticClassLabelingOutput& from);
  void MergeFrom(const SemanticClassLabelingOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SemanticClassLabelingOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SemanticClassLabelingOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pixels = 3;
  void clear_pixels();
  static const int kPixelsFieldNumber = 3;
  const std::string& pixels() const;
  void set_pixels(const std::string& value);
  void set_pixels(std::string&& value);
  void set_pixels(const char* value);
  void set_pixels(const void* value, size_t size);
  std::string* mutable_pixels();
  std::string* release_pixels();
  void set_allocated_pixels(std::string* pixels);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SemanticClassLabelingOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class SemanticMaterialLabelingOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SemanticMaterialLabelingOutput) */ {
 public:
  SemanticMaterialLabelingOutput();
  virtual ~SemanticMaterialLabelingOutput();

  SemanticMaterialLabelingOutput(const SemanticMaterialLabelingOutput& from);
  SemanticMaterialLabelingOutput(SemanticMaterialLabelingOutput&& from) noexcept
    : SemanticMaterialLabelingOutput() {
    *this = ::std::move(from);
  }

  inline SemanticMaterialLabelingOutput& operator=(const SemanticMaterialLabelingOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SemanticMaterialLabelingOutput& operator=(SemanticMaterialLabelingOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SemanticMaterialLabelingOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SemanticMaterialLabelingOutput* internal_default_instance() {
    return reinterpret_cast<const SemanticMaterialLabelingOutput*>(
               &_SemanticMaterialLabelingOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(SemanticMaterialLabelingOutput* other);
  friend void swap(SemanticMaterialLabelingOutput& a, SemanticMaterialLabelingOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SemanticMaterialLabelingOutput* New() const final {
    return CreateMaybeMessage<SemanticMaterialLabelingOutput>(nullptr);
  }

  SemanticMaterialLabelingOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SemanticMaterialLabelingOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SemanticMaterialLabelingOutput& from);
  void MergeFrom(const SemanticMaterialLabelingOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SemanticMaterialLabelingOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SemanticMaterialLabelingOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pixels = 3;
  void clear_pixels();
  static const int kPixelsFieldNumber = 3;
  const std::string& pixels() const;
  void set_pixels(const std::string& value);
  void set_pixels(std::string&& value);
  void set_pixels(const char* value);
  void set_pixels(const void* value, size_t size);
  std::string* mutable_pixels();
  std::string* release_pixels();
  void set_allocated_pixels(std::string* pixels);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SemanticMaterialLabelingOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class SemanticStructureLabelingOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SemanticStructureLabelingOutput) */ {
 public:
  SemanticStructureLabelingOutput();
  virtual ~SemanticStructureLabelingOutput();

  SemanticStructureLabelingOutput(const SemanticStructureLabelingOutput& from);
  SemanticStructureLabelingOutput(SemanticStructureLabelingOutput&& from) noexcept
    : SemanticStructureLabelingOutput() {
    *this = ::std::move(from);
  }

  inline SemanticStructureLabelingOutput& operator=(const SemanticStructureLabelingOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SemanticStructureLabelingOutput& operator=(SemanticStructureLabelingOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SemanticStructureLabelingOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SemanticStructureLabelingOutput* internal_default_instance() {
    return reinterpret_cast<const SemanticStructureLabelingOutput*>(
               &_SemanticStructureLabelingOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(SemanticStructureLabelingOutput* other);
  friend void swap(SemanticStructureLabelingOutput& a, SemanticStructureLabelingOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SemanticStructureLabelingOutput* New() const final {
    return CreateMaybeMessage<SemanticStructureLabelingOutput>(nullptr);
  }

  SemanticStructureLabelingOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SemanticStructureLabelingOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SemanticStructureLabelingOutput& from);
  void MergeFrom(const SemanticStructureLabelingOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SemanticStructureLabelingOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SemanticStructureLabelingOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pixels = 3;
  void clear_pixels();
  static const int kPixelsFieldNumber = 3;
  const std::string& pixels() const;
  void set_pixels(const std::string& value);
  void set_pixels(std::string&& value);
  void set_pixels(const char* value);
  void set_pixels(const void* value, size_t size);
  std::string* mutable_pixels();
  std::string* release_pixels();
  void set_allocated_pixels(std::string* pixels);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SemanticStructureLabelingOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class LidarOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.LidarOutput) */ {
 public:
  LidarOutput();
  virtual ~LidarOutput();

  LidarOutput(const LidarOutput& from);
  LidarOutput(LidarOutput&& from) noexcept
    : LidarOutput() {
    *this = ::std::move(from);
  }

  inline LidarOutput& operator=(const LidarOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarOutput& operator=(LidarOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarOutput* internal_default_instance() {
    return reinterpret_cast<const LidarOutput*>(
               &_LidarOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(LidarOutput* other);
  friend void swap(LidarOutput& a, LidarOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarOutput* New() const final {
    return CreateMaybeMessage<LidarOutput>(nullptr);
  }

  LidarOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarOutput& from);
  void MergeFrom(const LidarOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.LidarOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes points = 1;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.LidarOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class GPSOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GPSOutput) */ {
 public:
  GPSOutput();
  virtual ~GPSOutput();

  GPSOutput(const GPSOutput& from);
  GPSOutput(GPSOutput&& from) noexcept
    : GPSOutput() {
    *this = ::std::move(from);
  }

  inline GPSOutput& operator=(const GPSOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSOutput& operator=(GPSOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSOutput* internal_default_instance() {
    return reinterpret_cast<const GPSOutput*>(
               &_GPSOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(GPSOutput* other);
  friend void swap(GPSOutput& a, GPSOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GPSOutput* New() const final {
    return CreateMaybeMessage<GPSOutput>(nullptr);
  }

  GPSOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSOutput& from);
  void MergeFrom(const GPSOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GPSOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sensorName = 19;
  void clear_sensorname();
  static const int kSensorNameFieldNumber = 19;
  const std::string& sensorname() const;
  void set_sensorname(const std::string& value);
  void set_sensorname(std::string&& value);
  void set_sensorname(const char* value);
  void set_sensorname(const char* value, size_t size);
  std::string* mutable_sensorname();
  std::string* release_sensorname();
  void set_allocated_sensorname(std::string* sensorname);

  // .Cognata.SDK.SDKVector3 orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  const ::Cognata::SDK::SDKVector3& orientation() const;
  ::Cognata::SDK::SDKVector3* release_orientation();
  ::Cognata::SDK::SDKVector3* mutable_orientation();
  void set_allocated_orientation(::Cognata::SDK::SDKVector3* orientation);

  // .Cognata.SDK.SDKVector3 Position = 7;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 7;
  const ::Cognata::SDK::SDKVector3& position() const;
  ::Cognata::SDK::SDKVector3* release_position();
  ::Cognata::SDK::SDKVector3* mutable_position();
  void set_allocated_position(::Cognata::SDK::SDKVector3* position);

  // .Cognata.SDK.SDKVector3 acceleration = 8;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 8;
  const ::Cognata::SDK::SDKVector3& acceleration() const;
  ::Cognata::SDK::SDKVector3* release_acceleration();
  ::Cognata::SDK::SDKVector3* mutable_acceleration();
  void set_allocated_acceleration(::Cognata::SDK::SDKVector3* acceleration);

  // .Cognata.SDK.SDKVector3 velocityLocal3D = 9;
  bool has_velocitylocal3d() const;
  void clear_velocitylocal3d();
  static const int kVelocityLocal3DFieldNumber = 9;
  const ::Cognata::SDK::SDKVector3& velocitylocal3d() const;
  ::Cognata::SDK::SDKVector3* release_velocitylocal3d();
  ::Cognata::SDK::SDKVector3* mutable_velocitylocal3d();
  void set_allocated_velocitylocal3d(::Cognata::SDK::SDKVector3* velocitylocal3d);

  // .Cognata.SDK.SDKVector3 angularVelocityLocal3D = 10;
  bool has_angularvelocitylocal3d() const;
  void clear_angularvelocitylocal3d();
  static const int kAngularVelocityLocal3DFieldNumber = 10;
  const ::Cognata::SDK::SDKVector3& angularvelocitylocal3d() const;
  ::Cognata::SDK::SDKVector3* release_angularvelocitylocal3d();
  ::Cognata::SDK::SDKVector3* mutable_angularvelocitylocal3d();
  void set_allocated_angularvelocitylocal3d(::Cognata::SDK::SDKVector3* angularvelocitylocal3d);

  // .Cognata.SDK.SDKVector3 angularAccelerationLocal3D = 11;
  bool has_angularaccelerationlocal3d() const;
  void clear_angularaccelerationlocal3d();
  static const int kAngularAccelerationLocal3DFieldNumber = 11;
  const ::Cognata::SDK::SDKVector3& angularaccelerationlocal3d() const;
  ::Cognata::SDK::SDKVector3* release_angularaccelerationlocal3d();
  ::Cognata::SDK::SDKVector3* mutable_angularaccelerationlocal3d();
  void set_allocated_angularaccelerationlocal3d(::Cognata::SDK::SDKVector3* angularaccelerationlocal3d);

  // .Cognata.SDK.SDKVector3 noisedPosition = 18;
  bool has_noisedposition() const;
  void clear_noisedposition();
  static const int kNoisedPositionFieldNumber = 18;
  const ::Cognata::SDK::SDKVector3& noisedposition() const;
  ::Cognata::SDK::SDKVector3* release_noisedposition();
  ::Cognata::SDK::SDKVector3* mutable_noisedposition();
  void set_allocated_noisedposition(::Cognata::SDK::SDKVector3* noisedposition);

  // .Cognata.SDK.SDKVector3 GPSAcceleration = 20;
  bool has_gpsacceleration() const;
  void clear_gpsacceleration();
  static const int kGPSAccelerationFieldNumber = 20;
  const ::Cognata::SDK::SDKVector3& gpsacceleration() const;
  ::Cognata::SDK::SDKVector3* release_gpsacceleration();
  ::Cognata::SDK::SDKVector3* mutable_gpsacceleration();
  void set_allocated_gpsacceleration(::Cognata::SDK::SDKVector3* gpsacceleration);

  // .Cognata.SDK.SDKVector3 GPSVelocityLocal3D = 21;
  bool has_gpsvelocitylocal3d() const;
  void clear_gpsvelocitylocal3d();
  static const int kGPSVelocityLocal3DFieldNumber = 21;
  const ::Cognata::SDK::SDKVector3& gpsvelocitylocal3d() const;
  ::Cognata::SDK::SDKVector3* release_gpsvelocitylocal3d();
  ::Cognata::SDK::SDKVector3* mutable_gpsvelocitylocal3d();
  void set_allocated_gpsvelocitylocal3d(::Cognata::SDK::SDKVector3* gpsvelocitylocal3d);

  // .Cognata.SDK.SDKVector3 GPSAngularVelocityLocal3D = 22;
  bool has_gpsangularvelocitylocal3d() const;
  void clear_gpsangularvelocitylocal3d();
  static const int kGPSAngularVelocityLocal3DFieldNumber = 22;
  const ::Cognata::SDK::SDKVector3& gpsangularvelocitylocal3d() const;
  ::Cognata::SDK::SDKVector3* release_gpsangularvelocitylocal3d();
  ::Cognata::SDK::SDKVector3* mutable_gpsangularvelocitylocal3d();
  void set_allocated_gpsangularvelocitylocal3d(::Cognata::SDK::SDKVector3* gpsangularvelocitylocal3d);

  // .Cognata.SDK.SDKVector3 GPSAngularAccelerationLocal3D = 23;
  bool has_gpsangularaccelerationlocal3d() const;
  void clear_gpsangularaccelerationlocal3d();
  static const int kGPSAngularAccelerationLocal3DFieldNumber = 23;
  const ::Cognata::SDK::SDKVector3& gpsangularaccelerationlocal3d() const;
  ::Cognata::SDK::SDKVector3* release_gpsangularaccelerationlocal3d();
  ::Cognata::SDK::SDKVector3* mutable_gpsangularaccelerationlocal3d();
  void set_allocated_gpsangularaccelerationlocal3d(::Cognata::SDK::SDKVector3* gpsangularaccelerationlocal3d);

  // float lat = 1;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  float lat() const;
  void set_lat(float value);

  // float long = 2;
  void clear_long_();
  static const int kLongFieldNumber = 2;
  float long_() const;
  void set_long_(float value);

  // float speed = 4;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  float speed() const;
  void set_speed(float value);

  // float laneWidth = 5;
  void clear_lanewidth();
  static const int kLaneWidthFieldNumber = 5;
  float lanewidth() const;
  void set_lanewidth(float value);

  // float LaneOffset = 6;
  void clear_laneoffset();
  static const int kLaneOffsetFieldNumber = 6;
  float laneoffset() const;
  void set_laneoffset(float value);

  // int32 laneNumber = 12;
  void clear_lanenumber();
  static const int kLaneNumberFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 lanenumber() const;
  void set_lanenumber(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 navigationSegment = 13;
  void clear_navigationsegment();
  static const int kNavigationSegmentFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 navigationsegment() const;
  void set_navigationsegment(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float alt = 14;
  void clear_alt();
  static const int kAltFieldNumber = 14;
  float alt() const;
  void set_alt(float value);

  // float noisedLat = 15;
  void clear_noisedlat();
  static const int kNoisedLatFieldNumber = 15;
  float noisedlat() const;
  void set_noisedlat(float value);

  // float noisedLon = 16;
  void clear_noisedlon();
  static const int kNoisedLonFieldNumber = 16;
  float noisedlon() const;
  void set_noisedlon(float value);

  // float noisedAlt = 17;
  void clear_noisedalt();
  static const int kNoisedAltFieldNumber = 17;
  float noisedalt() const;
  void set_noisedalt(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.GPSOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensorname_;
  ::Cognata::SDK::SDKVector3* orientation_;
  ::Cognata::SDK::SDKVector3* position_;
  ::Cognata::SDK::SDKVector3* acceleration_;
  ::Cognata::SDK::SDKVector3* velocitylocal3d_;
  ::Cognata::SDK::SDKVector3* angularvelocitylocal3d_;
  ::Cognata::SDK::SDKVector3* angularaccelerationlocal3d_;
  ::Cognata::SDK::SDKVector3* noisedposition_;
  ::Cognata::SDK::SDKVector3* gpsacceleration_;
  ::Cognata::SDK::SDKVector3* gpsvelocitylocal3d_;
  ::Cognata::SDK::SDKVector3* gpsangularvelocitylocal3d_;
  ::Cognata::SDK::SDKVector3* gpsangularaccelerationlocal3d_;
  float lat_;
  float long__;
  float speed_;
  float lanewidth_;
  float laneoffset_;
  ::PROTOBUF_NAMESPACE_ID::int32 lanenumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 navigationsegment_;
  float alt_;
  float noisedlat_;
  float noisedlon_;
  float noisedalt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class RadarOutput_Header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RadarOutput.Header) */ {
 public:
  RadarOutput_Header();
  virtual ~RadarOutput_Header();

  RadarOutput_Header(const RadarOutput_Header& from);
  RadarOutput_Header(RadarOutput_Header&& from) noexcept
    : RadarOutput_Header() {
    *this = ::std::move(from);
  }

  inline RadarOutput_Header& operator=(const RadarOutput_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarOutput_Header& operator=(RadarOutput_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarOutput_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarOutput_Header* internal_default_instance() {
    return reinterpret_cast<const RadarOutput_Header*>(
               &_RadarOutput_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(RadarOutput_Header* other);
  friend void swap(RadarOutput_Header& a, RadarOutput_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarOutput_Header* New() const final {
    return CreateMaybeMessage<RadarOutput_Header>(nullptr);
  }

  RadarOutput_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarOutput_Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarOutput_Header& from);
  void MergeFrom(const RadarOutput_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarOutput_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RadarOutput.Header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.RadarOutput.BeamInfo BeamInfo = 5;
  int beaminfo_size() const;
  void clear_beaminfo();
  static const int kBeamInfoFieldNumber = 5;
  ::Cognata::SDK::RadarOutput_BeamInfo* mutable_beaminfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::RadarOutput_BeamInfo >*
      mutable_beaminfo();
  const ::Cognata::SDK::RadarOutput_BeamInfo& beaminfo(int index) const;
  ::Cognata::SDK::RadarOutput_BeamInfo* add_beaminfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::RadarOutput_BeamInfo >&
      beaminfo() const;

  // string radarID = 1;
  void clear_radarid();
  static const int kRadarIDFieldNumber = 1;
  const std::string& radarid() const;
  void set_radarid(const std::string& value);
  void set_radarid(std::string&& value);
  void set_radarid(const char* value);
  void set_radarid(const char* value, size_t size);
  std::string* mutable_radarid();
  std::string* release_radarid();
  void set_allocated_radarid(std::string* radarid);

  // .Cognata.SDK.RadarPlacement radarPlacement = 2;
  bool has_radarplacement() const;
  void clear_radarplacement();
  static const int kRadarPlacementFieldNumber = 2;
  const ::Cognata::SDK::RadarPlacement& radarplacement() const;
  ::Cognata::SDK::RadarPlacement* release_radarplacement();
  ::Cognata::SDK::RadarPlacement* mutable_radarplacement();
  void set_allocated_radarplacement(::Cognata::SDK::RadarPlacement* radarplacement);

  // float HorizontalFOV = 3;
  void clear_horizontalfov();
  static const int kHorizontalFOVFieldNumber = 3;
  float horizontalfov() const;
  void set_horizontalfov(float value);

  // float VerticalFOV = 4;
  void clear_verticalfov();
  static const int kVerticalFOVFieldNumber = 4;
  float verticalfov() const;
  void set_verticalfov(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RadarOutput.Header)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::RadarOutput_BeamInfo > beaminfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radarid_;
  ::Cognata::SDK::RadarPlacement* radarplacement_;
  float horizontalfov_;
  float verticalfov_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class RadarOutput_BeamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RadarOutput.BeamInfo) */ {
 public:
  RadarOutput_BeamInfo();
  virtual ~RadarOutput_BeamInfo();

  RadarOutput_BeamInfo(const RadarOutput_BeamInfo& from);
  RadarOutput_BeamInfo(RadarOutput_BeamInfo&& from) noexcept
    : RadarOutput_BeamInfo() {
    *this = ::std::move(from);
  }

  inline RadarOutput_BeamInfo& operator=(const RadarOutput_BeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarOutput_BeamInfo& operator=(RadarOutput_BeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarOutput_BeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarOutput_BeamInfo* internal_default_instance() {
    return reinterpret_cast<const RadarOutput_BeamInfo*>(
               &_RadarOutput_BeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(RadarOutput_BeamInfo* other);
  friend void swap(RadarOutput_BeamInfo& a, RadarOutput_BeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarOutput_BeamInfo* New() const final {
    return CreateMaybeMessage<RadarOutput_BeamInfo>(nullptr);
  }

  RadarOutput_BeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarOutput_BeamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarOutput_BeamInfo& from);
  void MergeFrom(const RadarOutput_BeamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarOutput_BeamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RadarOutput.BeamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string radarBeamID = 3;
  void clear_radarbeamid();
  static const int kRadarBeamIDFieldNumber = 3;
  const std::string& radarbeamid() const;
  void set_radarbeamid(const std::string& value);
  void set_radarbeamid(std::string&& value);
  void set_radarbeamid(const char* value);
  void set_radarbeamid(const char* value, size_t size);
  std::string* mutable_radarbeamid();
  std::string* release_radarbeamid();
  void set_allocated_radarbeamid(std::string* radarbeamid);

  // .Cognata.SDK.SDKVector3 offset = 5;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 5;
  const ::Cognata::SDK::SDKVector3& offset() const;
  ::Cognata::SDK::SDKVector3* release_offset();
  ::Cognata::SDK::SDKVector3* mutable_offset();
  void set_allocated_offset(::Cognata::SDK::SDKVector3* offset);

  // .Cognata.SDK.SDKVector3 rotation = 6;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 6;
  const ::Cognata::SDK::SDKVector3& rotation() const;
  ::Cognata::SDK::SDKVector3* release_rotation();
  ::Cognata::SDK::SDKVector3* mutable_rotation();
  void set_allocated_rotation(::Cognata::SDK::SDKVector3* rotation);

  // float horizontalFOV = 1;
  void clear_horizontalfov();
  static const int kHorizontalFOVFieldNumber = 1;
  float horizontalfov() const;
  void set_horizontalfov(float value);

  // float verticalFOV = 2;
  void clear_verticalfov();
  static const int kVerticalFOVFieldNumber = 2;
  float verticalfov() const;
  void set_verticalfov(float value);

  // float range = 4;
  void clear_range();
  static const int kRangeFieldNumber = 4;
  float range() const;
  void set_range(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RadarOutput.BeamInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radarbeamid_;
  ::Cognata::SDK::SDKVector3* offset_;
  ::Cognata::SDK::SDKVector3* rotation_;
  float horizontalfov_;
  float verticalfov_;
  float range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class RadarOutput_Target_RadarTarget :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RadarOutput.Target.RadarTarget) */ {
 public:
  RadarOutput_Target_RadarTarget();
  virtual ~RadarOutput_Target_RadarTarget();

  RadarOutput_Target_RadarTarget(const RadarOutput_Target_RadarTarget& from);
  RadarOutput_Target_RadarTarget(RadarOutput_Target_RadarTarget&& from) noexcept
    : RadarOutput_Target_RadarTarget() {
    *this = ::std::move(from);
  }

  inline RadarOutput_Target_RadarTarget& operator=(const RadarOutput_Target_RadarTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarOutput_Target_RadarTarget& operator=(RadarOutput_Target_RadarTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarOutput_Target_RadarTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarOutput_Target_RadarTarget* internal_default_instance() {
    return reinterpret_cast<const RadarOutput_Target_RadarTarget*>(
               &_RadarOutput_Target_RadarTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(RadarOutput_Target_RadarTarget* other);
  friend void swap(RadarOutput_Target_RadarTarget& a, RadarOutput_Target_RadarTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarOutput_Target_RadarTarget* New() const final {
    return CreateMaybeMessage<RadarOutput_Target_RadarTarget>(nullptr);
  }

  RadarOutput_Target_RadarTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarOutput_Target_RadarTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarOutput_Target_RadarTarget& from);
  void MergeFrom(const RadarOutput_Target_RadarTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarOutput_Target_RadarTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RadarOutput.Target.RadarTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 trackingStatus = 1;
  void clear_trackingstatus();
  static const int kTrackingStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 trackingstatus() const;
  void set_trackingstatus(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 age = 2;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lastSeen = 3;
  void clear_lastseen();
  static const int kLastSeenFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastseen() const;
  void set_lastseen(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool isStationary = 5;
  void clear_isstationary();
  static const int kIsStationaryFieldNumber = 5;
  bool isstationary() const;
  void set_isstationary(bool value);

  // bool isGhost = 6;
  void clear_isghost();
  static const int kIsGhostFieldNumber = 6;
  bool isghost() const;
  void set_isghost(bool value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RadarOutput.Target.RadarTarget)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 trackingstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastseen_;
  bool isstationary_;
  bool isghost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class RadarOutput_Target_GeometricTarget :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RadarOutput.Target.GeometricTarget) */ {
 public:
  RadarOutput_Target_GeometricTarget();
  virtual ~RadarOutput_Target_GeometricTarget();

  RadarOutput_Target_GeometricTarget(const RadarOutput_Target_GeometricTarget& from);
  RadarOutput_Target_GeometricTarget(RadarOutput_Target_GeometricTarget&& from) noexcept
    : RadarOutput_Target_GeometricTarget() {
    *this = ::std::move(from);
  }

  inline RadarOutput_Target_GeometricTarget& operator=(const RadarOutput_Target_GeometricTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarOutput_Target_GeometricTarget& operator=(RadarOutput_Target_GeometricTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarOutput_Target_GeometricTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarOutput_Target_GeometricTarget* internal_default_instance() {
    return reinterpret_cast<const RadarOutput_Target_GeometricTarget*>(
               &_RadarOutput_Target_GeometricTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(RadarOutput_Target_GeometricTarget* other);
  friend void swap(RadarOutput_Target_GeometricTarget& a, RadarOutput_Target_GeometricTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarOutput_Target_GeometricTarget* New() const final {
    return CreateMaybeMessage<RadarOutput_Target_GeometricTarget>(nullptr);
  }

  RadarOutput_Target_GeometricTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarOutput_Target_GeometricTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarOutput_Target_GeometricTarget& from);
  void MergeFrom(const RadarOutput_Target_GeometricTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarOutput_Target_GeometricTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RadarOutput.Target.GeometricTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 isAggregate = 1;
  void clear_isaggregate();
  static const int kIsAggregateFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 isaggregate() const;
  void set_isaggregate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RadarOutput.Target.GeometricTarget)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 isaggregate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class RadarOutput_Target :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RadarOutput.Target) */ {
 public:
  RadarOutput_Target();
  virtual ~RadarOutput_Target();

  RadarOutput_Target(const RadarOutput_Target& from);
  RadarOutput_Target(RadarOutput_Target&& from) noexcept
    : RadarOutput_Target() {
    *this = ::std::move(from);
  }

  inline RadarOutput_Target& operator=(const RadarOutput_Target& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarOutput_Target& operator=(RadarOutput_Target&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarOutput_Target& default_instance();

  enum TargetTypeCase {
    kGeometricTarget = 50,
    kRadarTarget = 51,
    TARGETTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarOutput_Target* internal_default_instance() {
    return reinterpret_cast<const RadarOutput_Target*>(
               &_RadarOutput_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(RadarOutput_Target* other);
  friend void swap(RadarOutput_Target& a, RadarOutput_Target& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarOutput_Target* New() const final {
    return CreateMaybeMessage<RadarOutput_Target>(nullptr);
  }

  RadarOutput_Target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarOutput_Target>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarOutput_Target& from);
  void MergeFrom(const RadarOutput_Target& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarOutput_Target* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RadarOutput.Target";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RadarOutput_Target_RadarTarget RadarTarget;
  typedef RadarOutput_Target_GeometricTarget GeometricTarget;

  // accessors -------------------------------------------------------

  // string beamsId = 10;
  void clear_beamsid();
  static const int kBeamsIdFieldNumber = 10;
  const std::string& beamsid() const;
  void set_beamsid(const std::string& value);
  void set_beamsid(std::string&& value);
  void set_beamsid(const char* value);
  void set_beamsid(const char* value, size_t size);
  std::string* mutable_beamsid();
  std::string* release_beamsid();
  void set_allocated_beamsid(std::string* beamsid);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 timeStamp = 2;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float range = 3;
  void clear_range();
  static const int kRangeFieldNumber = 3;
  float range() const;
  void set_range(float value);

  // float azimuth = 4;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 4;
  float azimuth() const;
  void set_azimuth(float value);

  // float elevation = 5;
  void clear_elevation();
  static const int kElevationFieldNumber = 5;
  float elevation() const;
  void set_elevation(float value);

  // float rangeRate = 6;
  void clear_rangerate();
  static const int kRangeRateFieldNumber = 6;
  float rangerate() const;
  void set_rangerate(float value);

  // float amplitude = 7;
  void clear_amplitude();
  static const int kAmplitudeFieldNumber = 7;
  float amplitude() const;
  void set_amplitude(float value);

  // float reflectorID = 8;
  void clear_reflectorid();
  static const int kReflectorIDFieldNumber = 8;
  float reflectorid() const;
  void set_reflectorid(float value);

  // float instanceID = 9;
  void clear_instanceid();
  static const int kInstanceIDFieldNumber = 9;
  float instanceid() const;
  void set_instanceid(float value);

  // .Cognata.SDK.RadarOutput.Target.GeometricTarget geometricTarget = 50;
  bool has_geometrictarget() const;
  void clear_geometrictarget();
  static const int kGeometricTargetFieldNumber = 50;
  const ::Cognata::SDK::RadarOutput_Target_GeometricTarget& geometrictarget() const;
  ::Cognata::SDK::RadarOutput_Target_GeometricTarget* release_geometrictarget();
  ::Cognata::SDK::RadarOutput_Target_GeometricTarget* mutable_geometrictarget();
  void set_allocated_geometrictarget(::Cognata::SDK::RadarOutput_Target_GeometricTarget* geometrictarget);

  // .Cognata.SDK.RadarOutput.Target.RadarTarget radarTarget = 51;
  bool has_radartarget() const;
  void clear_radartarget();
  static const int kRadarTargetFieldNumber = 51;
  const ::Cognata::SDK::RadarOutput_Target_RadarTarget& radartarget() const;
  ::Cognata::SDK::RadarOutput_Target_RadarTarget* release_radartarget();
  ::Cognata::SDK::RadarOutput_Target_RadarTarget* mutable_radartarget();
  void set_allocated_radartarget(::Cognata::SDK::RadarOutput_Target_RadarTarget* radartarget);

  void clear_TargetType();
  TargetTypeCase TargetType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.RadarOutput.Target)
 private:
  class HasBitSetters;
  void set_has_geometrictarget();
  void set_has_radartarget();

  inline bool has_TargetType() const;
  inline void clear_has_TargetType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr beamsid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  float range_;
  float azimuth_;
  float elevation_;
  float rangerate_;
  float amplitude_;
  float reflectorid_;
  float instanceid_;
  union TargetTypeUnion {
    TargetTypeUnion() {}
    ::Cognata::SDK::RadarOutput_Target_GeometricTarget* geometrictarget_;
    ::Cognata::SDK::RadarOutput_Target_RadarTarget* radartarget_;
  } TargetType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class RadarOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RadarOutput) */ {
 public:
  RadarOutput();
  virtual ~RadarOutput();

  RadarOutput(const RadarOutput& from);
  RadarOutput(RadarOutput&& from) noexcept
    : RadarOutput() {
    *this = ::std::move(from);
  }

  inline RadarOutput& operator=(const RadarOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarOutput& operator=(RadarOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarOutput* internal_default_instance() {
    return reinterpret_cast<const RadarOutput*>(
               &_RadarOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(RadarOutput* other);
  friend void swap(RadarOutput& a, RadarOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarOutput* New() const final {
    return CreateMaybeMessage<RadarOutput>(nullptr);
  }

  RadarOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarOutput& from);
  void MergeFrom(const RadarOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RadarOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RadarOutput_Header Header;
  typedef RadarOutput_BeamInfo BeamInfo;
  typedef RadarOutput_Target Target;

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.RadarOutput.Target Targets = 2;
  int targets_size() const;
  void clear_targets();
  static const int kTargetsFieldNumber = 2;
  ::Cognata::SDK::RadarOutput_Target* mutable_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::RadarOutput_Target >*
      mutable_targets();
  const ::Cognata::SDK::RadarOutput_Target& targets(int index) const;
  ::Cognata::SDK::RadarOutput_Target* add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::RadarOutput_Target >&
      targets() const;

  // .Cognata.SDK.RadarOutput.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Cognata::SDK::RadarOutput_Header& header() const;
  ::Cognata::SDK::RadarOutput_Header* release_header();
  ::Cognata::SDK::RadarOutput_Header* mutable_header();
  void set_allocated_header(::Cognata::SDK::RadarOutput_Header* header);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RadarOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::RadarOutput_Target > targets_;
  ::Cognata::SDK::RadarOutput_Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class ThermalCameraOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ThermalCameraOutput) */ {
 public:
  ThermalCameraOutput();
  virtual ~ThermalCameraOutput();

  ThermalCameraOutput(const ThermalCameraOutput& from);
  ThermalCameraOutput(ThermalCameraOutput&& from) noexcept
    : ThermalCameraOutput() {
    *this = ::std::move(from);
  }

  inline ThermalCameraOutput& operator=(const ThermalCameraOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalCameraOutput& operator=(ThermalCameraOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThermalCameraOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThermalCameraOutput* internal_default_instance() {
    return reinterpret_cast<const ThermalCameraOutput*>(
               &_ThermalCameraOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(ThermalCameraOutput* other);
  friend void swap(ThermalCameraOutput& a, ThermalCameraOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThermalCameraOutput* New() const final {
    return CreateMaybeMessage<ThermalCameraOutput>(nullptr);
  }

  ThermalCameraOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalCameraOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThermalCameraOutput& from);
  void MergeFrom(const ThermalCameraOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalCameraOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ThermalCameraOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pixels = 3;
  void clear_pixels();
  static const int kPixelsFieldNumber = 3;
  const std::string& pixels() const;
  void set_pixels(const std::string& value);
  void set_pixels(std::string&& value);
  void set_pixels(const char* value);
  void set_pixels(const void* value, size_t size);
  std::string* mutable_pixels();
  std::string* release_pixels();
  void set_allocated_pixels(std::string* pixels);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.ThermalCameraOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class RadarPlacement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RadarPlacement) */ {
 public:
  RadarPlacement();
  virtual ~RadarPlacement();

  RadarPlacement(const RadarPlacement& from);
  RadarPlacement(RadarPlacement&& from) noexcept
    : RadarPlacement() {
    *this = ::std::move(from);
  }

  inline RadarPlacement& operator=(const RadarPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarPlacement& operator=(RadarPlacement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarPlacement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarPlacement* internal_default_instance() {
    return reinterpret_cast<const RadarPlacement*>(
               &_RadarPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(RadarPlacement* other);
  friend void swap(RadarPlacement& a, RadarPlacement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarPlacement* New() const final {
    return CreateMaybeMessage<RadarPlacement>(nullptr);
  }

  RadarPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarPlacement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarPlacement& from);
  void MergeFrom(const RadarPlacement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarPlacement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RadarPlacement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.SDKVector3 location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::Cognata::SDK::SDKVector3& location() const;
  ::Cognata::SDK::SDKVector3* release_location();
  ::Cognata::SDK::SDKVector3* mutable_location();
  void set_allocated_location(::Cognata::SDK::SDKVector3* location);

  // .Cognata.SDK.SDKVector3 orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  const ::Cognata::SDK::SDKVector3& orientation() const;
  ::Cognata::SDK::SDKVector3* release_orientation();
  ::Cognata::SDK::SDKVector3* mutable_orientation();
  void set_allocated_orientation(::Cognata::SDK::SDKVector3* orientation);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RadarPlacement)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::SDKVector3* location_;
  ::Cognata::SDK::SDKVector3* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class WakeupOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.WakeupOutput) */ {
 public:
  WakeupOutput();
  virtual ~WakeupOutput();

  WakeupOutput(const WakeupOutput& from);
  WakeupOutput(WakeupOutput&& from) noexcept
    : WakeupOutput() {
    *this = ::std::move(from);
  }

  inline WakeupOutput& operator=(const WakeupOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline WakeupOutput& operator=(WakeupOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WakeupOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WakeupOutput* internal_default_instance() {
    return reinterpret_cast<const WakeupOutput*>(
               &_WakeupOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(WakeupOutput* other);
  friend void swap(WakeupOutput& a, WakeupOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WakeupOutput* New() const final {
    return CreateMaybeMessage<WakeupOutput>(nullptr);
  }

  WakeupOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WakeupOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WakeupOutput& from);
  void MergeFrom(const WakeupOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WakeupOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.WakeupOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.WakeupOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class EngineVersionReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.EngineVersionReport) */ {
 public:
  EngineVersionReport();
  virtual ~EngineVersionReport();

  EngineVersionReport(const EngineVersionReport& from);
  EngineVersionReport(EngineVersionReport&& from) noexcept
    : EngineVersionReport() {
    *this = ::std::move(from);
  }

  inline EngineVersionReport& operator=(const EngineVersionReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineVersionReport& operator=(EngineVersionReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineVersionReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EngineVersionReport* internal_default_instance() {
    return reinterpret_cast<const EngineVersionReport*>(
               &_EngineVersionReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(EngineVersionReport* other);
  friend void swap(EngineVersionReport& a, EngineVersionReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EngineVersionReport* New() const final {
    return CreateMaybeMessage<EngineVersionReport>(nullptr);
  }

  EngineVersionReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineVersionReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineVersionReport& from);
  void MergeFrom(const EngineVersionReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineVersionReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.EngineVersionReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.EngineVersionReport)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class EndOfSimulation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.EndOfSimulation) */ {
 public:
  EndOfSimulation();
  virtual ~EndOfSimulation();

  EndOfSimulation(const EndOfSimulation& from);
  EndOfSimulation(EndOfSimulation&& from) noexcept
    : EndOfSimulation() {
    *this = ::std::move(from);
  }

  inline EndOfSimulation& operator=(const EndOfSimulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndOfSimulation& operator=(EndOfSimulation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndOfSimulation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndOfSimulation* internal_default_instance() {
    return reinterpret_cast<const EndOfSimulation*>(
               &_EndOfSimulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(EndOfSimulation* other);
  friend void swap(EndOfSimulation& a, EndOfSimulation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndOfSimulation* New() const final {
    return CreateMaybeMessage<EndOfSimulation>(nullptr);
  }

  EndOfSimulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndOfSimulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndOfSimulation& from);
  void MergeFrom(const EndOfSimulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndOfSimulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.EndOfSimulation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.EndOfSimulation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class E2COutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.E2COutput) */ {
 public:
  E2COutput();
  virtual ~E2COutput();

  E2COutput(const E2COutput& from);
  E2COutput(E2COutput&& from) noexcept
    : E2COutput() {
    *this = ::std::move(from);
  }

  inline E2COutput& operator=(const E2COutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline E2COutput& operator=(E2COutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const E2COutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const E2COutput* internal_default_instance() {
    return reinterpret_cast<const E2COutput*>(
               &_E2COutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(E2COutput* other);
  friend void swap(E2COutput& a, E2COutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline E2COutput* New() const final {
    return CreateMaybeMessage<E2COutput>(nullptr);
  }

  E2COutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<E2COutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const E2COutput& from);
  void MergeFrom(const E2COutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2COutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.E2COutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string param = 1;
  void clear_param();
  static const int kParamFieldNumber = 1;
  const std::string& param() const;
  void set_param(const std::string& value);
  void set_param(std::string&& value);
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  std::string* mutable_param();
  std::string* release_param();
  void set_allocated_param(std::string* param);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.E2COutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class LaneDetectorOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.LaneDetectorOutput) */ {
 public:
  LaneDetectorOutput();
  virtual ~LaneDetectorOutput();

  LaneDetectorOutput(const LaneDetectorOutput& from);
  LaneDetectorOutput(LaneDetectorOutput&& from) noexcept
    : LaneDetectorOutput() {
    *this = ::std::move(from);
  }

  inline LaneDetectorOutput& operator=(const LaneDetectorOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneDetectorOutput& operator=(LaneDetectorOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneDetectorOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneDetectorOutput* internal_default_instance() {
    return reinterpret_cast<const LaneDetectorOutput*>(
               &_LaneDetectorOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(LaneDetectorOutput* other);
  friend void swap(LaneDetectorOutput& a, LaneDetectorOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneDetectorOutput* New() const final {
    return CreateMaybeMessage<LaneDetectorOutput>(nullptr);
  }

  LaneDetectorOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneDetectorOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneDetectorOutput& from);
  void MergeFrom(const LaneDetectorOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneDetectorOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.LaneDetectorOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.SDKVector3 frontCoordsBuff = 1;
  int frontcoordsbuff_size() const;
  void clear_frontcoordsbuff();
  static const int kFrontCoordsBuffFieldNumber = 1;
  ::Cognata::SDK::SDKVector3* mutable_frontcoordsbuff(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector3 >*
      mutable_frontcoordsbuff();
  const ::Cognata::SDK::SDKVector3& frontcoordsbuff(int index) const;
  ::Cognata::SDK::SDKVector3* add_frontcoordsbuff();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector3 >&
      frontcoordsbuff() const;

  // repeated .Cognata.SDK.SDKVector3 backCoordsBuff = 2;
  int backcoordsbuff_size() const;
  void clear_backcoordsbuff();
  static const int kBackCoordsBuffFieldNumber = 2;
  ::Cognata::SDK::SDKVector3* mutable_backcoordsbuff(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector3 >*
      mutable_backcoordsbuff();
  const ::Cognata::SDK::SDKVector3& backcoordsbuff(int index) const;
  ::Cognata::SDK::SDKVector3* add_backcoordsbuff();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector3 >&
      backcoordsbuff() const;

  // uint32 numOfLanes = 3;
  void clear_numoflanes();
  static const int kNumOfLanesFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 numoflanes() const;
  void set_numoflanes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.LaneDetectorOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector3 > frontcoordsbuff_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector3 > backcoordsbuff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numoflanes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class WheelTelemetriesOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.WheelTelemetriesOutput) */ {
 public:
  WheelTelemetriesOutput();
  virtual ~WheelTelemetriesOutput();

  WheelTelemetriesOutput(const WheelTelemetriesOutput& from);
  WheelTelemetriesOutput(WheelTelemetriesOutput&& from) noexcept
    : WheelTelemetriesOutput() {
    *this = ::std::move(from);
  }

  inline WheelTelemetriesOutput& operator=(const WheelTelemetriesOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline WheelTelemetriesOutput& operator=(WheelTelemetriesOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WheelTelemetriesOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WheelTelemetriesOutput* internal_default_instance() {
    return reinterpret_cast<const WheelTelemetriesOutput*>(
               &_WheelTelemetriesOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(WheelTelemetriesOutput* other);
  friend void swap(WheelTelemetriesOutput& a, WheelTelemetriesOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WheelTelemetriesOutput* New() const final {
    return CreateMaybeMessage<WheelTelemetriesOutput>(nullptr);
  }

  WheelTelemetriesOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WheelTelemetriesOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WheelTelemetriesOutput& from);
  void MergeFrom(const WheelTelemetriesOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WheelTelemetriesOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.WheelTelemetriesOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.SDKVector2 tireForce = 6;
  bool has_tireforce() const;
  void clear_tireforce();
  static const int kTireForceFieldNumber = 6;
  const ::Cognata::SDK::SDKVector2& tireforce() const;
  ::Cognata::SDK::SDKVector2* release_tireforce();
  ::Cognata::SDK::SDKVector2* mutable_tireforce();
  void set_allocated_tireforce(::Cognata::SDK::SDKVector2* tireforce);

  // .Cognata.SDK.SDKVector2 tireSlip = 7;
  bool has_tireslip() const;
  void clear_tireslip();
  static const int kTireSlipFieldNumber = 7;
  const ::Cognata::SDK::SDKVector2& tireslip() const;
  ::Cognata::SDK::SDKVector2* release_tireslip();
  ::Cognata::SDK::SDKVector2* mutable_tireslip();
  void set_allocated_tireslip(::Cognata::SDK::SDKVector2* tireslip);

  // .Cognata.SDK.SDKVector3 wheelVelocity = 16;
  bool has_wheelvelocity() const;
  void clear_wheelvelocity();
  static const int kWheelVelocityFieldNumber = 16;
  const ::Cognata::SDK::SDKVector3& wheelvelocity() const;
  ::Cognata::SDK::SDKVector3* release_wheelvelocity();
  ::Cognata::SDK::SDKVector3* mutable_wheelvelocity();
  void set_allocated_wheelvelocity(::Cognata::SDK::SDKVector3* wheelvelocity);

  // .Cognata.SDK.GroundMaterial groundMaterial = 18;
  bool has_groundmaterial() const;
  void clear_groundmaterial();
  static const int kGroundMaterialFieldNumber = 18;
  const ::Cognata::SDK::GroundMaterial& groundmaterial() const;
  ::Cognata::SDK::GroundMaterial* release_groundmaterial();
  ::Cognata::SDK::GroundMaterial* mutable_groundmaterial();
  void set_allocated_groundmaterial(::Cognata::SDK::GroundMaterial* groundmaterial);

  // float angularVelocity = 1;
  void clear_angularvelocity();
  static const int kAngularVelocityFieldNumber = 1;
  float angularvelocity() const;
  void set_angularvelocity(float value);

  // float steerAngle = 2;
  void clear_steerangle();
  static const int kSteerAngleFieldNumber = 2;
  float steerangle() const;
  void set_steerangle(float value);

  // float driveTorque = 3;
  void clear_drivetorque();
  static const int kDriveTorqueFieldNumber = 3;
  float drivetorque() const;
  void set_drivetorque(float value);

  // float brakeTorque = 4;
  void clear_braketorque();
  static const int kBrakeTorqueFieldNumber = 4;
  float braketorque() const;
  void set_braketorque(float value);

  // float reactionTorque = 5;
  void clear_reactiontorque();
  static const int kReactionTorqueFieldNumber = 5;
  float reactiontorque() const;
  void set_reactiontorque(float value);

  // float combinedTireSlip = 9;
  void clear_combinedtireslip();
  static const int kCombinedTireSlipFieldNumber = 9;
  float combinedtireslip() const;
  void set_combinedtireslip(float value);

  // float suspensionCompression = 10;
  void clear_suspensioncompression();
  static const int kSuspensionCompressionFieldNumber = 10;
  float suspensioncompression() const;
  void set_suspensioncompression(float value);

  // float downforce = 11;
  void clear_downforce();
  static const int kDownforceFieldNumber = 11;
  float downforce() const;
  void set_downforce(float value);

  // bool canSlip = 8;
  void clear_canslip();
  static const int kCanSlipFieldNumber = 8;
  bool canslip() const;
  void set_canslip(bool value);

  // bool grounded = 15;
  void clear_grounded();
  static const int kGroundedFieldNumber = 15;
  bool grounded() const;
  void set_grounded(bool value);

  // float contactAngle = 12;
  void clear_contactangle();
  static const int kContactAngleFieldNumber = 12;
  float contactangle() const;
  void set_contactangle(float value);

  // float contactDepth = 13;
  void clear_contactdepth();
  static const int kContactDepthFieldNumber = 13;
  float contactdepth() const;
  void set_contactdepth(float value);

  // float contactSpeed = 14;
  void clear_contactspeed();
  static const int kContactSpeedFieldNumber = 14;
  float contactspeed() const;
  void set_contactspeed(float value);

  // float suspensionLoad = 17;
  void clear_suspensionload();
  static const int kSuspensionLoadFieldNumber = 17;
  float suspensionload() const;
  void set_suspensionload(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.WheelTelemetriesOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::SDKVector2* tireforce_;
  ::Cognata::SDK::SDKVector2* tireslip_;
  ::Cognata::SDK::SDKVector3* wheelvelocity_;
  ::Cognata::SDK::GroundMaterial* groundmaterial_;
  float angularvelocity_;
  float steerangle_;
  float drivetorque_;
  float braketorque_;
  float reactiontorque_;
  float combinedtireslip_;
  float suspensioncompression_;
  float downforce_;
  bool canslip_;
  bool grounded_;
  float contactangle_;
  float contactdepth_;
  float contactspeed_;
  float suspensionload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class GroundMaterial :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GroundMaterial) */ {
 public:
  GroundMaterial();
  virtual ~GroundMaterial();

  GroundMaterial(const GroundMaterial& from);
  GroundMaterial(GroundMaterial&& from) noexcept
    : GroundMaterial() {
    *this = ::std::move(from);
  }

  inline GroundMaterial& operator=(const GroundMaterial& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundMaterial& operator=(GroundMaterial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroundMaterial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroundMaterial* internal_default_instance() {
    return reinterpret_cast<const GroundMaterial*>(
               &_GroundMaterial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(GroundMaterial* other);
  friend void swap(GroundMaterial& a, GroundMaterial& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroundMaterial* New() const final {
    return CreateMaybeMessage<GroundMaterial>(nullptr);
  }

  GroundMaterial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroundMaterial>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroundMaterial& from);
  void MergeFrom(const GroundMaterial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundMaterial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GroundMaterial";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GroundMaterial_SurfaceType SurfaceType;
  static constexpr SurfaceType HARD =
    GroundMaterial_SurfaceType_HARD;
  static constexpr SurfaceType SOFT =
    GroundMaterial_SurfaceType_SOFT;
  static constexpr SurfaceType NEUTRAL =
    GroundMaterial_SurfaceType_NEUTRAL;
  static inline bool SurfaceType_IsValid(int value) {
    return GroundMaterial_SurfaceType_IsValid(value);
  }
  static constexpr SurfaceType SurfaceType_MIN =
    GroundMaterial_SurfaceType_SurfaceType_MIN;
  static constexpr SurfaceType SurfaceType_MAX =
    GroundMaterial_SurfaceType_SurfaceType_MAX;
  static constexpr int SurfaceType_ARRAYSIZE =
    GroundMaterial_SurfaceType_SurfaceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SurfaceType_descriptor() {
    return GroundMaterial_SurfaceType_descriptor();
  }
  template<typename T>
  static inline const std::string& SurfaceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SurfaceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SurfaceType_Name.");
    return GroundMaterial_SurfaceType_Name(enum_t_value);
  }
  static inline bool SurfaceType_Parse(const std::string& name,
      SurfaceType* value) {
    return GroundMaterial_SurfaceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Cognata.SDK.GroundMaterial.SurfaceType sufraceType = 1;
  void clear_sufracetype();
  static const int kSufraceTypeFieldNumber = 1;
  ::Cognata::SDK::GroundMaterial_SurfaceType sufracetype() const;
  void set_sufracetype(::Cognata::SDK::GroundMaterial_SurfaceType value);

  // float grip = 2;
  void clear_grip();
  static const int kGripFieldNumber = 2;
  float grip() const;
  void set_grip(float value);

  // float drag = 3;
  void clear_drag();
  static const int kDragFieldNumber = 3;
  float drag() const;
  void set_drag(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.GroundMaterial)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int sufracetype_;
  float grip_;
  float drag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class CarTelemetriesOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.CarTelemetriesOutput) */ {
 public:
  CarTelemetriesOutput();
  virtual ~CarTelemetriesOutput();

  CarTelemetriesOutput(const CarTelemetriesOutput& from);
  CarTelemetriesOutput(CarTelemetriesOutput&& from) noexcept
    : CarTelemetriesOutput() {
    *this = ::std::move(from);
  }

  inline CarTelemetriesOutput& operator=(const CarTelemetriesOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarTelemetriesOutput& operator=(CarTelemetriesOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarTelemetriesOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarTelemetriesOutput* internal_default_instance() {
    return reinterpret_cast<const CarTelemetriesOutput*>(
               &_CarTelemetriesOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(CarTelemetriesOutput* other);
  friend void swap(CarTelemetriesOutput& a, CarTelemetriesOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarTelemetriesOutput* New() const final {
    return CreateMaybeMessage<CarTelemetriesOutput>(nullptr);
  }

  CarTelemetriesOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarTelemetriesOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarTelemetriesOutput& from);
  void MergeFrom(const CarTelemetriesOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarTelemetriesOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.CarTelemetriesOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.WheelTelemetriesOutput wheels = 13;
  int wheels_size() const;
  void clear_wheels();
  static const int kWheelsFieldNumber = 13;
  ::Cognata::SDK::WheelTelemetriesOutput* mutable_wheels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::WheelTelemetriesOutput >*
      mutable_wheels();
  const ::Cognata::SDK::WheelTelemetriesOutput& wheels(int index) const;
  ::Cognata::SDK::WheelTelemetriesOutput* add_wheels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::WheelTelemetriesOutput >&
      wheels() const;

  // .Cognata.SDK.SDKVector3 centerOfMassLocalPosition = 6;
  bool has_centerofmasslocalposition() const;
  void clear_centerofmasslocalposition();
  static const int kCenterOfMassLocalPositionFieldNumber = 6;
  const ::Cognata::SDK::SDKVector3& centerofmasslocalposition() const;
  ::Cognata::SDK::SDKVector3* release_centerofmasslocalposition();
  ::Cognata::SDK::SDKVector3* mutable_centerofmasslocalposition();
  void set_allocated_centerofmasslocalposition(::Cognata::SDK::SDKVector3* centerofmasslocalposition);

  // .Cognata.SDK.SDKVector3 centerOfMassLocalRotation = 7;
  bool has_centerofmasslocalrotation() const;
  void clear_centerofmasslocalrotation();
  static const int kCenterOfMassLocalRotationFieldNumber = 7;
  const ::Cognata::SDK::SDKVector3& centerofmasslocalrotation() const;
  ::Cognata::SDK::SDKVector3* release_centerofmasslocalrotation();
  ::Cognata::SDK::SDKVector3* mutable_centerofmasslocalrotation();
  void set_allocated_centerofmasslocalrotation(::Cognata::SDK::SDKVector3* centerofmasslocalrotation);

  // .Cognata.SDK.CarConfiguration.SignalState turnLight = 1;
  void clear_turnlight();
  static const int kTurnLightFieldNumber = 1;
  ::Cognata::SDK::CarConfiguration_SignalState turnlight() const;
  void set_turnlight(::Cognata::SDK::CarConfiguration_SignalState value);

  // float acceleration = 2;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 2;
  float acceleration() const;
  void set_acceleration(float value);

  // float brake = 3;
  void clear_brake();
  static const int kBrakeFieldNumber = 3;
  float brake() const;
  void set_brake(float value);

  // float gas = 4;
  void clear_gas();
  static const int kGasFieldNumber = 4;
  float gas() const;
  void set_gas(float value);

  // float steering = 5;
  void clear_steering();
  static const int kSteeringFieldNumber = 5;
  float steering() const;
  void set_steering(float value);

  // float engineRpm = 8;
  void clear_enginerpm();
  static const int kEngineRpmFieldNumber = 8;
  float enginerpm() const;
  void set_enginerpm(float value);

  // float engineLoad = 9;
  void clear_engineload();
  static const int kEngineLoadFieldNumber = 9;
  float engineload() const;
  void set_engineload(float value);

  // float engineTorque = 10;
  void clear_enginetorque();
  static const int kEngineTorqueFieldNumber = 10;
  float enginetorque() const;
  void set_enginetorque(float value);

  // float enginePower = 11;
  void clear_enginepower();
  static const int kEnginePowerFieldNumber = 11;
  float enginepower() const;
  void set_enginepower(float value);

  // int32 currentGear = 12;
  void clear_currentgear();
  static const int kCurrentGearFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 currentgear() const;
  void set_currentgear(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .Cognata.SDK.DrivingControllerType currentCarController = 14;
  void clear_currentcarcontroller();
  static const int kCurrentCarControllerFieldNumber = 14;
  ::Cognata::SDK::DrivingControllerType currentcarcontroller() const;
  void set_currentcarcontroller(::Cognata::SDK::DrivingControllerType value);

  // float clutchLockRatio = 15;
  void clear_clutchlockratio();
  static const int kClutchLockRatioFieldNumber = 15;
  float clutchlockratio() const;
  void set_clutchlockratio(float value);

  // float clutchTorque = 16;
  void clear_clutchtorque();
  static const int kClutchTorqueFieldNumber = 16;
  float clutchtorque() const;
  void set_clutchtorque(float value);

  // float engineFuelRate = 17;
  void clear_enginefuelrate();
  static const int kEngineFuelRateFieldNumber = 17;
  float enginefuelrate() const;
  void set_enginefuelrate(float value);

  // .Cognata.SDK.CarConfiguration.GearState gearboxMode = 18;
  void clear_gearboxmode();
  static const int kGearboxModeFieldNumber = 18;
  ::Cognata::SDK::CarConfiguration_GearState gearboxmode() const;
  void set_gearboxmode(::Cognata::SDK::CarConfiguration_GearState value);

  // float retarderTorque = 20;
  void clear_retardertorque();
  static const int kRetarderTorqueFieldNumber = 20;
  float retardertorque() const;
  void set_retardertorque(float value);

  // float transmissionRpm = 21;
  void clear_transmissionrpm();
  static const int kTransmissionRpmFieldNumber = 21;
  float transmissionrpm() const;
  void set_transmissionrpm(float value);

  // bool isGearShifting = 19;
  void clear_isgearshifting();
  static const int kIsGearShiftingFieldNumber = 19;
  bool isgearshifting() const;
  void set_isgearshifting(bool value);

  // bool isEngineOnButStalled = 22;
  void clear_isengineonbutstalled();
  static const int kIsEngineOnButStalledFieldNumber = 22;
  bool isengineonbutstalled() const;
  void set_isengineonbutstalled(bool value);

  // bool isEngineWorking = 23;
  void clear_isengineworking();
  static const int kIsEngineWorkingFieldNumber = 23;
  bool isengineworking() const;
  void set_isengineworking(bool value);

  // bool isEngineStarting = 24;
  void clear_isenginestarting();
  static const int kIsEngineStartingFieldNumber = 24;
  bool isenginestarting() const;
  void set_isenginestarting(bool value);

  // bool isEngineLimitReached = 25;
  void clear_isenginelimitreached();
  static const int kIsEngineLimitReachedFieldNumber = 25;
  bool isenginelimitreached() const;
  void set_isenginelimitreached(bool value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.CarTelemetriesOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::WheelTelemetriesOutput > wheels_;
  ::Cognata::SDK::SDKVector3* centerofmasslocalposition_;
  ::Cognata::SDK::SDKVector3* centerofmasslocalrotation_;
  int turnlight_;
  float acceleration_;
  float brake_;
  float gas_;
  float steering_;
  float enginerpm_;
  float engineload_;
  float enginetorque_;
  float enginepower_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentgear_;
  int currentcarcontroller_;
  float clutchlockratio_;
  float clutchtorque_;
  float enginefuelrate_;
  int gearboxmode_;
  float retardertorque_;
  float transmissionrpm_;
  bool isgearshifting_;
  bool isengineonbutstalled_;
  bool isengineworking_;
  bool isenginestarting_;
  bool isenginelimitreached_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// -------------------------------------------------------------------

class DynamicObjectGroundTruthOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.DynamicObjectGroundTruthOutput) */ {
 public:
  DynamicObjectGroundTruthOutput();
  virtual ~DynamicObjectGroundTruthOutput();

  DynamicObjectGroundTruthOutput(const DynamicObjectGroundTruthOutput& from);
  DynamicObjectGroundTruthOutput(DynamicObjectGroundTruthOutput&& from) noexcept
    : DynamicObjectGroundTruthOutput() {
    *this = ::std::move(from);
  }

  inline DynamicObjectGroundTruthOutput& operator=(const DynamicObjectGroundTruthOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicObjectGroundTruthOutput& operator=(DynamicObjectGroundTruthOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicObjectGroundTruthOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicObjectGroundTruthOutput* internal_default_instance() {
    return reinterpret_cast<const DynamicObjectGroundTruthOutput*>(
               &_DynamicObjectGroundTruthOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(DynamicObjectGroundTruthOutput* other);
  friend void swap(DynamicObjectGroundTruthOutput& a, DynamicObjectGroundTruthOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DynamicObjectGroundTruthOutput* New() const final {
    return CreateMaybeMessage<DynamicObjectGroundTruthOutput>(nullptr);
  }

  DynamicObjectGroundTruthOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicObjectGroundTruthOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicObjectGroundTruthOutput& from);
  void MergeFrom(const DynamicObjectGroundTruthOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicObjectGroundTruthOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.DynamicObjectGroundTruthOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EngineToClientMessage_2eproto);
    return ::descriptor_table_EngineToClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.ObjectDescription objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  ::Cognata::SDK::ObjectDescription* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::ObjectDescription >*
      mutable_objects();
  const ::Cognata::SDK::ObjectDescription& objects(int index) const;
  ::Cognata::SDK::ObjectDescription* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::ObjectDescription >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Cognata.SDK.DynamicObjectGroundTruthOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::ObjectDescription > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EngineToClientMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EngineToClientMessage

// float simulationTimeInSec = 1;
inline void EngineToClientMessage::clear_simulationtimeinsec() {
  simulationtimeinsec_ = 0;
}
inline float EngineToClientMessage::simulationtimeinsec() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.EngineToClientMessage.simulationTimeInSec)
  return simulationtimeinsec_;
}
inline void EngineToClientMessage::set_simulationtimeinsec(float value) {
  
  simulationtimeinsec_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.EngineToClientMessage.simulationTimeInSec)
}

// uint32 frameNumber = 2;
inline void EngineToClientMessage::clear_framenumber() {
  framenumber_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EngineToClientMessage::framenumber() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.EngineToClientMessage.frameNumber)
  return framenumber_;
}
inline void EngineToClientMessage::set_framenumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  framenumber_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.EngineToClientMessage.frameNumber)
}

// .Cognata.SDK.QueryReport queryReport = 10;
inline bool EngineToClientMessage::has_queryreport() const {
  return ReportType_case() == kQueryReport;
}
inline void EngineToClientMessage::set_has_queryreport() {
  _oneof_case_[0] = kQueryReport;
}
inline void EngineToClientMessage::clear_queryreport() {
  if (has_queryreport()) {
    delete ReportType_.queryreport_;
    clear_has_ReportType();
  }
}
inline ::Cognata::SDK::QueryReport* EngineToClientMessage::release_queryreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.EngineToClientMessage.queryReport)
  if (has_queryreport()) {
    clear_has_ReportType();
      ::Cognata::SDK::QueryReport* temp = ReportType_.queryreport_;
    ReportType_.queryreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::QueryReport& EngineToClientMessage::queryreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.EngineToClientMessage.queryReport)
  return has_queryreport()
      ? *ReportType_.queryreport_
      : *reinterpret_cast< ::Cognata::SDK::QueryReport*>(&::Cognata::SDK::_QueryReport_default_instance_);
}
inline ::Cognata::SDK::QueryReport* EngineToClientMessage::mutable_queryreport() {
  if (!has_queryreport()) {
    clear_ReportType();
    set_has_queryreport();
    ReportType_.queryreport_ = CreateMaybeMessage< ::Cognata::SDK::QueryReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.EngineToClientMessage.queryReport)
  return ReportType_.queryreport_;
}

// .Cognata.SDK.SensorData registerReport = 11;
inline bool EngineToClientMessage::has_registerreport() const {
  return ReportType_case() == kRegisterReport;
}
inline void EngineToClientMessage::set_has_registerreport() {
  _oneof_case_[0] = kRegisterReport;
}
inline void EngineToClientMessage::clear_registerreport() {
  if (has_registerreport()) {
    delete ReportType_.registerreport_;
    clear_has_ReportType();
  }
}
inline ::Cognata::SDK::SensorData* EngineToClientMessage::release_registerreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.EngineToClientMessage.registerReport)
  if (has_registerreport()) {
    clear_has_ReportType();
      ::Cognata::SDK::SensorData* temp = ReportType_.registerreport_;
    ReportType_.registerreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SensorData& EngineToClientMessage::registerreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.EngineToClientMessage.registerReport)
  return has_registerreport()
      ? *ReportType_.registerreport_
      : *reinterpret_cast< ::Cognata::SDK::SensorData*>(&::Cognata::SDK::_SensorData_default_instance_);
}
inline ::Cognata::SDK::SensorData* EngineToClientMessage::mutable_registerreport() {
  if (!has_registerreport()) {
    clear_ReportType();
    set_has_registerreport();
    ReportType_.registerreport_ = CreateMaybeMessage< ::Cognata::SDK::SensorData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.EngineToClientMessage.registerReport)
  return ReportType_.registerreport_;
}

// .Cognata.SDK.ErrorMessage errorMessage = 12;
inline bool EngineToClientMessage::has_errormessage() const {
  return ReportType_case() == kErrorMessage;
}
inline void EngineToClientMessage::set_has_errormessage() {
  _oneof_case_[0] = kErrorMessage;
}
inline ::Cognata::SDK::ErrorMessage* EngineToClientMessage::release_errormessage() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.EngineToClientMessage.errorMessage)
  if (has_errormessage()) {
    clear_has_ReportType();
      ::Cognata::SDK::ErrorMessage* temp = ReportType_.errormessage_;
    ReportType_.errormessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ErrorMessage& EngineToClientMessage::errormessage() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.EngineToClientMessage.errorMessage)
  return has_errormessage()
      ? *ReportType_.errormessage_
      : *reinterpret_cast< ::Cognata::SDK::ErrorMessage*>(&::Cognata::SDK::_ErrorMessage_default_instance_);
}
inline ::Cognata::SDK::ErrorMessage* EngineToClientMessage::mutable_errormessage() {
  if (!has_errormessage()) {
    clear_ReportType();
    set_has_errormessage();
    ReportType_.errormessage_ = CreateMaybeMessage< ::Cognata::SDK::ErrorMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.EngineToClientMessage.errorMessage)
  return ReportType_.errormessage_;
}

// .Cognata.SDK.EndOfSimulation endOfSimulation = 13;
inline bool EngineToClientMessage::has_endofsimulation() const {
  return ReportType_case() == kEndOfSimulation;
}
inline void EngineToClientMessage::set_has_endofsimulation() {
  _oneof_case_[0] = kEndOfSimulation;
}
inline void EngineToClientMessage::clear_endofsimulation() {
  if (has_endofsimulation()) {
    delete ReportType_.endofsimulation_;
    clear_has_ReportType();
  }
}
inline ::Cognata::SDK::EndOfSimulation* EngineToClientMessage::release_endofsimulation() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.EngineToClientMessage.endOfSimulation)
  if (has_endofsimulation()) {
    clear_has_ReportType();
      ::Cognata::SDK::EndOfSimulation* temp = ReportType_.endofsimulation_;
    ReportType_.endofsimulation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::EndOfSimulation& EngineToClientMessage::endofsimulation() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.EngineToClientMessage.endOfSimulation)
  return has_endofsimulation()
      ? *ReportType_.endofsimulation_
      : *reinterpret_cast< ::Cognata::SDK::EndOfSimulation*>(&::Cognata::SDK::_EndOfSimulation_default_instance_);
}
inline ::Cognata::SDK::EndOfSimulation* EngineToClientMessage::mutable_endofsimulation() {
  if (!has_endofsimulation()) {
    clear_ReportType();
    set_has_endofsimulation();
    ReportType_.endofsimulation_ = CreateMaybeMessage< ::Cognata::SDK::EndOfSimulation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.EngineToClientMessage.endOfSimulation)
  return ReportType_.endofsimulation_;
}

// .Cognata.SDK.LoadingStateReport loadingState = 14;
inline bool EngineToClientMessage::has_loadingstate() const {
  return ReportType_case() == kLoadingState;
}
inline void EngineToClientMessage::set_has_loadingstate() {
  _oneof_case_[0] = kLoadingState;
}
inline void EngineToClientMessage::clear_loadingstate() {
  if (has_loadingstate()) {
    delete ReportType_.loadingstate_;
    clear_has_ReportType();
  }
}
inline ::Cognata::SDK::LoadingStateReport* EngineToClientMessage::release_loadingstate() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.EngineToClientMessage.loadingState)
  if (has_loadingstate()) {
    clear_has_ReportType();
      ::Cognata::SDK::LoadingStateReport* temp = ReportType_.loadingstate_;
    ReportType_.loadingstate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::LoadingStateReport& EngineToClientMessage::loadingstate() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.EngineToClientMessage.loadingState)
  return has_loadingstate()
      ? *ReportType_.loadingstate_
      : *reinterpret_cast< ::Cognata::SDK::LoadingStateReport*>(&::Cognata::SDK::_LoadingStateReport_default_instance_);
}
inline ::Cognata::SDK::LoadingStateReport* EngineToClientMessage::mutable_loadingstate() {
  if (!has_loadingstate()) {
    clear_ReportType();
    set_has_loadingstate();
    ReportType_.loadingstate_ = CreateMaybeMessage< ::Cognata::SDK::LoadingStateReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.EngineToClientMessage.loadingState)
  return ReportType_.loadingstate_;
}

inline bool EngineToClientMessage::has_ReportType() const {
  return ReportType_case() != REPORTTYPE_NOT_SET;
}
inline void EngineToClientMessage::clear_has_ReportType() {
  _oneof_case_[0] = REPORTTYPE_NOT_SET;
}
inline EngineToClientMessage::ReportTypeCase EngineToClientMessage::ReportType_case() const {
  return EngineToClientMessage::ReportTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConnectionPortReport

// string port = 1;
inline void ConnectionPortReport::clear_port() {
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnectionPortReport::port() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ConnectionPortReport.port)
  return port_.GetNoArena();
}
inline void ConnectionPortReport::set_port(const std::string& value) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.ConnectionPortReport.port)
}
inline void ConnectionPortReport::set_port(std::string&& value) {
  
  port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.ConnectionPortReport.port)
}
inline void ConnectionPortReport::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.ConnectionPortReport.port)
}
inline void ConnectionPortReport::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.ConnectionPortReport.port)
}
inline std::string* ConnectionPortReport::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ConnectionPortReport.port)
  return port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectionPortReport::release_port() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ConnectionPortReport.port)
  
  return port_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionPortReport::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ConnectionPortReport.port)
}

// -------------------------------------------------------------------

// QueryReport

// .Cognata.SDK.SensorsQueryReport sensorsQueryReport = 10;
inline bool QueryReport::has_sensorsqueryreport() const {
  return QueryType_case() == kSensorsQueryReport;
}
inline void QueryReport::set_has_sensorsqueryreport() {
  _oneof_case_[0] = kSensorsQueryReport;
}
inline void QueryReport::clear_sensorsqueryreport() {
  if (has_sensorsqueryreport()) {
    delete QueryType_.sensorsqueryreport_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::SensorsQueryReport* QueryReport::release_sensorsqueryreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.QueryReport.sensorsQueryReport)
  if (has_sensorsqueryreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::SensorsQueryReport* temp = QueryType_.sensorsqueryreport_;
    QueryType_.sensorsqueryreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SensorsQueryReport& QueryReport::sensorsqueryreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.QueryReport.sensorsQueryReport)
  return has_sensorsqueryreport()
      ? *QueryType_.sensorsqueryreport_
      : *reinterpret_cast< ::Cognata::SDK::SensorsQueryReport*>(&::Cognata::SDK::_SensorsQueryReport_default_instance_);
}
inline ::Cognata::SDK::SensorsQueryReport* QueryReport::mutable_sensorsqueryreport() {
  if (!has_sensorsqueryreport()) {
    clear_QueryType();
    set_has_sensorsqueryreport();
    QueryType_.sensorsqueryreport_ = CreateMaybeMessage< ::Cognata::SDK::SensorsQueryReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.QueryReport.sensorsQueryReport)
  return QueryType_.sensorsqueryreport_;
}

// .Cognata.SDK.CarsQueryReport carsQueryReport = 11;
inline bool QueryReport::has_carsqueryreport() const {
  return QueryType_case() == kCarsQueryReport;
}
inline void QueryReport::set_has_carsqueryreport() {
  _oneof_case_[0] = kCarsQueryReport;
}
inline void QueryReport::clear_carsqueryreport() {
  if (has_carsqueryreport()) {
    delete QueryType_.carsqueryreport_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::CarsQueryReport* QueryReport::release_carsqueryreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.QueryReport.carsQueryReport)
  if (has_carsqueryreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::CarsQueryReport* temp = QueryType_.carsqueryreport_;
    QueryType_.carsqueryreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::CarsQueryReport& QueryReport::carsqueryreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.QueryReport.carsQueryReport)
  return has_carsqueryreport()
      ? *QueryType_.carsqueryreport_
      : *reinterpret_cast< ::Cognata::SDK::CarsQueryReport*>(&::Cognata::SDK::_CarsQueryReport_default_instance_);
}
inline ::Cognata::SDK::CarsQueryReport* QueryReport::mutable_carsqueryreport() {
  if (!has_carsqueryreport()) {
    clear_QueryType();
    set_has_carsqueryreport();
    QueryType_.carsqueryreport_ = CreateMaybeMessage< ::Cognata::SDK::CarsQueryReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.QueryReport.carsQueryReport)
  return QueryType_.carsqueryreport_;
}

// .Cognata.SDK.TerrainQueryReport terrainQueryReport = 12;
inline bool QueryReport::has_terrainqueryreport() const {
  return QueryType_case() == kTerrainQueryReport;
}
inline void QueryReport::set_has_terrainqueryreport() {
  _oneof_case_[0] = kTerrainQueryReport;
}
inline void QueryReport::clear_terrainqueryreport() {
  if (has_terrainqueryreport()) {
    delete QueryType_.terrainqueryreport_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::TerrainQueryReport* QueryReport::release_terrainqueryreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.QueryReport.terrainQueryReport)
  if (has_terrainqueryreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::TerrainQueryReport* temp = QueryType_.terrainqueryreport_;
    QueryType_.terrainqueryreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::TerrainQueryReport& QueryReport::terrainqueryreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.QueryReport.terrainQueryReport)
  return has_terrainqueryreport()
      ? *QueryType_.terrainqueryreport_
      : *reinterpret_cast< ::Cognata::SDK::TerrainQueryReport*>(&::Cognata::SDK::_TerrainQueryReport_default_instance_);
}
inline ::Cognata::SDK::TerrainQueryReport* QueryReport::mutable_terrainqueryreport() {
  if (!has_terrainqueryreport()) {
    clear_QueryType();
    set_has_terrainqueryreport();
    QueryType_.terrainqueryreport_ = CreateMaybeMessage< ::Cognata::SDK::TerrainQueryReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.QueryReport.terrainQueryReport)
  return QueryType_.terrainqueryreport_;
}

// .Cognata.SDK.EngineVersionReport engineVersionReport = 13;
inline bool QueryReport::has_engineversionreport() const {
  return QueryType_case() == kEngineVersionReport;
}
inline void QueryReport::set_has_engineversionreport() {
  _oneof_case_[0] = kEngineVersionReport;
}
inline void QueryReport::clear_engineversionreport() {
  if (has_engineversionreport()) {
    delete QueryType_.engineversionreport_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::EngineVersionReport* QueryReport::release_engineversionreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.QueryReport.engineVersionReport)
  if (has_engineversionreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::EngineVersionReport* temp = QueryType_.engineversionreport_;
    QueryType_.engineversionreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::EngineVersionReport& QueryReport::engineversionreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.QueryReport.engineVersionReport)
  return has_engineversionreport()
      ? *QueryType_.engineversionreport_
      : *reinterpret_cast< ::Cognata::SDK::EngineVersionReport*>(&::Cognata::SDK::_EngineVersionReport_default_instance_);
}
inline ::Cognata::SDK::EngineVersionReport* QueryReport::mutable_engineversionreport() {
  if (!has_engineversionreport()) {
    clear_QueryType();
    set_has_engineversionreport();
    QueryType_.engineversionreport_ = CreateMaybeMessage< ::Cognata::SDK::EngineVersionReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.QueryReport.engineVersionReport)
  return QueryType_.engineversionreport_;
}

// .Cognata.SDK.MovingObjectsQueryReport movingObjectsQueryReport = 14;
inline bool QueryReport::has_movingobjectsqueryreport() const {
  return QueryType_case() == kMovingObjectsQueryReport;
}
inline void QueryReport::set_has_movingobjectsqueryreport() {
  _oneof_case_[0] = kMovingObjectsQueryReport;
}
inline void QueryReport::clear_movingobjectsqueryreport() {
  if (has_movingobjectsqueryreport()) {
    delete QueryType_.movingobjectsqueryreport_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::MovingObjectsQueryReport* QueryReport::release_movingobjectsqueryreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.QueryReport.movingObjectsQueryReport)
  if (has_movingobjectsqueryreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::MovingObjectsQueryReport* temp = QueryType_.movingobjectsqueryreport_;
    QueryType_.movingobjectsqueryreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::MovingObjectsQueryReport& QueryReport::movingobjectsqueryreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.QueryReport.movingObjectsQueryReport)
  return has_movingobjectsqueryreport()
      ? *QueryType_.movingobjectsqueryreport_
      : *reinterpret_cast< ::Cognata::SDK::MovingObjectsQueryReport*>(&::Cognata::SDK::_MovingObjectsQueryReport_default_instance_);
}
inline ::Cognata::SDK::MovingObjectsQueryReport* QueryReport::mutable_movingobjectsqueryreport() {
  if (!has_movingobjectsqueryreport()) {
    clear_QueryType();
    set_has_movingobjectsqueryreport();
    QueryType_.movingobjectsqueryreport_ = CreateMaybeMessage< ::Cognata::SDK::MovingObjectsQueryReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.QueryReport.movingObjectsQueryReport)
  return QueryType_.movingobjectsqueryreport_;
}

// .Cognata.SDK.GlobalSensorsQueryReport globalSensorsQueryReport = 15;
inline bool QueryReport::has_globalsensorsqueryreport() const {
  return QueryType_case() == kGlobalSensorsQueryReport;
}
inline void QueryReport::set_has_globalsensorsqueryreport() {
  _oneof_case_[0] = kGlobalSensorsQueryReport;
}
inline void QueryReport::clear_globalsensorsqueryreport() {
  if (has_globalsensorsqueryreport()) {
    delete QueryType_.globalsensorsqueryreport_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::GlobalSensorsQueryReport* QueryReport::release_globalsensorsqueryreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.QueryReport.globalSensorsQueryReport)
  if (has_globalsensorsqueryreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::GlobalSensorsQueryReport* temp = QueryType_.globalsensorsqueryreport_;
    QueryType_.globalsensorsqueryreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::GlobalSensorsQueryReport& QueryReport::globalsensorsqueryreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.QueryReport.globalSensorsQueryReport)
  return has_globalsensorsqueryreport()
      ? *QueryType_.globalsensorsqueryreport_
      : *reinterpret_cast< ::Cognata::SDK::GlobalSensorsQueryReport*>(&::Cognata::SDK::_GlobalSensorsQueryReport_default_instance_);
}
inline ::Cognata::SDK::GlobalSensorsQueryReport* QueryReport::mutable_globalsensorsqueryreport() {
  if (!has_globalsensorsqueryreport()) {
    clear_QueryType();
    set_has_globalsensorsqueryreport();
    QueryType_.globalsensorsqueryreport_ = CreateMaybeMessage< ::Cognata::SDK::GlobalSensorsQueryReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.QueryReport.globalSensorsQueryReport)
  return QueryType_.globalsensorsqueryreport_;
}

// .Cognata.SDK.ConnectionPortReport connectPortReport = 16 [deprecated = true];
inline bool QueryReport::has_connectportreport() const {
  return QueryType_case() == kConnectPortReport;
}
inline void QueryReport::set_has_connectportreport() {
  _oneof_case_[0] = kConnectPortReport;
}
inline void QueryReport::clear_connectportreport() {
  if (has_connectportreport()) {
    delete QueryType_.connectportreport_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::ConnectionPortReport* QueryReport::release_connectportreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.QueryReport.connectPortReport)
  if (has_connectportreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::ConnectionPortReport* temp = QueryType_.connectportreport_;
    QueryType_.connectportreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ConnectionPortReport& QueryReport::connectportreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.QueryReport.connectPortReport)
  return has_connectportreport()
      ? *QueryType_.connectportreport_
      : *reinterpret_cast< ::Cognata::SDK::ConnectionPortReport*>(&::Cognata::SDK::_ConnectionPortReport_default_instance_);
}
inline ::Cognata::SDK::ConnectionPortReport* QueryReport::mutable_connectportreport() {
  if (!has_connectportreport()) {
    clear_QueryType();
    set_has_connectportreport();
    QueryType_.connectportreport_ = CreateMaybeMessage< ::Cognata::SDK::ConnectionPortReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.QueryReport.connectPortReport)
  return QueryType_.connectportreport_;
}

// .Cognata.SDK.RunIdQueryReport runIdQueryReport = 17;
inline bool QueryReport::has_runidqueryreport() const {
  return QueryType_case() == kRunIdQueryReport;
}
inline void QueryReport::set_has_runidqueryreport() {
  _oneof_case_[0] = kRunIdQueryReport;
}
inline void QueryReport::clear_runidqueryreport() {
  if (has_runidqueryreport()) {
    delete QueryType_.runidqueryreport_;
    clear_has_QueryType();
  }
}
inline ::Cognata::SDK::RunIdQueryReport* QueryReport::release_runidqueryreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.QueryReport.runIdQueryReport)
  if (has_runidqueryreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::RunIdQueryReport* temp = QueryType_.runidqueryreport_;
    QueryType_.runidqueryreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RunIdQueryReport& QueryReport::runidqueryreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.QueryReport.runIdQueryReport)
  return has_runidqueryreport()
      ? *QueryType_.runidqueryreport_
      : *reinterpret_cast< ::Cognata::SDK::RunIdQueryReport*>(&::Cognata::SDK::_RunIdQueryReport_default_instance_);
}
inline ::Cognata::SDK::RunIdQueryReport* QueryReport::mutable_runidqueryreport() {
  if (!has_runidqueryreport()) {
    clear_QueryType();
    set_has_runidqueryreport();
    QueryType_.runidqueryreport_ = CreateMaybeMessage< ::Cognata::SDK::RunIdQueryReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.QueryReport.runIdQueryReport)
  return QueryType_.runidqueryreport_;
}

inline bool QueryReport::has_QueryType() const {
  return QueryType_case() != QUERYTYPE_NOT_SET;
}
inline void QueryReport::clear_has_QueryType() {
  _oneof_case_[0] = QUERYTYPE_NOT_SET;
}
inline QueryReport::QueryTypeCase QueryReport::QueryType_case() const {
  return QueryReport::QueryTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RunIdQueryReport

// string runId = 1;
inline void RunIdQueryReport::clear_runid() {
  runid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RunIdQueryReport::runid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RunIdQueryReport.runId)
  return runid_.GetNoArena();
}
inline void RunIdQueryReport::set_runid(const std::string& value) {
  
  runid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.RunIdQueryReport.runId)
}
inline void RunIdQueryReport::set_runid(std::string&& value) {
  
  runid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.RunIdQueryReport.runId)
}
inline void RunIdQueryReport::set_runid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.RunIdQueryReport.runId)
}
inline void RunIdQueryReport::set_runid(const char* value, size_t size) {
  
  runid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.RunIdQueryReport.runId)
}
inline std::string* RunIdQueryReport::mutable_runid() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RunIdQueryReport.runId)
  return runid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RunIdQueryReport::release_runid() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RunIdQueryReport.runId)
  
  return runid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RunIdQueryReport::set_allocated_runid(std::string* runid) {
  if (runid != nullptr) {
    
  } else {
    
  }
  runid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runid);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RunIdQueryReport.runId)
}

// -------------------------------------------------------------------

// SensorData

// repeated .Cognata.SDK.SensorOutput sensorsOutput = 1;
inline int SensorData::sensorsoutput_size() const {
  return sensorsoutput_.size();
}
inline void SensorData::clear_sensorsoutput() {
  sensorsoutput_.Clear();
}
inline ::Cognata::SDK::SensorOutput* SensorData::mutable_sensorsoutput(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorData.sensorsOutput)
  return sensorsoutput_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SensorOutput >*
SensorData::mutable_sensorsoutput() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.SensorData.sensorsOutput)
  return &sensorsoutput_;
}
inline const ::Cognata::SDK::SensorOutput& SensorData::sensorsoutput(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorData.sensorsOutput)
  return sensorsoutput_.Get(index);
}
inline ::Cognata::SDK::SensorOutput* SensorData::add_sensorsoutput() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.SensorData.sensorsOutput)
  return sensorsoutput_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SensorOutput >&
SensorData::sensorsoutput() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.SensorData.sensorsOutput)
  return sensorsoutput_;
}

// -------------------------------------------------------------------

// SensorsQueryReport

// repeated .Cognata.SDK.SensorQueryReport sensorsQueryReport = 1;
inline int SensorsQueryReport::sensorsqueryreport_size() const {
  return sensorsqueryreport_.size();
}
inline void SensorsQueryReport::clear_sensorsqueryreport() {
  sensorsqueryreport_.Clear();
}
inline ::Cognata::SDK::SensorQueryReport* SensorsQueryReport::mutable_sensorsqueryreport(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorsQueryReport.sensorsQueryReport)
  return sensorsqueryreport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SensorQueryReport >*
SensorsQueryReport::mutable_sensorsqueryreport() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.SensorsQueryReport.sensorsQueryReport)
  return &sensorsqueryreport_;
}
inline const ::Cognata::SDK::SensorQueryReport& SensorsQueryReport::sensorsqueryreport(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorsQueryReport.sensorsQueryReport)
  return sensorsqueryreport_.Get(index);
}
inline ::Cognata::SDK::SensorQueryReport* SensorsQueryReport::add_sensorsqueryreport() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.SensorsQueryReport.sensorsQueryReport)
  return sensorsqueryreport_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SensorQueryReport >&
SensorsQueryReport::sensorsqueryreport() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.SensorsQueryReport.sensorsQueryReport)
  return sensorsqueryreport_;
}

// -------------------------------------------------------------------

// GlobalSensorsQueryReport

// repeated .Cognata.SDK.GlobalSensorQueryReport globalSensorQueryReport = 1;
inline int GlobalSensorsQueryReport::globalsensorqueryreport_size() const {
  return globalsensorqueryreport_.size();
}
inline void GlobalSensorsQueryReport::clear_globalsensorqueryreport() {
  globalsensorqueryreport_.Clear();
}
inline ::Cognata::SDK::GlobalSensorQueryReport* GlobalSensorsQueryReport::mutable_globalsensorqueryreport(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GlobalSensorsQueryReport.globalSensorQueryReport)
  return globalsensorqueryreport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::GlobalSensorQueryReport >*
GlobalSensorsQueryReport::mutable_globalsensorqueryreport() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.GlobalSensorsQueryReport.globalSensorQueryReport)
  return &globalsensorqueryreport_;
}
inline const ::Cognata::SDK::GlobalSensorQueryReport& GlobalSensorsQueryReport::globalsensorqueryreport(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GlobalSensorsQueryReport.globalSensorQueryReport)
  return globalsensorqueryreport_.Get(index);
}
inline ::Cognata::SDK::GlobalSensorQueryReport* GlobalSensorsQueryReport::add_globalsensorqueryreport() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.GlobalSensorsQueryReport.globalSensorQueryReport)
  return globalsensorqueryreport_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::GlobalSensorQueryReport >&
GlobalSensorsQueryReport::globalsensorqueryreport() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.GlobalSensorsQueryReport.globalSensorQueryReport)
  return globalsensorqueryreport_;
}

// -------------------------------------------------------------------

// GlobalSensorQueryReport

// string name = 1;
inline void GlobalSensorQueryReport::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GlobalSensorQueryReport::name() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GlobalSensorQueryReport.name)
  return name_.GetNoArena();
}
inline void GlobalSensorQueryReport::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.GlobalSensorQueryReport.name)
}
inline void GlobalSensorQueryReport::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.GlobalSensorQueryReport.name)
}
inline void GlobalSensorQueryReport::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.GlobalSensorQueryReport.name)
}
inline void GlobalSensorQueryReport::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.GlobalSensorQueryReport.name)
}
inline std::string* GlobalSensorQueryReport::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GlobalSensorQueryReport.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GlobalSensorQueryReport::release_name() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GlobalSensorQueryReport.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalSensorQueryReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GlobalSensorQueryReport.name)
}

// uint32 sensorID = 2;
inline void GlobalSensorQueryReport::clear_sensorid() {
  sensorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalSensorQueryReport::sensorid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GlobalSensorQueryReport.sensorID)
  return sensorid_;
}
inline void GlobalSensorQueryReport::set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GlobalSensorQueryReport.sensorID)
}

// uint32 fps = 4;
inline void GlobalSensorQueryReport::clear_fps() {
  fps_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalSensorQueryReport::fps() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GlobalSensorQueryReport.fps)
  return fps_;
}
inline void GlobalSensorQueryReport::set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GlobalSensorQueryReport.fps)
}

// .Cognata.SDK.DOGTConfig DOGTReport = 10 [deprecated = true];
inline bool GlobalSensorQueryReport::has_dogtreport() const {
  return QueryType_case() == kDOGTReport;
}
inline void GlobalSensorQueryReport::set_has_dogtreport() {
  _oneof_case_[0] = kDOGTReport;
}
inline ::Cognata::SDK::DOGTConfig* GlobalSensorQueryReport::release_dogtreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GlobalSensorQueryReport.DOGTReport)
  if (has_dogtreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::DOGTConfig* temp = QueryType_.dogtreport_;
    QueryType_.dogtreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::DOGTConfig& GlobalSensorQueryReport::dogtreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GlobalSensorQueryReport.DOGTReport)
  return has_dogtreport()
      ? *QueryType_.dogtreport_
      : *reinterpret_cast< ::Cognata::SDK::DOGTConfig*>(&::Cognata::SDK::_DOGTConfig_default_instance_);
}
inline ::Cognata::SDK::DOGTConfig* GlobalSensorQueryReport::mutable_dogtreport() {
  if (!has_dogtreport()) {
    clear_QueryType();
    set_has_dogtreport();
    QueryType_.dogtreport_ = CreateMaybeMessage< ::Cognata::SDK::DOGTConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GlobalSensorQueryReport.DOGTReport)
  return QueryType_.dogtreport_;
}

inline bool GlobalSensorQueryReport::has_QueryType() const {
  return QueryType_case() != QUERYTYPE_NOT_SET;
}
inline void GlobalSensorQueryReport::clear_has_QueryType() {
  _oneof_case_[0] = QUERYTYPE_NOT_SET;
}
inline GlobalSensorQueryReport::QueryTypeCase GlobalSensorQueryReport::QueryType_case() const {
  return GlobalSensorQueryReport::QueryTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SensorQueryReport

// string name = 1;
inline void SensorQueryReport::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorQueryReport::name() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.name)
  return name_.GetNoArena();
}
inline void SensorQueryReport::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorQueryReport.name)
}
inline void SensorQueryReport::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.SensorQueryReport.name)
}
inline void SensorQueryReport::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.SensorQueryReport.name)
}
inline void SensorQueryReport::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.SensorQueryReport.name)
}
inline std::string* SensorQueryReport::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorQueryReport::release_name() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorQueryReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SensorQueryReport.name)
}

// uint32 sensorID = 2;
inline void SensorQueryReport::clear_sensorid() {
  sensorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorQueryReport::sensorid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.sensorID)
  return sensorid_;
}
inline void SensorQueryReport::set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorQueryReport.sensorID)
}

// .Cognata.SDK.Transform3 transform = 3;
inline bool SensorQueryReport::has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline const ::Cognata::SDK::Transform3& SensorQueryReport::transform() const {
  const ::Cognata::SDK::Transform3* p = transform_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::Transform3*>(
      &::Cognata::SDK::_Transform3_default_instance_);
}
inline ::Cognata::SDK::Transform3* SensorQueryReport::release_transform() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.transform)
  
  ::Cognata::SDK::Transform3* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::Transform3* SensorQueryReport::mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::Transform3>(GetArenaNoVirtual());
    transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.transform)
  return transform_;
}
inline void SensorQueryReport::set_allocated_transform(::Cognata::SDK::Transform3* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SensorQueryReport.transform)
}

// uint32 fps = 4;
inline void SensorQueryReport::clear_fps() {
  fps_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorQueryReport::fps() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.fps)
  return fps_;
}
inline void SensorQueryReport::set_fps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorQueryReport.fps)
}

// .Cognata.SDK.RGBCameraConfig rgbCameraReport = 10;
inline bool SensorQueryReport::has_rgbcamerareport() const {
  return QueryType_case() == kRgbCameraReport;
}
inline void SensorQueryReport::set_has_rgbcamerareport() {
  _oneof_case_[0] = kRgbCameraReport;
}
inline ::Cognata::SDK::RGBCameraConfig* SensorQueryReport::release_rgbcamerareport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.rgbCameraReport)
  if (has_rgbcamerareport()) {
    clear_has_QueryType();
      ::Cognata::SDK::RGBCameraConfig* temp = QueryType_.rgbcamerareport_;
    QueryType_.rgbcamerareport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RGBCameraConfig& SensorQueryReport::rgbcamerareport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.rgbCameraReport)
  return has_rgbcamerareport()
      ? *QueryType_.rgbcamerareport_
      : *reinterpret_cast< ::Cognata::SDK::RGBCameraConfig*>(&::Cognata::SDK::_RGBCameraConfig_default_instance_);
}
inline ::Cognata::SDK::RGBCameraConfig* SensorQueryReport::mutable_rgbcamerareport() {
  if (!has_rgbcamerareport()) {
    clear_QueryType();
    set_has_rgbcamerareport();
    QueryType_.rgbcamerareport_ = CreateMaybeMessage< ::Cognata::SDK::RGBCameraConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.rgbCameraReport)
  return QueryType_.rgbcamerareport_;
}

// .Cognata.SDK.LidarConfig lidarReport = 11;
inline bool SensorQueryReport::has_lidarreport() const {
  return QueryType_case() == kLidarReport;
}
inline void SensorQueryReport::set_has_lidarreport() {
  _oneof_case_[0] = kLidarReport;
}
inline ::Cognata::SDK::LidarConfig* SensorQueryReport::release_lidarreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.lidarReport)
  if (has_lidarreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::LidarConfig* temp = QueryType_.lidarreport_;
    QueryType_.lidarreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::LidarConfig& SensorQueryReport::lidarreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.lidarReport)
  return has_lidarreport()
      ? *QueryType_.lidarreport_
      : *reinterpret_cast< ::Cognata::SDK::LidarConfig*>(&::Cognata::SDK::_LidarConfig_default_instance_);
}
inline ::Cognata::SDK::LidarConfig* SensorQueryReport::mutable_lidarreport() {
  if (!has_lidarreport()) {
    clear_QueryType();
    set_has_lidarreport();
    QueryType_.lidarreport_ = CreateMaybeMessage< ::Cognata::SDK::LidarConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.lidarReport)
  return QueryType_.lidarreport_;
}

// .Cognata.SDK.RadarConfig radarReport = 12;
inline bool SensorQueryReport::has_radarreport() const {
  return QueryType_case() == kRadarReport;
}
inline void SensorQueryReport::set_has_radarreport() {
  _oneof_case_[0] = kRadarReport;
}
inline ::Cognata::SDK::RadarConfig* SensorQueryReport::release_radarreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.radarReport)
  if (has_radarreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::RadarConfig* temp = QueryType_.radarreport_;
    QueryType_.radarreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RadarConfig& SensorQueryReport::radarreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.radarReport)
  return has_radarreport()
      ? *QueryType_.radarreport_
      : *reinterpret_cast< ::Cognata::SDK::RadarConfig*>(&::Cognata::SDK::_RadarConfig_default_instance_);
}
inline ::Cognata::SDK::RadarConfig* SensorQueryReport::mutable_radarreport() {
  if (!has_radarreport()) {
    clear_QueryType();
    set_has_radarreport();
    QueryType_.radarreport_ = CreateMaybeMessage< ::Cognata::SDK::RadarConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.radarReport)
  return QueryType_.radarreport_;
}

// .Cognata.SDK.GPSConfig gpsReport = 13;
inline bool SensorQueryReport::has_gpsreport() const {
  return QueryType_case() == kGpsReport;
}
inline void SensorQueryReport::set_has_gpsreport() {
  _oneof_case_[0] = kGpsReport;
}
inline ::Cognata::SDK::GPSConfig* SensorQueryReport::release_gpsreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.gpsReport)
  if (has_gpsreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::GPSConfig* temp = QueryType_.gpsreport_;
    QueryType_.gpsreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::GPSConfig& SensorQueryReport::gpsreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.gpsReport)
  return has_gpsreport()
      ? *QueryType_.gpsreport_
      : *reinterpret_cast< ::Cognata::SDK::GPSConfig*>(&::Cognata::SDK::_GPSConfig_default_instance_);
}
inline ::Cognata::SDK::GPSConfig* SensorQueryReport::mutable_gpsreport() {
  if (!has_gpsreport()) {
    clear_QueryType();
    set_has_gpsreport();
    QueryType_.gpsreport_ = CreateMaybeMessage< ::Cognata::SDK::GPSConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.gpsReport)
  return QueryType_.gpsreport_;
}

// .Cognata.SDK.ROIConfig roiReport = 14;
inline bool SensorQueryReport::has_roireport() const {
  return QueryType_case() == kRoiReport;
}
inline void SensorQueryReport::set_has_roireport() {
  _oneof_case_[0] = kRoiReport;
}
inline ::Cognata::SDK::ROIConfig* SensorQueryReport::release_roireport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.roiReport)
  if (has_roireport()) {
    clear_has_QueryType();
      ::Cognata::SDK::ROIConfig* temp = QueryType_.roireport_;
    QueryType_.roireport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ROIConfig& SensorQueryReport::roireport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.roiReport)
  return has_roireport()
      ? *QueryType_.roireport_
      : *reinterpret_cast< ::Cognata::SDK::ROIConfig*>(&::Cognata::SDK::_ROIConfig_default_instance_);
}
inline ::Cognata::SDK::ROIConfig* SensorQueryReport::mutable_roireport() {
  if (!has_roireport()) {
    clear_QueryType();
    set_has_roireport();
    QueryType_.roireport_ = CreateMaybeMessage< ::Cognata::SDK::ROIConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.roiReport)
  return QueryType_.roireport_;
}

// .Cognata.SDK.E2CConfig e2cReport = 15;
inline bool SensorQueryReport::has_e2creport() const {
  return QueryType_case() == kE2CReport;
}
inline void SensorQueryReport::set_has_e2creport() {
  _oneof_case_[0] = kE2CReport;
}
inline ::Cognata::SDK::E2CConfig* SensorQueryReport::release_e2creport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.e2cReport)
  if (has_e2creport()) {
    clear_has_QueryType();
      ::Cognata::SDK::E2CConfig* temp = QueryType_.e2creport_;
    QueryType_.e2creport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::E2CConfig& SensorQueryReport::e2creport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.e2cReport)
  return has_e2creport()
      ? *QueryType_.e2creport_
      : *reinterpret_cast< ::Cognata::SDK::E2CConfig*>(&::Cognata::SDK::_E2CConfig_default_instance_);
}
inline ::Cognata::SDK::E2CConfig* SensorQueryReport::mutable_e2creport() {
  if (!has_e2creport()) {
    clear_QueryType();
    set_has_e2creport();
    QueryType_.e2creport_ = CreateMaybeMessage< ::Cognata::SDK::E2CConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.e2cReport)
  return QueryType_.e2creport_;
}

// .Cognata.SDK.LaneDetectorConfig laneDetectorReport = 16;
inline bool SensorQueryReport::has_lanedetectorreport() const {
  return QueryType_case() == kLaneDetectorReport;
}
inline void SensorQueryReport::set_has_lanedetectorreport() {
  _oneof_case_[0] = kLaneDetectorReport;
}
inline ::Cognata::SDK::LaneDetectorConfig* SensorQueryReport::release_lanedetectorreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.laneDetectorReport)
  if (has_lanedetectorreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::LaneDetectorConfig* temp = QueryType_.lanedetectorreport_;
    QueryType_.lanedetectorreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::LaneDetectorConfig& SensorQueryReport::lanedetectorreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.laneDetectorReport)
  return has_lanedetectorreport()
      ? *QueryType_.lanedetectorreport_
      : *reinterpret_cast< ::Cognata::SDK::LaneDetectorConfig*>(&::Cognata::SDK::_LaneDetectorConfig_default_instance_);
}
inline ::Cognata::SDK::LaneDetectorConfig* SensorQueryReport::mutable_lanedetectorreport() {
  if (!has_lanedetectorreport()) {
    clear_QueryType();
    set_has_lanedetectorreport();
    QueryType_.lanedetectorreport_ = CreateMaybeMessage< ::Cognata::SDK::LaneDetectorConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.laneDetectorReport)
  return QueryType_.lanedetectorreport_;
}

// .Cognata.SDK.SLInstanceCameraConfig slInstanceReport = 17;
inline bool SensorQueryReport::has_slinstancereport() const {
  return QueryType_case() == kSlInstanceReport;
}
inline void SensorQueryReport::set_has_slinstancereport() {
  _oneof_case_[0] = kSlInstanceReport;
}
inline ::Cognata::SDK::SLInstanceCameraConfig* SensorQueryReport::release_slinstancereport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.slInstanceReport)
  if (has_slinstancereport()) {
    clear_has_QueryType();
      ::Cognata::SDK::SLInstanceCameraConfig* temp = QueryType_.slinstancereport_;
    QueryType_.slinstancereport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SLInstanceCameraConfig& SensorQueryReport::slinstancereport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.slInstanceReport)
  return has_slinstancereport()
      ? *QueryType_.slinstancereport_
      : *reinterpret_cast< ::Cognata::SDK::SLInstanceCameraConfig*>(&::Cognata::SDK::_SLInstanceCameraConfig_default_instance_);
}
inline ::Cognata::SDK::SLInstanceCameraConfig* SensorQueryReport::mutable_slinstancereport() {
  if (!has_slinstancereport()) {
    clear_QueryType();
    set_has_slinstancereport();
    QueryType_.slinstancereport_ = CreateMaybeMessage< ::Cognata::SDK::SLInstanceCameraConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.slInstanceReport)
  return QueryType_.slinstancereport_;
}

// .Cognata.SDK.SLClassCameraConfig slClassReport = 18;
inline bool SensorQueryReport::has_slclassreport() const {
  return QueryType_case() == kSlClassReport;
}
inline void SensorQueryReport::set_has_slclassreport() {
  _oneof_case_[0] = kSlClassReport;
}
inline ::Cognata::SDK::SLClassCameraConfig* SensorQueryReport::release_slclassreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.slClassReport)
  if (has_slclassreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::SLClassCameraConfig* temp = QueryType_.slclassreport_;
    QueryType_.slclassreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SLClassCameraConfig& SensorQueryReport::slclassreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.slClassReport)
  return has_slclassreport()
      ? *QueryType_.slclassreport_
      : *reinterpret_cast< ::Cognata::SDK::SLClassCameraConfig*>(&::Cognata::SDK::_SLClassCameraConfig_default_instance_);
}
inline ::Cognata::SDK::SLClassCameraConfig* SensorQueryReport::mutable_slclassreport() {
  if (!has_slclassreport()) {
    clear_QueryType();
    set_has_slclassreport();
    QueryType_.slclassreport_ = CreateMaybeMessage< ::Cognata::SDK::SLClassCameraConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.slClassReport)
  return QueryType_.slclassreport_;
}

// .Cognata.SDK.CarTelemetriesConfig carTelemetriesReport = 19;
inline bool SensorQueryReport::has_cartelemetriesreport() const {
  return QueryType_case() == kCarTelemetriesReport;
}
inline void SensorQueryReport::set_has_cartelemetriesreport() {
  _oneof_case_[0] = kCarTelemetriesReport;
}
inline ::Cognata::SDK::CarTelemetriesConfig* SensorQueryReport::release_cartelemetriesreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.carTelemetriesReport)
  if (has_cartelemetriesreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::CarTelemetriesConfig* temp = QueryType_.cartelemetriesreport_;
    QueryType_.cartelemetriesreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::CarTelemetriesConfig& SensorQueryReport::cartelemetriesreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.carTelemetriesReport)
  return has_cartelemetriesreport()
      ? *QueryType_.cartelemetriesreport_
      : *reinterpret_cast< ::Cognata::SDK::CarTelemetriesConfig*>(&::Cognata::SDK::_CarTelemetriesConfig_default_instance_);
}
inline ::Cognata::SDK::CarTelemetriesConfig* SensorQueryReport::mutable_cartelemetriesreport() {
  if (!has_cartelemetriesreport()) {
    clear_QueryType();
    set_has_cartelemetriesreport();
    QueryType_.cartelemetriesreport_ = CreateMaybeMessage< ::Cognata::SDK::CarTelemetriesConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.carTelemetriesReport)
  return QueryType_.cartelemetriesreport_;
}

// .Cognata.SDK.DepthCameraConfig depthCameraReport = 20;
inline bool SensorQueryReport::has_depthcamerareport() const {
  return QueryType_case() == kDepthCameraReport;
}
inline void SensorQueryReport::set_has_depthcamerareport() {
  _oneof_case_[0] = kDepthCameraReport;
}
inline ::Cognata::SDK::DepthCameraConfig* SensorQueryReport::release_depthcamerareport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.depthCameraReport)
  if (has_depthcamerareport()) {
    clear_has_QueryType();
      ::Cognata::SDK::DepthCameraConfig* temp = QueryType_.depthcamerareport_;
    QueryType_.depthcamerareport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::DepthCameraConfig& SensorQueryReport::depthcamerareport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.depthCameraReport)
  return has_depthcamerareport()
      ? *QueryType_.depthcamerareport_
      : *reinterpret_cast< ::Cognata::SDK::DepthCameraConfig*>(&::Cognata::SDK::_DepthCameraConfig_default_instance_);
}
inline ::Cognata::SDK::DepthCameraConfig* SensorQueryReport::mutable_depthcamerareport() {
  if (!has_depthcamerareport()) {
    clear_QueryType();
    set_has_depthcamerareport();
    QueryType_.depthcamerareport_ = CreateMaybeMessage< ::Cognata::SDK::DepthCameraConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.depthCameraReport)
  return QueryType_.depthcamerareport_;
}

// .Cognata.SDK.ThermalCameraConfig thermalCameraReport = 21;
inline bool SensorQueryReport::has_thermalcamerareport() const {
  return QueryType_case() == kThermalCameraReport;
}
inline void SensorQueryReport::set_has_thermalcamerareport() {
  _oneof_case_[0] = kThermalCameraReport;
}
inline ::Cognata::SDK::ThermalCameraConfig* SensorQueryReport::release_thermalcamerareport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.thermalCameraReport)
  if (has_thermalcamerareport()) {
    clear_has_QueryType();
      ::Cognata::SDK::ThermalCameraConfig* temp = QueryType_.thermalcamerareport_;
    QueryType_.thermalcamerareport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ThermalCameraConfig& SensorQueryReport::thermalcamerareport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.thermalCameraReport)
  return has_thermalcamerareport()
      ? *QueryType_.thermalcamerareport_
      : *reinterpret_cast< ::Cognata::SDK::ThermalCameraConfig*>(&::Cognata::SDK::_ThermalCameraConfig_default_instance_);
}
inline ::Cognata::SDK::ThermalCameraConfig* SensorQueryReport::mutable_thermalcamerareport() {
  if (!has_thermalcamerareport()) {
    clear_QueryType();
    set_has_thermalcamerareport();
    QueryType_.thermalcamerareport_ = CreateMaybeMessage< ::Cognata::SDK::ThermalCameraConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.thermalCameraReport)
  return QueryType_.thermalcamerareport_;
}

// .Cognata.SDK.DOGTConfig DOGTReport = 22;
inline bool SensorQueryReport::has_dogtreport() const {
  return QueryType_case() == kDOGTReport;
}
inline void SensorQueryReport::set_has_dogtreport() {
  _oneof_case_[0] = kDOGTReport;
}
inline ::Cognata::SDK::DOGTConfig* SensorQueryReport::release_dogtreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.DOGTReport)
  if (has_dogtreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::DOGTConfig* temp = QueryType_.dogtreport_;
    QueryType_.dogtreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::DOGTConfig& SensorQueryReport::dogtreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.DOGTReport)
  return has_dogtreport()
      ? *QueryType_.dogtreport_
      : *reinterpret_cast< ::Cognata::SDK::DOGTConfig*>(&::Cognata::SDK::_DOGTConfig_default_instance_);
}
inline ::Cognata::SDK::DOGTConfig* SensorQueryReport::mutable_dogtreport() {
  if (!has_dogtreport()) {
    clear_QueryType();
    set_has_dogtreport();
    QueryType_.dogtreport_ = CreateMaybeMessage< ::Cognata::SDK::DOGTConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.DOGTReport)
  return QueryType_.dogtreport_;
}

// .Cognata.SDK.SLMaterialCameraConfig slMaterialReport = 23;
inline bool SensorQueryReport::has_slmaterialreport() const {
  return QueryType_case() == kSlMaterialReport;
}
inline void SensorQueryReport::set_has_slmaterialreport() {
  _oneof_case_[0] = kSlMaterialReport;
}
inline ::Cognata::SDK::SLMaterialCameraConfig* SensorQueryReport::release_slmaterialreport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.slMaterialReport)
  if (has_slmaterialreport()) {
    clear_has_QueryType();
      ::Cognata::SDK::SLMaterialCameraConfig* temp = QueryType_.slmaterialreport_;
    QueryType_.slmaterialreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SLMaterialCameraConfig& SensorQueryReport::slmaterialreport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.slMaterialReport)
  return has_slmaterialreport()
      ? *QueryType_.slmaterialreport_
      : *reinterpret_cast< ::Cognata::SDK::SLMaterialCameraConfig*>(&::Cognata::SDK::_SLMaterialCameraConfig_default_instance_);
}
inline ::Cognata::SDK::SLMaterialCameraConfig* SensorQueryReport::mutable_slmaterialreport() {
  if (!has_slmaterialreport()) {
    clear_QueryType();
    set_has_slmaterialreport();
    QueryType_.slmaterialreport_ = CreateMaybeMessage< ::Cognata::SDK::SLMaterialCameraConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.slMaterialReport)
  return QueryType_.slmaterialreport_;
}

// .Cognata.SDK.SLStructureCameraConfig slStructureReport = 24;
inline bool SensorQueryReport::has_slstructurereport() const {
  return QueryType_case() == kSlStructureReport;
}
inline void SensorQueryReport::set_has_slstructurereport() {
  _oneof_case_[0] = kSlStructureReport;
}
inline ::Cognata::SDK::SLStructureCameraConfig* SensorQueryReport::release_slstructurereport() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorQueryReport.slStructureReport)
  if (has_slstructurereport()) {
    clear_has_QueryType();
      ::Cognata::SDK::SLStructureCameraConfig* temp = QueryType_.slstructurereport_;
    QueryType_.slstructurereport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SLStructureCameraConfig& SensorQueryReport::slstructurereport() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorQueryReport.slStructureReport)
  return has_slstructurereport()
      ? *QueryType_.slstructurereport_
      : *reinterpret_cast< ::Cognata::SDK::SLStructureCameraConfig*>(&::Cognata::SDK::_SLStructureCameraConfig_default_instance_);
}
inline ::Cognata::SDK::SLStructureCameraConfig* SensorQueryReport::mutable_slstructurereport() {
  if (!has_slstructurereport()) {
    clear_QueryType();
    set_has_slstructurereport();
    QueryType_.slstructurereport_ = CreateMaybeMessage< ::Cognata::SDK::SLStructureCameraConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorQueryReport.slStructureReport)
  return QueryType_.slstructurereport_;
}

inline bool SensorQueryReport::has_QueryType() const {
  return QueryType_case() != QUERYTYPE_NOT_SET;
}
inline void SensorQueryReport::clear_has_QueryType() {
  _oneof_case_[0] = QUERYTYPE_NOT_SET;
}
inline SensorQueryReport::QueryTypeCase SensorQueryReport::QueryType_case() const {
  return SensorQueryReport::QueryTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CarsQueryReport

// repeated .Cognata.SDK.CarQueryReport carQueryReport = 1;
inline int CarsQueryReport::carqueryreport_size() const {
  return carqueryreport_.size();
}
inline void CarsQueryReport::clear_carqueryreport() {
  carqueryreport_.Clear();
}
inline ::Cognata::SDK::CarQueryReport* CarsQueryReport::mutable_carqueryreport(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarsQueryReport.carQueryReport)
  return carqueryreport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::CarQueryReport >*
CarsQueryReport::mutable_carqueryreport() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.CarsQueryReport.carQueryReport)
  return &carqueryreport_;
}
inline const ::Cognata::SDK::CarQueryReport& CarsQueryReport::carqueryreport(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarsQueryReport.carQueryReport)
  return carqueryreport_.Get(index);
}
inline ::Cognata::SDK::CarQueryReport* CarsQueryReport::add_carqueryreport() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.CarsQueryReport.carQueryReport)
  return carqueryreport_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::CarQueryReport >&
CarsQueryReport::carqueryreport() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.CarsQueryReport.carQueryReport)
  return carqueryreport_;
}

// -------------------------------------------------------------------

// CarQueryReport

// string name = 1;
inline void CarQueryReport::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CarQueryReport::name() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarQueryReport.name)
  return name_.GetNoArena();
}
inline void CarQueryReport::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarQueryReport.name)
}
inline void CarQueryReport::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.CarQueryReport.name)
}
inline void CarQueryReport::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.CarQueryReport.name)
}
inline void CarQueryReport::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.CarQueryReport.name)
}
inline std::string* CarQueryReport::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarQueryReport.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CarQueryReport::release_name() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarQueryReport.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CarQueryReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarQueryReport.name)
}

// string brand = 2;
inline void CarQueryReport::clear_brand() {
  brand_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CarQueryReport::brand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarQueryReport.brand)
  return brand_.GetNoArena();
}
inline void CarQueryReport::set_brand(const std::string& value) {
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarQueryReport.brand)
}
inline void CarQueryReport::set_brand(std::string&& value) {
  
  brand_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.CarQueryReport.brand)
}
inline void CarQueryReport::set_brand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.CarQueryReport.brand)
}
inline void CarQueryReport::set_brand(const char* value, size_t size) {
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.CarQueryReport.brand)
}
inline std::string* CarQueryReport::mutable_brand() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarQueryReport.brand)
  return brand_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CarQueryReport::release_brand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarQueryReport.brand)
  
  return brand_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CarQueryReport::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarQueryReport.brand)
}

// .Cognata.SDK.SDKVector3 velocity = 3;
inline bool CarQueryReport::has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& CarQueryReport::velocity() const {
  const ::Cognata::SDK::SDKVector3* p = velocity_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarQueryReport.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* CarQueryReport::release_velocity() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarQueryReport.velocity)
  
  ::Cognata::SDK::SDKVector3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* CarQueryReport::mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarQueryReport.velocity)
  return velocity_;
}
inline void CarQueryReport::set_allocated_velocity(::Cognata::SDK::SDKVector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarQueryReport.velocity)
}

// uint32 roiObjectId = 4;
inline void CarQueryReport::clear_roiobjectid() {
  roiobjectid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CarQueryReport::roiobjectid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarQueryReport.roiObjectId)
  return roiobjectid_;
}
inline void CarQueryReport::set_roiobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roiobjectid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarQueryReport.roiObjectId)
}

// .Cognata.SDK.SDKBoundingBox boundingBox = 5;
inline bool CarQueryReport::has_boundingbox() const {
  return this != internal_default_instance() && boundingbox_ != nullptr;
}
inline const ::Cognata::SDK::SDKBoundingBox& CarQueryReport::boundingbox() const {
  const ::Cognata::SDK::SDKBoundingBox* p = boundingbox_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarQueryReport.boundingBox)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKBoundingBox*>(
      &::Cognata::SDK::_SDKBoundingBox_default_instance_);
}
inline ::Cognata::SDK::SDKBoundingBox* CarQueryReport::release_boundingbox() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarQueryReport.boundingBox)
  
  ::Cognata::SDK::SDKBoundingBox* temp = boundingbox_;
  boundingbox_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKBoundingBox* CarQueryReport::mutable_boundingbox() {
  
  if (boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKBoundingBox>(GetArenaNoVirtual());
    boundingbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarQueryReport.boundingBox)
  return boundingbox_;
}
inline void CarQueryReport::set_allocated_boundingbox(::Cognata::SDK::SDKBoundingBox* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundingbox_);
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    
  } else {
    
  }
  boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarQueryReport.boundingBox)
}

// .Cognata.SDK.LocationParams locationParams = 6;
inline bool CarQueryReport::has_locationparams() const {
  return this != internal_default_instance() && locationparams_ != nullptr;
}
inline void CarQueryReport::clear_locationparams() {
  if (GetArenaNoVirtual() == nullptr && locationparams_ != nullptr) {
    delete locationparams_;
  }
  locationparams_ = nullptr;
}
inline const ::Cognata::SDK::LocationParams& CarQueryReport::locationparams() const {
  const ::Cognata::SDK::LocationParams* p = locationparams_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarQueryReport.locationParams)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::LocationParams*>(
      &::Cognata::SDK::_LocationParams_default_instance_);
}
inline ::Cognata::SDK::LocationParams* CarQueryReport::release_locationparams() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarQueryReport.locationParams)
  
  ::Cognata::SDK::LocationParams* temp = locationparams_;
  locationparams_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::LocationParams* CarQueryReport::mutable_locationparams() {
  
  if (locationparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::LocationParams>(GetArenaNoVirtual());
    locationparams_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarQueryReport.locationParams)
  return locationparams_;
}
inline void CarQueryReport::set_allocated_locationparams(::Cognata::SDK::LocationParams* locationparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete locationparams_;
  }
  if (locationparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      locationparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationparams, submessage_arena);
    }
    
  } else {
    
  }
  locationparams_ = locationparams;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarQueryReport.locationParams)
}

// .Cognata.SDK.BehaviourParams behaviourParams = 7;
inline bool CarQueryReport::has_behaviourparams() const {
  return this != internal_default_instance() && behaviourparams_ != nullptr;
}
inline void CarQueryReport::clear_behaviourparams() {
  if (GetArenaNoVirtual() == nullptr && behaviourparams_ != nullptr) {
    delete behaviourparams_;
  }
  behaviourparams_ = nullptr;
}
inline const ::Cognata::SDK::BehaviourParams& CarQueryReport::behaviourparams() const {
  const ::Cognata::SDK::BehaviourParams* p = behaviourparams_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarQueryReport.behaviourParams)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::BehaviourParams*>(
      &::Cognata::SDK::_BehaviourParams_default_instance_);
}
inline ::Cognata::SDK::BehaviourParams* CarQueryReport::release_behaviourparams() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarQueryReport.behaviourParams)
  
  ::Cognata::SDK::BehaviourParams* temp = behaviourparams_;
  behaviourparams_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::BehaviourParams* CarQueryReport::mutable_behaviourparams() {
  
  if (behaviourparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::BehaviourParams>(GetArenaNoVirtual());
    behaviourparams_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarQueryReport.behaviourParams)
  return behaviourparams_;
}
inline void CarQueryReport::set_allocated_behaviourparams(::Cognata::SDK::BehaviourParams* behaviourparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete behaviourparams_;
  }
  if (behaviourparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      behaviourparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, behaviourparams, submessage_arena);
    }
    
  } else {
    
  }
  behaviourparams_ = behaviourparams;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarQueryReport.behaviourParams)
}

// .Cognata.SDK.SDKVector3 acceleration = 8;
inline bool CarQueryReport::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& CarQueryReport::acceleration() const {
  const ::Cognata::SDK::SDKVector3* p = acceleration_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarQueryReport.acceleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* CarQueryReport::release_acceleration() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarQueryReport.acceleration)
  
  ::Cognata::SDK::SDKVector3* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* CarQueryReport::mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarQueryReport.acceleration)
  return acceleration_;
}
inline void CarQueryReport::set_allocated_acceleration(::Cognata::SDK::SDKVector3* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarQueryReport.acceleration)
}

// .Cognata.SDK.SpawnedObject sdkSpawnedObject = 9;
inline bool CarQueryReport::has_sdkspawnedobject() const {
  return this != internal_default_instance() && sdkspawnedobject_ != nullptr;
}
inline void CarQueryReport::clear_sdkspawnedobject() {
  if (GetArenaNoVirtual() == nullptr && sdkspawnedobject_ != nullptr) {
    delete sdkspawnedobject_;
  }
  sdkspawnedobject_ = nullptr;
}
inline const ::Cognata::SDK::SpawnedObject& CarQueryReport::sdkspawnedobject() const {
  const ::Cognata::SDK::SpawnedObject* p = sdkspawnedobject_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarQueryReport.sdkSpawnedObject)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SpawnedObject*>(
      &::Cognata::SDK::_SpawnedObject_default_instance_);
}
inline ::Cognata::SDK::SpawnedObject* CarQueryReport::release_sdkspawnedobject() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarQueryReport.sdkSpawnedObject)
  
  ::Cognata::SDK::SpawnedObject* temp = sdkspawnedobject_;
  sdkspawnedobject_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SpawnedObject* CarQueryReport::mutable_sdkspawnedobject() {
  
  if (sdkspawnedobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SpawnedObject>(GetArenaNoVirtual());
    sdkspawnedobject_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarQueryReport.sdkSpawnedObject)
  return sdkspawnedobject_;
}
inline void CarQueryReport::set_allocated_sdkspawnedobject(::Cognata::SDK::SpawnedObject* sdkspawnedobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sdkspawnedobject_;
  }
  if (sdkspawnedobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sdkspawnedobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sdkspawnedobject, submessage_arena);
    }
    
  } else {
    
  }
  sdkspawnedobject_ = sdkspawnedobject;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarQueryReport.sdkSpawnedObject)
}

// -------------------------------------------------------------------

// SpawnedObject

// string clientName = 1;
inline void SpawnedObject::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpawnedObject::clientname() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SpawnedObject.clientName)
  return clientname_.GetNoArena();
}
inline void SpawnedObject::set_clientname(const std::string& value) {
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.SpawnedObject.clientName)
}
inline void SpawnedObject::set_clientname(std::string&& value) {
  
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.SpawnedObject.clientName)
}
inline void SpawnedObject::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.SpawnedObject.clientName)
}
inline void SpawnedObject::set_clientname(const char* value, size_t size) {
  
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.SpawnedObject.clientName)
}
inline std::string* SpawnedObject::mutable_clientname() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SpawnedObject.clientName)
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpawnedObject::release_clientname() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SpawnedObject.clientName)
  
  return clientname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpawnedObject::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    
  } else {
    
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SpawnedObject.clientName)
}

// string clientObjectID = 2;
inline void SpawnedObject::clear_clientobjectid() {
  clientobjectid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpawnedObject::clientobjectid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SpawnedObject.clientObjectID)
  return clientobjectid_.GetNoArena();
}
inline void SpawnedObject::set_clientobjectid(const std::string& value) {
  
  clientobjectid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.SpawnedObject.clientObjectID)
}
inline void SpawnedObject::set_clientobjectid(std::string&& value) {
  
  clientobjectid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.SpawnedObject.clientObjectID)
}
inline void SpawnedObject::set_clientobjectid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientobjectid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.SpawnedObject.clientObjectID)
}
inline void SpawnedObject::set_clientobjectid(const char* value, size_t size) {
  
  clientobjectid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.SpawnedObject.clientObjectID)
}
inline std::string* SpawnedObject::mutable_clientobjectid() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SpawnedObject.clientObjectID)
  return clientobjectid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpawnedObject::release_clientobjectid() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SpawnedObject.clientObjectID)
  
  return clientobjectid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpawnedObject::set_allocated_clientobjectid(std::string* clientobjectid) {
  if (clientobjectid != nullptr) {
    
  } else {
    
  }
  clientobjectid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientobjectid);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SpawnedObject.clientObjectID)
}

// -------------------------------------------------------------------

// MovingObjectsQueryReport

// repeated .Cognata.SDK.MovingObjectQueryReport movingObjectQueryReport = 1;
inline int MovingObjectsQueryReport::movingobjectqueryreport_size() const {
  return movingobjectqueryreport_.size();
}
inline void MovingObjectsQueryReport::clear_movingobjectqueryreport() {
  movingobjectqueryreport_.Clear();
}
inline ::Cognata::SDK::MovingObjectQueryReport* MovingObjectsQueryReport::mutable_movingobjectqueryreport(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.MovingObjectsQueryReport.movingObjectQueryReport)
  return movingobjectqueryreport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::MovingObjectQueryReport >*
MovingObjectsQueryReport::mutable_movingobjectqueryreport() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.MovingObjectsQueryReport.movingObjectQueryReport)
  return &movingobjectqueryreport_;
}
inline const ::Cognata::SDK::MovingObjectQueryReport& MovingObjectsQueryReport::movingobjectqueryreport(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.MovingObjectsQueryReport.movingObjectQueryReport)
  return movingobjectqueryreport_.Get(index);
}
inline ::Cognata::SDK::MovingObjectQueryReport* MovingObjectsQueryReport::add_movingobjectqueryreport() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.MovingObjectsQueryReport.movingObjectQueryReport)
  return movingobjectqueryreport_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::MovingObjectQueryReport >&
MovingObjectsQueryReport::movingobjectqueryreport() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.MovingObjectsQueryReport.movingObjectQueryReport)
  return movingobjectqueryreport_;
}

// -------------------------------------------------------------------

// MovingObjectQueryReport

// string name = 1;
inline void MovingObjectQueryReport::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MovingObjectQueryReport::name() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.MovingObjectQueryReport.name)
  return name_.GetNoArena();
}
inline void MovingObjectQueryReport::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.MovingObjectQueryReport.name)
}
inline void MovingObjectQueryReport::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.MovingObjectQueryReport.name)
}
inline void MovingObjectQueryReport::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.MovingObjectQueryReport.name)
}
inline void MovingObjectQueryReport::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.MovingObjectQueryReport.name)
}
inline std::string* MovingObjectQueryReport::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.MovingObjectQueryReport.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MovingObjectQueryReport::release_name() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.MovingObjectQueryReport.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MovingObjectQueryReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.MovingObjectQueryReport.name)
}

// string brand = 2;
inline void MovingObjectQueryReport::clear_brand() {
  brand_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MovingObjectQueryReport::brand() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.MovingObjectQueryReport.brand)
  return brand_.GetNoArena();
}
inline void MovingObjectQueryReport::set_brand(const std::string& value) {
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.MovingObjectQueryReport.brand)
}
inline void MovingObjectQueryReport::set_brand(std::string&& value) {
  
  brand_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.MovingObjectQueryReport.brand)
}
inline void MovingObjectQueryReport::set_brand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.MovingObjectQueryReport.brand)
}
inline void MovingObjectQueryReport::set_brand(const char* value, size_t size) {
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.MovingObjectQueryReport.brand)
}
inline std::string* MovingObjectQueryReport::mutable_brand() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.MovingObjectQueryReport.brand)
  return brand_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MovingObjectQueryReport::release_brand() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.MovingObjectQueryReport.brand)
  
  return brand_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MovingObjectQueryReport::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.MovingObjectQueryReport.brand)
}

// uint32 roiObjectId = 4;
inline void MovingObjectQueryReport::clear_roiobjectid() {
  roiobjectid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MovingObjectQueryReport::roiobjectid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.MovingObjectQueryReport.roiObjectId)
  return roiobjectid_;
}
inline void MovingObjectQueryReport::set_roiobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roiobjectid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.MovingObjectQueryReport.roiObjectId)
}

// .Cognata.SDK.SDKBoundingBox boundingBox = 5;
inline bool MovingObjectQueryReport::has_boundingbox() const {
  return this != internal_default_instance() && boundingbox_ != nullptr;
}
inline const ::Cognata::SDK::SDKBoundingBox& MovingObjectQueryReport::boundingbox() const {
  const ::Cognata::SDK::SDKBoundingBox* p = boundingbox_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.MovingObjectQueryReport.boundingBox)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKBoundingBox*>(
      &::Cognata::SDK::_SDKBoundingBox_default_instance_);
}
inline ::Cognata::SDK::SDKBoundingBox* MovingObjectQueryReport::release_boundingbox() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.MovingObjectQueryReport.boundingBox)
  
  ::Cognata::SDK::SDKBoundingBox* temp = boundingbox_;
  boundingbox_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKBoundingBox* MovingObjectQueryReport::mutable_boundingbox() {
  
  if (boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKBoundingBox>(GetArenaNoVirtual());
    boundingbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.MovingObjectQueryReport.boundingBox)
  return boundingbox_;
}
inline void MovingObjectQueryReport::set_allocated_boundingbox(::Cognata::SDK::SDKBoundingBox* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundingbox_);
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    
  } else {
    
  }
  boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.MovingObjectQueryReport.boundingBox)
}

// .Cognata.SDK.LocationParams locationParams = 6;
inline bool MovingObjectQueryReport::has_locationparams() const {
  return this != internal_default_instance() && locationparams_ != nullptr;
}
inline void MovingObjectQueryReport::clear_locationparams() {
  if (GetArenaNoVirtual() == nullptr && locationparams_ != nullptr) {
    delete locationparams_;
  }
  locationparams_ = nullptr;
}
inline const ::Cognata::SDK::LocationParams& MovingObjectQueryReport::locationparams() const {
  const ::Cognata::SDK::LocationParams* p = locationparams_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.MovingObjectQueryReport.locationParams)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::LocationParams*>(
      &::Cognata::SDK::_LocationParams_default_instance_);
}
inline ::Cognata::SDK::LocationParams* MovingObjectQueryReport::release_locationparams() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.MovingObjectQueryReport.locationParams)
  
  ::Cognata::SDK::LocationParams* temp = locationparams_;
  locationparams_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::LocationParams* MovingObjectQueryReport::mutable_locationparams() {
  
  if (locationparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::LocationParams>(GetArenaNoVirtual());
    locationparams_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.MovingObjectQueryReport.locationParams)
  return locationparams_;
}
inline void MovingObjectQueryReport::set_allocated_locationparams(::Cognata::SDK::LocationParams* locationparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete locationparams_;
  }
  if (locationparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      locationparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationparams, submessage_arena);
    }
    
  } else {
    
  }
  locationparams_ = locationparams;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.MovingObjectQueryReport.locationParams)
}

// .Cognata.SDK.Path path = 7;
inline bool MovingObjectQueryReport::has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline void MovingObjectQueryReport::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::Cognata::SDK::Path& MovingObjectQueryReport::path() const {
  const ::Cognata::SDK::Path* p = path_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.MovingObjectQueryReport.path)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::Path*>(
      &::Cognata::SDK::_Path_default_instance_);
}
inline ::Cognata::SDK::Path* MovingObjectQueryReport::release_path() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.MovingObjectQueryReport.path)
  
  ::Cognata::SDK::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::Path* MovingObjectQueryReport::mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::Path>(GetArenaNoVirtual());
    path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.MovingObjectQueryReport.path)
  return path_;
}
inline void MovingObjectQueryReport::set_allocated_path(::Cognata::SDK::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.MovingObjectQueryReport.path)
}

// -------------------------------------------------------------------

// LocationParams

// string roadID = 1;
inline void LocationParams::clear_roadid() {
  roadid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LocationParams::roadid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LocationParams.roadID)
  return roadid_.GetNoArena();
}
inline void LocationParams::set_roadid(const std::string& value) {
  
  roadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.LocationParams.roadID)
}
inline void LocationParams::set_roadid(std::string&& value) {
  
  roadid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.LocationParams.roadID)
}
inline void LocationParams::set_roadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.LocationParams.roadID)
}
inline void LocationParams::set_roadid(const char* value, size_t size) {
  
  roadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.LocationParams.roadID)
}
inline std::string* LocationParams::mutable_roadid() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.LocationParams.roadID)
  return roadid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LocationParams::release_roadid() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.LocationParams.roadID)
  
  return roadid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LocationParams::set_allocated_roadid(std::string* roadid) {
  if (roadid != nullptr) {
    
  } else {
    
  }
  roadid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roadid);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.LocationParams.roadID)
}

// int32 laneID = 2;
inline void LocationParams::clear_laneid() {
  laneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocationParams::laneid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LocationParams.laneID)
  return laneid_;
}
inline void LocationParams::set_laneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  laneid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LocationParams.laneID)
}

// -------------------------------------------------------------------

// Path

// repeated .Cognata.SDK.SDKVector2 wayPoints = 1;
inline int Path::waypoints_size() const {
  return waypoints_.size();
}
inline ::Cognata::SDK::SDKVector2* Path::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Path.wayPoints)
  return waypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector2 >*
Path::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.Path.wayPoints)
  return &waypoints_;
}
inline const ::Cognata::SDK::SDKVector2& Path::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Path.wayPoints)
  return waypoints_.Get(index);
}
inline ::Cognata::SDK::SDKVector2* Path::add_waypoints() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.Path.wayPoints)
  return waypoints_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector2 >&
Path::waypoints() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.Path.wayPoints)
  return waypoints_;
}

// -------------------------------------------------------------------

// BehaviourParams

// float politeness = 1;
inline void BehaviourParams::clear_politeness() {
  politeness_ = 0;
}
inline float BehaviourParams::politeness() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.BehaviourParams.politeness)
  return politeness_;
}
inline void BehaviourParams::set_politeness(float value) {
  
  politeness_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.BehaviourParams.politeness)
}

// float safetyTime = 2;
inline void BehaviourParams::clear_safetytime() {
  safetytime_ = 0;
}
inline float BehaviourParams::safetytime() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.BehaviourParams.safetyTime)
  return safetytime_;
}
inline void BehaviourParams::set_safetytime(float value) {
  
  safetytime_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.BehaviourParams.safetyTime)
}

// float comfortableBraking = 3;
inline void BehaviourParams::clear_comfortablebraking() {
  comfortablebraking_ = 0;
}
inline float BehaviourParams::comfortablebraking() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.BehaviourParams.comfortableBraking)
  return comfortablebraking_;
}
inline void BehaviourParams::set_comfortablebraking(float value) {
  
  comfortablebraking_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.BehaviourParams.comfortableBraking)
}

// float desiredSpeed = 4;
inline void BehaviourParams::clear_desiredspeed() {
  desiredspeed_ = 0;
}
inline float BehaviourParams::desiredspeed() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.BehaviourParams.desiredSpeed)
  return desiredspeed_;
}
inline void BehaviourParams::set_desiredspeed(float value) {
  
  desiredspeed_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.BehaviourParams.desiredSpeed)
}

// float desiredInterval = 5;
inline void BehaviourParams::clear_desiredinterval() {
  desiredinterval_ = 0;
}
inline float BehaviourParams::desiredinterval() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.BehaviourParams.desiredInterval)
  return desiredinterval_;
}
inline void BehaviourParams::set_desiredinterval(float value) {
  
  desiredinterval_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.BehaviourParams.desiredInterval)
}

// -------------------------------------------------------------------

// TerrainQueryReport

// string terrainType = 1;
inline void TerrainQueryReport::clear_terraintype() {
  terraintype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TerrainQueryReport::terraintype() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TerrainQueryReport.terrainType)
  return terraintype_.GetNoArena();
}
inline void TerrainQueryReport::set_terraintype(const std::string& value) {
  
  terraintype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.TerrainQueryReport.terrainType)
}
inline void TerrainQueryReport::set_terraintype(std::string&& value) {
  
  terraintype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.TerrainQueryReport.terrainType)
}
inline void TerrainQueryReport::set_terraintype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  terraintype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.TerrainQueryReport.terrainType)
}
inline void TerrainQueryReport::set_terraintype(const char* value, size_t size) {
  
  terraintype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.TerrainQueryReport.terrainType)
}
inline std::string* TerrainQueryReport::mutable_terraintype() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.TerrainQueryReport.terrainType)
  return terraintype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TerrainQueryReport::release_terraintype() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.TerrainQueryReport.terrainType)
  
  return terraintype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TerrainQueryReport::set_allocated_terraintype(std::string* terraintype) {
  if (terraintype != nullptr) {
    
  } else {
    
  }
  terraintype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terraintype);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.TerrainQueryReport.terrainType)
}

// -------------------------------------------------------------------

// LoadingStateReport

// .Cognata.SDK.LoadingStateReport.stateType state = 1;
inline void LoadingStateReport::clear_state() {
  state_ = 0;
}
inline ::Cognata::SDK::LoadingStateReport_stateType LoadingStateReport::state() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LoadingStateReport.state)
  return static_cast< ::Cognata::SDK::LoadingStateReport_stateType >(state_);
}
inline void LoadingStateReport::set_state(::Cognata::SDK::LoadingStateReport_stateType value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LoadingStateReport.state)
}

// -------------------------------------------------------------------

// SensorOutput

// float outputTime = 1;
inline void SensorOutput::clear_outputtime() {
  outputtime_ = 0;
}
inline float SensorOutput::outputtime() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.outputTime)
  return outputtime_;
}
inline void SensorOutput::set_outputtime(float value) {
  
  outputtime_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorOutput.outputTime)
}

// uint32 outputFrameNum = 2;
inline void SensorOutput::clear_outputframenum() {
  outputframenum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorOutput::outputframenum() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.outputFrameNum)
  return outputframenum_;
}
inline void SensorOutput::set_outputframenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outputframenum_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorOutput.outputFrameNum)
}

// uint32 outputSensorID = 3;
inline void SensorOutput::clear_outputsensorid() {
  outputsensorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorOutput::outputsensorid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.outputSensorID)
  return outputsensorid_;
}
inline void SensorOutput::set_outputsensorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outputsensorid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorOutput.outputSensorID)
}

// uint32 outputVehicleID = 4;
inline void SensorOutput::clear_outputvehicleid() {
  outputvehicleid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorOutput::outputvehicleid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.outputVehicleID)
  return outputvehicleid_;
}
inline void SensorOutput::set_outputvehicleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outputvehicleid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SensorOutput.outputVehicleID)
}

// .Cognata.SDK.RGBCameraOutput rgbCameraOutput = 10;
inline bool SensorOutput::has_rgbcameraoutput() const {
  return SensorType_case() == kRgbCameraOutput;
}
inline void SensorOutput::set_has_rgbcameraoutput() {
  _oneof_case_[0] = kRgbCameraOutput;
}
inline void SensorOutput::clear_rgbcameraoutput() {
  if (has_rgbcameraoutput()) {
    delete SensorType_.rgbcameraoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::RGBCameraOutput* SensorOutput::release_rgbcameraoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.rgbCameraOutput)
  if (has_rgbcameraoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::RGBCameraOutput* temp = SensorType_.rgbcameraoutput_;
    SensorType_.rgbcameraoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RGBCameraOutput& SensorOutput::rgbcameraoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.rgbCameraOutput)
  return has_rgbcameraoutput()
      ? *SensorType_.rgbcameraoutput_
      : *reinterpret_cast< ::Cognata::SDK::RGBCameraOutput*>(&::Cognata::SDK::_RGBCameraOutput_default_instance_);
}
inline ::Cognata::SDK::RGBCameraOutput* SensorOutput::mutable_rgbcameraoutput() {
  if (!has_rgbcameraoutput()) {
    clear_SensorType();
    set_has_rgbcameraoutput();
    SensorType_.rgbcameraoutput_ = CreateMaybeMessage< ::Cognata::SDK::RGBCameraOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.rgbCameraOutput)
  return SensorType_.rgbcameraoutput_;
}

// .Cognata.SDK.ROIOutput roiOutput = 11;
inline bool SensorOutput::has_roioutput() const {
  return SensorType_case() == kRoiOutput;
}
inline void SensorOutput::set_has_roioutput() {
  _oneof_case_[0] = kRoiOutput;
}
inline ::Cognata::SDK::ROIOutput* SensorOutput::release_roioutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.roiOutput)
  if (has_roioutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::ROIOutput* temp = SensorType_.roioutput_;
    SensorType_.roioutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ROIOutput& SensorOutput::roioutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.roiOutput)
  return has_roioutput()
      ? *SensorType_.roioutput_
      : *reinterpret_cast< ::Cognata::SDK::ROIOutput*>(&::Cognata::SDK::_ROIOutput_default_instance_);
}
inline ::Cognata::SDK::ROIOutput* SensorOutput::mutable_roioutput() {
  if (!has_roioutput()) {
    clear_SensorType();
    set_has_roioutput();
    SensorType_.roioutput_ = CreateMaybeMessage< ::Cognata::SDK::ROIOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.roiOutput)
  return SensorType_.roioutput_;
}

// .Cognata.SDK.GPSOutput gpsOutput = 12;
inline bool SensorOutput::has_gpsoutput() const {
  return SensorType_case() == kGpsOutput;
}
inline void SensorOutput::set_has_gpsoutput() {
  _oneof_case_[0] = kGpsOutput;
}
inline void SensorOutput::clear_gpsoutput() {
  if (has_gpsoutput()) {
    delete SensorType_.gpsoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::GPSOutput* SensorOutput::release_gpsoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.gpsOutput)
  if (has_gpsoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::GPSOutput* temp = SensorType_.gpsoutput_;
    SensorType_.gpsoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::GPSOutput& SensorOutput::gpsoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.gpsOutput)
  return has_gpsoutput()
      ? *SensorType_.gpsoutput_
      : *reinterpret_cast< ::Cognata::SDK::GPSOutput*>(&::Cognata::SDK::_GPSOutput_default_instance_);
}
inline ::Cognata::SDK::GPSOutput* SensorOutput::mutable_gpsoutput() {
  if (!has_gpsoutput()) {
    clear_SensorType();
    set_has_gpsoutput();
    SensorType_.gpsoutput_ = CreateMaybeMessage< ::Cognata::SDK::GPSOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.gpsOutput)
  return SensorType_.gpsoutput_;
}

// .Cognata.SDK.WakeupOutput wakeupOutput = 13;
inline bool SensorOutput::has_wakeupoutput() const {
  return SensorType_case() == kWakeupOutput;
}
inline void SensorOutput::set_has_wakeupoutput() {
  _oneof_case_[0] = kWakeupOutput;
}
inline void SensorOutput::clear_wakeupoutput() {
  if (has_wakeupoutput()) {
    delete SensorType_.wakeupoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::WakeupOutput* SensorOutput::release_wakeupoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.wakeupOutput)
  if (has_wakeupoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::WakeupOutput* temp = SensorType_.wakeupoutput_;
    SensorType_.wakeupoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::WakeupOutput& SensorOutput::wakeupoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.wakeupOutput)
  return has_wakeupoutput()
      ? *SensorType_.wakeupoutput_
      : *reinterpret_cast< ::Cognata::SDK::WakeupOutput*>(&::Cognata::SDK::_WakeupOutput_default_instance_);
}
inline ::Cognata::SDK::WakeupOutput* SensorOutput::mutable_wakeupoutput() {
  if (!has_wakeupoutput()) {
    clear_SensorType();
    set_has_wakeupoutput();
    SensorType_.wakeupoutput_ = CreateMaybeMessage< ::Cognata::SDK::WakeupOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.wakeupOutput)
  return SensorType_.wakeupoutput_;
}

// .Cognata.SDK.LidarOutput lidarOutput = 14;
inline bool SensorOutput::has_lidaroutput() const {
  return SensorType_case() == kLidarOutput;
}
inline void SensorOutput::set_has_lidaroutput() {
  _oneof_case_[0] = kLidarOutput;
}
inline void SensorOutput::clear_lidaroutput() {
  if (has_lidaroutput()) {
    delete SensorType_.lidaroutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::LidarOutput* SensorOutput::release_lidaroutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.lidarOutput)
  if (has_lidaroutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::LidarOutput* temp = SensorType_.lidaroutput_;
    SensorType_.lidaroutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::LidarOutput& SensorOutput::lidaroutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.lidarOutput)
  return has_lidaroutput()
      ? *SensorType_.lidaroutput_
      : *reinterpret_cast< ::Cognata::SDK::LidarOutput*>(&::Cognata::SDK::_LidarOutput_default_instance_);
}
inline ::Cognata::SDK::LidarOutput* SensorOutput::mutable_lidaroutput() {
  if (!has_lidaroutput()) {
    clear_SensorType();
    set_has_lidaroutput();
    SensorType_.lidaroutput_ = CreateMaybeMessage< ::Cognata::SDK::LidarOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.lidarOutput)
  return SensorType_.lidaroutput_;
}

// .Cognata.SDK.E2COutput msgToClientOutput = 15;
inline bool SensorOutput::has_msgtoclientoutput() const {
  return SensorType_case() == kMsgToClientOutput;
}
inline void SensorOutput::set_has_msgtoclientoutput() {
  _oneof_case_[0] = kMsgToClientOutput;
}
inline void SensorOutput::clear_msgtoclientoutput() {
  if (has_msgtoclientoutput()) {
    delete SensorType_.msgtoclientoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::E2COutput* SensorOutput::release_msgtoclientoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.msgToClientOutput)
  if (has_msgtoclientoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::E2COutput* temp = SensorType_.msgtoclientoutput_;
    SensorType_.msgtoclientoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::E2COutput& SensorOutput::msgtoclientoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.msgToClientOutput)
  return has_msgtoclientoutput()
      ? *SensorType_.msgtoclientoutput_
      : *reinterpret_cast< ::Cognata::SDK::E2COutput*>(&::Cognata::SDK::_E2COutput_default_instance_);
}
inline ::Cognata::SDK::E2COutput* SensorOutput::mutable_msgtoclientoutput() {
  if (!has_msgtoclientoutput()) {
    clear_SensorType();
    set_has_msgtoclientoutput();
    SensorType_.msgtoclientoutput_ = CreateMaybeMessage< ::Cognata::SDK::E2COutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.msgToClientOutput)
  return SensorType_.msgtoclientoutput_;
}

// .Cognata.SDK.LaneDetectorOutput laneDetectorOutput = 16;
inline bool SensorOutput::has_lanedetectoroutput() const {
  return SensorType_case() == kLaneDetectorOutput;
}
inline void SensorOutput::set_has_lanedetectoroutput() {
  _oneof_case_[0] = kLaneDetectorOutput;
}
inline void SensorOutput::clear_lanedetectoroutput() {
  if (has_lanedetectoroutput()) {
    delete SensorType_.lanedetectoroutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::LaneDetectorOutput* SensorOutput::release_lanedetectoroutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.laneDetectorOutput)
  if (has_lanedetectoroutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::LaneDetectorOutput* temp = SensorType_.lanedetectoroutput_;
    SensorType_.lanedetectoroutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::LaneDetectorOutput& SensorOutput::lanedetectoroutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.laneDetectorOutput)
  return has_lanedetectoroutput()
      ? *SensorType_.lanedetectoroutput_
      : *reinterpret_cast< ::Cognata::SDK::LaneDetectorOutput*>(&::Cognata::SDK::_LaneDetectorOutput_default_instance_);
}
inline ::Cognata::SDK::LaneDetectorOutput* SensorOutput::mutable_lanedetectoroutput() {
  if (!has_lanedetectoroutput()) {
    clear_SensorType();
    set_has_lanedetectoroutput();
    SensorType_.lanedetectoroutput_ = CreateMaybeMessage< ::Cognata::SDK::LaneDetectorOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.laneDetectorOutput)
  return SensorType_.lanedetectoroutput_;
}

// .Cognata.SDK.SemanticInstanceLabelingOutput semanticInstanceLabelingOutput = 17;
inline bool SensorOutput::has_semanticinstancelabelingoutput() const {
  return SensorType_case() == kSemanticInstanceLabelingOutput;
}
inline void SensorOutput::set_has_semanticinstancelabelingoutput() {
  _oneof_case_[0] = kSemanticInstanceLabelingOutput;
}
inline void SensorOutput::clear_semanticinstancelabelingoutput() {
  if (has_semanticinstancelabelingoutput()) {
    delete SensorType_.semanticinstancelabelingoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::SemanticInstanceLabelingOutput* SensorOutput::release_semanticinstancelabelingoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.semanticInstanceLabelingOutput)
  if (has_semanticinstancelabelingoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::SemanticInstanceLabelingOutput* temp = SensorType_.semanticinstancelabelingoutput_;
    SensorType_.semanticinstancelabelingoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SemanticInstanceLabelingOutput& SensorOutput::semanticinstancelabelingoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.semanticInstanceLabelingOutput)
  return has_semanticinstancelabelingoutput()
      ? *SensorType_.semanticinstancelabelingoutput_
      : *reinterpret_cast< ::Cognata::SDK::SemanticInstanceLabelingOutput*>(&::Cognata::SDK::_SemanticInstanceLabelingOutput_default_instance_);
}
inline ::Cognata::SDK::SemanticInstanceLabelingOutput* SensorOutput::mutable_semanticinstancelabelingoutput() {
  if (!has_semanticinstancelabelingoutput()) {
    clear_SensorType();
    set_has_semanticinstancelabelingoutput();
    SensorType_.semanticinstancelabelingoutput_ = CreateMaybeMessage< ::Cognata::SDK::SemanticInstanceLabelingOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.semanticInstanceLabelingOutput)
  return SensorType_.semanticinstancelabelingoutput_;
}

// .Cognata.SDK.SemanticClassLabelingOutput semanticClassLabelingOutput = 18;
inline bool SensorOutput::has_semanticclasslabelingoutput() const {
  return SensorType_case() == kSemanticClassLabelingOutput;
}
inline void SensorOutput::set_has_semanticclasslabelingoutput() {
  _oneof_case_[0] = kSemanticClassLabelingOutput;
}
inline void SensorOutput::clear_semanticclasslabelingoutput() {
  if (has_semanticclasslabelingoutput()) {
    delete SensorType_.semanticclasslabelingoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::SemanticClassLabelingOutput* SensorOutput::release_semanticclasslabelingoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.semanticClassLabelingOutput)
  if (has_semanticclasslabelingoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::SemanticClassLabelingOutput* temp = SensorType_.semanticclasslabelingoutput_;
    SensorType_.semanticclasslabelingoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SemanticClassLabelingOutput& SensorOutput::semanticclasslabelingoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.semanticClassLabelingOutput)
  return has_semanticclasslabelingoutput()
      ? *SensorType_.semanticclasslabelingoutput_
      : *reinterpret_cast< ::Cognata::SDK::SemanticClassLabelingOutput*>(&::Cognata::SDK::_SemanticClassLabelingOutput_default_instance_);
}
inline ::Cognata::SDK::SemanticClassLabelingOutput* SensorOutput::mutable_semanticclasslabelingoutput() {
  if (!has_semanticclasslabelingoutput()) {
    clear_SensorType();
    set_has_semanticclasslabelingoutput();
    SensorType_.semanticclasslabelingoutput_ = CreateMaybeMessage< ::Cognata::SDK::SemanticClassLabelingOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.semanticClassLabelingOutput)
  return SensorType_.semanticclasslabelingoutput_;
}

// .Cognata.SDK.CarTelemetriesOutput carTelemetriesOutput = 19;
inline bool SensorOutput::has_cartelemetriesoutput() const {
  return SensorType_case() == kCarTelemetriesOutput;
}
inline void SensorOutput::set_has_cartelemetriesoutput() {
  _oneof_case_[0] = kCarTelemetriesOutput;
}
inline void SensorOutput::clear_cartelemetriesoutput() {
  if (has_cartelemetriesoutput()) {
    delete SensorType_.cartelemetriesoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::CarTelemetriesOutput* SensorOutput::release_cartelemetriesoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.carTelemetriesOutput)
  if (has_cartelemetriesoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::CarTelemetriesOutput* temp = SensorType_.cartelemetriesoutput_;
    SensorType_.cartelemetriesoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::CarTelemetriesOutput& SensorOutput::cartelemetriesoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.carTelemetriesOutput)
  return has_cartelemetriesoutput()
      ? *SensorType_.cartelemetriesoutput_
      : *reinterpret_cast< ::Cognata::SDK::CarTelemetriesOutput*>(&::Cognata::SDK::_CarTelemetriesOutput_default_instance_);
}
inline ::Cognata::SDK::CarTelemetriesOutput* SensorOutput::mutable_cartelemetriesoutput() {
  if (!has_cartelemetriesoutput()) {
    clear_SensorType();
    set_has_cartelemetriesoutput();
    SensorType_.cartelemetriesoutput_ = CreateMaybeMessage< ::Cognata::SDK::CarTelemetriesOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.carTelemetriesOutput)
  return SensorType_.cartelemetriesoutput_;
}

// .Cognata.SDK.DepthCameraOutput depthCameraOutput = 20;
inline bool SensorOutput::has_depthcameraoutput() const {
  return SensorType_case() == kDepthCameraOutput;
}
inline void SensorOutput::set_has_depthcameraoutput() {
  _oneof_case_[0] = kDepthCameraOutput;
}
inline void SensorOutput::clear_depthcameraoutput() {
  if (has_depthcameraoutput()) {
    delete SensorType_.depthcameraoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::DepthCameraOutput* SensorOutput::release_depthcameraoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.depthCameraOutput)
  if (has_depthcameraoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::DepthCameraOutput* temp = SensorType_.depthcameraoutput_;
    SensorType_.depthcameraoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::DepthCameraOutput& SensorOutput::depthcameraoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.depthCameraOutput)
  return has_depthcameraoutput()
      ? *SensorType_.depthcameraoutput_
      : *reinterpret_cast< ::Cognata::SDK::DepthCameraOutput*>(&::Cognata::SDK::_DepthCameraOutput_default_instance_);
}
inline ::Cognata::SDK::DepthCameraOutput* SensorOutput::mutable_depthcameraoutput() {
  if (!has_depthcameraoutput()) {
    clear_SensorType();
    set_has_depthcameraoutput();
    SensorType_.depthcameraoutput_ = CreateMaybeMessage< ::Cognata::SDK::DepthCameraOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.depthCameraOutput)
  return SensorType_.depthcameraoutput_;
}

// .Cognata.SDK.RadarOutput radarOutput = 21;
inline bool SensorOutput::has_radaroutput() const {
  return SensorType_case() == kRadarOutput;
}
inline void SensorOutput::set_has_radaroutput() {
  _oneof_case_[0] = kRadarOutput;
}
inline void SensorOutput::clear_radaroutput() {
  if (has_radaroutput()) {
    delete SensorType_.radaroutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::RadarOutput* SensorOutput::release_radaroutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.radarOutput)
  if (has_radaroutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::RadarOutput* temp = SensorType_.radaroutput_;
    SensorType_.radaroutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RadarOutput& SensorOutput::radaroutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.radarOutput)
  return has_radaroutput()
      ? *SensorType_.radaroutput_
      : *reinterpret_cast< ::Cognata::SDK::RadarOutput*>(&::Cognata::SDK::_RadarOutput_default_instance_);
}
inline ::Cognata::SDK::RadarOutput* SensorOutput::mutable_radaroutput() {
  if (!has_radaroutput()) {
    clear_SensorType();
    set_has_radaroutput();
    SensorType_.radaroutput_ = CreateMaybeMessage< ::Cognata::SDK::RadarOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.radarOutput)
  return SensorType_.radaroutput_;
}

// .Cognata.SDK.SemanticMaterialLabelingOutput semanticMaterialLabelingOutput = 22;
inline bool SensorOutput::has_semanticmateriallabelingoutput() const {
  return SensorType_case() == kSemanticMaterialLabelingOutput;
}
inline void SensorOutput::set_has_semanticmateriallabelingoutput() {
  _oneof_case_[0] = kSemanticMaterialLabelingOutput;
}
inline void SensorOutput::clear_semanticmateriallabelingoutput() {
  if (has_semanticmateriallabelingoutput()) {
    delete SensorType_.semanticmateriallabelingoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::SemanticMaterialLabelingOutput* SensorOutput::release_semanticmateriallabelingoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.semanticMaterialLabelingOutput)
  if (has_semanticmateriallabelingoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::SemanticMaterialLabelingOutput* temp = SensorType_.semanticmateriallabelingoutput_;
    SensorType_.semanticmateriallabelingoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SemanticMaterialLabelingOutput& SensorOutput::semanticmateriallabelingoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.semanticMaterialLabelingOutput)
  return has_semanticmateriallabelingoutput()
      ? *SensorType_.semanticmateriallabelingoutput_
      : *reinterpret_cast< ::Cognata::SDK::SemanticMaterialLabelingOutput*>(&::Cognata::SDK::_SemanticMaterialLabelingOutput_default_instance_);
}
inline ::Cognata::SDK::SemanticMaterialLabelingOutput* SensorOutput::mutable_semanticmateriallabelingoutput() {
  if (!has_semanticmateriallabelingoutput()) {
    clear_SensorType();
    set_has_semanticmateriallabelingoutput();
    SensorType_.semanticmateriallabelingoutput_ = CreateMaybeMessage< ::Cognata::SDK::SemanticMaterialLabelingOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.semanticMaterialLabelingOutput)
  return SensorType_.semanticmateriallabelingoutput_;
}

// .Cognata.SDK.SemanticStructureLabelingOutput semanticStructureLabelingOutput = 23;
inline bool SensorOutput::has_semanticstructurelabelingoutput() const {
  return SensorType_case() == kSemanticStructureLabelingOutput;
}
inline void SensorOutput::set_has_semanticstructurelabelingoutput() {
  _oneof_case_[0] = kSemanticStructureLabelingOutput;
}
inline void SensorOutput::clear_semanticstructurelabelingoutput() {
  if (has_semanticstructurelabelingoutput()) {
    delete SensorType_.semanticstructurelabelingoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::SemanticStructureLabelingOutput* SensorOutput::release_semanticstructurelabelingoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.semanticStructureLabelingOutput)
  if (has_semanticstructurelabelingoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::SemanticStructureLabelingOutput* temp = SensorType_.semanticstructurelabelingoutput_;
    SensorType_.semanticstructurelabelingoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::SemanticStructureLabelingOutput& SensorOutput::semanticstructurelabelingoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.semanticStructureLabelingOutput)
  return has_semanticstructurelabelingoutput()
      ? *SensorType_.semanticstructurelabelingoutput_
      : *reinterpret_cast< ::Cognata::SDK::SemanticStructureLabelingOutput*>(&::Cognata::SDK::_SemanticStructureLabelingOutput_default_instance_);
}
inline ::Cognata::SDK::SemanticStructureLabelingOutput* SensorOutput::mutable_semanticstructurelabelingoutput() {
  if (!has_semanticstructurelabelingoutput()) {
    clear_SensorType();
    set_has_semanticstructurelabelingoutput();
    SensorType_.semanticstructurelabelingoutput_ = CreateMaybeMessage< ::Cognata::SDK::SemanticStructureLabelingOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.semanticStructureLabelingOutput)
  return SensorType_.semanticstructurelabelingoutput_;
}

// .Cognata.SDK.DynamicObjectGroundTruthOutput dynamicObjectGroundTruthOutput = 40;
inline bool SensorOutput::has_dynamicobjectgroundtruthoutput() const {
  return SensorType_case() == kDynamicObjectGroundTruthOutput;
}
inline void SensorOutput::set_has_dynamicobjectgroundtruthoutput() {
  _oneof_case_[0] = kDynamicObjectGroundTruthOutput;
}
inline void SensorOutput::clear_dynamicobjectgroundtruthoutput() {
  if (has_dynamicobjectgroundtruthoutput()) {
    delete SensorType_.dynamicobjectgroundtruthoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::DynamicObjectGroundTruthOutput* SensorOutput::release_dynamicobjectgroundtruthoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.dynamicObjectGroundTruthOutput)
  if (has_dynamicobjectgroundtruthoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::DynamicObjectGroundTruthOutput* temp = SensorType_.dynamicobjectgroundtruthoutput_;
    SensorType_.dynamicobjectgroundtruthoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::DynamicObjectGroundTruthOutput& SensorOutput::dynamicobjectgroundtruthoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.dynamicObjectGroundTruthOutput)
  return has_dynamicobjectgroundtruthoutput()
      ? *SensorType_.dynamicobjectgroundtruthoutput_
      : *reinterpret_cast< ::Cognata::SDK::DynamicObjectGroundTruthOutput*>(&::Cognata::SDK::_DynamicObjectGroundTruthOutput_default_instance_);
}
inline ::Cognata::SDK::DynamicObjectGroundTruthOutput* SensorOutput::mutable_dynamicobjectgroundtruthoutput() {
  if (!has_dynamicobjectgroundtruthoutput()) {
    clear_SensorType();
    set_has_dynamicobjectgroundtruthoutput();
    SensorType_.dynamicobjectgroundtruthoutput_ = CreateMaybeMessage< ::Cognata::SDK::DynamicObjectGroundTruthOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.dynamicObjectGroundTruthOutput)
  return SensorType_.dynamicobjectgroundtruthoutput_;
}

// .Cognata.SDK.CarsQueryReport carsListOutput = 41;
inline bool SensorOutput::has_carslistoutput() const {
  return SensorType_case() == kCarsListOutput;
}
inline void SensorOutput::set_has_carslistoutput() {
  _oneof_case_[0] = kCarsListOutput;
}
inline void SensorOutput::clear_carslistoutput() {
  if (has_carslistoutput()) {
    delete SensorType_.carslistoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::CarsQueryReport* SensorOutput::release_carslistoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.carsListOutput)
  if (has_carslistoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::CarsQueryReport* temp = SensorType_.carslistoutput_;
    SensorType_.carslistoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::CarsQueryReport& SensorOutput::carslistoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.carsListOutput)
  return has_carslistoutput()
      ? *SensorType_.carslistoutput_
      : *reinterpret_cast< ::Cognata::SDK::CarsQueryReport*>(&::Cognata::SDK::_CarsQueryReport_default_instance_);
}
inline ::Cognata::SDK::CarsQueryReport* SensorOutput::mutable_carslistoutput() {
  if (!has_carslistoutput()) {
    clear_SensorType();
    set_has_carslistoutput();
    SensorType_.carslistoutput_ = CreateMaybeMessage< ::Cognata::SDK::CarsQueryReport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.carsListOutput)
  return SensorType_.carslistoutput_;
}

// .Cognata.SDK.ThermalCameraOutput thermalCameraOutput = 42;
inline bool SensorOutput::has_thermalcameraoutput() const {
  return SensorType_case() == kThermalCameraOutput;
}
inline void SensorOutput::set_has_thermalcameraoutput() {
  _oneof_case_[0] = kThermalCameraOutput;
}
inline void SensorOutput::clear_thermalcameraoutput() {
  if (has_thermalcameraoutput()) {
    delete SensorType_.thermalcameraoutput_;
    clear_has_SensorType();
  }
}
inline ::Cognata::SDK::ThermalCameraOutput* SensorOutput::release_thermalcameraoutput() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SensorOutput.thermalCameraOutput)
  if (has_thermalcameraoutput()) {
    clear_has_SensorType();
      ::Cognata::SDK::ThermalCameraOutput* temp = SensorType_.thermalcameraoutput_;
    SensorType_.thermalcameraoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ThermalCameraOutput& SensorOutput::thermalcameraoutput() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SensorOutput.thermalCameraOutput)
  return has_thermalcameraoutput()
      ? *SensorType_.thermalcameraoutput_
      : *reinterpret_cast< ::Cognata::SDK::ThermalCameraOutput*>(&::Cognata::SDK::_ThermalCameraOutput_default_instance_);
}
inline ::Cognata::SDK::ThermalCameraOutput* SensorOutput::mutable_thermalcameraoutput() {
  if (!has_thermalcameraoutput()) {
    clear_SensorType();
    set_has_thermalcameraoutput();
    SensorType_.thermalcameraoutput_ = CreateMaybeMessage< ::Cognata::SDK::ThermalCameraOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SensorOutput.thermalCameraOutput)
  return SensorType_.thermalcameraoutput_;
}

inline bool SensorOutput::has_SensorType() const {
  return SensorType_case() != SENSORTYPE_NOT_SET;
}
inline void SensorOutput::clear_has_SensorType() {
  _oneof_case_[0] = SENSORTYPE_NOT_SET;
}
inline SensorOutput::SensorTypeCase SensorOutput::SensorType_case() const {
  return SensorOutput::SensorTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DepthCameraOutput

// uint32 width = 1;
inline void DepthCameraOutput::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepthCameraOutput::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DepthCameraOutput.width)
  return width_;
}
inline void DepthCameraOutput::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.DepthCameraOutput.width)
}

// uint32 height = 2;
inline void DepthCameraOutput::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepthCameraOutput::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DepthCameraOutput.height)
  return height_;
}
inline void DepthCameraOutput::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.DepthCameraOutput.height)
}

// bytes pixels = 3;
inline void DepthCameraOutput::clear_pixels() {
  pixels_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepthCameraOutput::pixels() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DepthCameraOutput.pixels)
  return pixels_.GetNoArena();
}
inline void DepthCameraOutput::set_pixels(const std::string& value) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.DepthCameraOutput.pixels)
}
inline void DepthCameraOutput::set_pixels(std::string&& value) {
  
  pixels_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.DepthCameraOutput.pixels)
}
inline void DepthCameraOutput::set_pixels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.DepthCameraOutput.pixels)
}
inline void DepthCameraOutput::set_pixels(const void* value, size_t size) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.DepthCameraOutput.pixels)
}
inline std::string* DepthCameraOutput::mutable_pixels() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DepthCameraOutput.pixels)
  return pixels_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepthCameraOutput::release_pixels() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.DepthCameraOutput.pixels)
  
  return pixels_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepthCameraOutput::set_allocated_pixels(std::string* pixels) {
  if (pixels != nullptr) {
    
  } else {
    
  }
  pixels_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pixels);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.DepthCameraOutput.pixels)
}

// -------------------------------------------------------------------

// RGBCameraOutput

// uint32 width = 1;
inline void RGBCameraOutput::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGBCameraOutput::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RGBCameraOutput.width)
  return width_;
}
inline void RGBCameraOutput::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RGBCameraOutput.width)
}

// uint32 height = 2;
inline void RGBCameraOutput::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGBCameraOutput::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RGBCameraOutput.height)
  return height_;
}
inline void RGBCameraOutput::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RGBCameraOutput.height)
}

// bytes pixels = 3;
inline void RGBCameraOutput::clear_pixels() {
  pixels_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RGBCameraOutput::pixels() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RGBCameraOutput.pixels)
  return pixels_.GetNoArena();
}
inline void RGBCameraOutput::set_pixels(const std::string& value) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.RGBCameraOutput.pixels)
}
inline void RGBCameraOutput::set_pixels(std::string&& value) {
  
  pixels_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.RGBCameraOutput.pixels)
}
inline void RGBCameraOutput::set_pixels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.RGBCameraOutput.pixels)
}
inline void RGBCameraOutput::set_pixels(const void* value, size_t size) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.RGBCameraOutput.pixels)
}
inline std::string* RGBCameraOutput::mutable_pixels() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RGBCameraOutput.pixels)
  return pixels_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RGBCameraOutput::release_pixels() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RGBCameraOutput.pixels)
  
  return pixels_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RGBCameraOutput::set_allocated_pixels(std::string* pixels) {
  if (pixels != nullptr) {
    
  } else {
    
  }
  pixels_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pixels);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RGBCameraOutput.pixels)
}

// -------------------------------------------------------------------

// SemanticInstanceLabelingOutput

// uint32 width = 1;
inline void SemanticInstanceLabelingOutput::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SemanticInstanceLabelingOutput::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticInstanceLabelingOutput.width)
  return width_;
}
inline void SemanticInstanceLabelingOutput::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticInstanceLabelingOutput.width)
}

// uint32 height = 2;
inline void SemanticInstanceLabelingOutput::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SemanticInstanceLabelingOutput::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticInstanceLabelingOutput.height)
  return height_;
}
inline void SemanticInstanceLabelingOutput::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticInstanceLabelingOutput.height)
}

// bytes pixels = 3;
inline void SemanticInstanceLabelingOutput::clear_pixels() {
  pixels_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SemanticInstanceLabelingOutput::pixels() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticInstanceLabelingOutput.pixels)
  return pixels_.GetNoArena();
}
inline void SemanticInstanceLabelingOutput::set_pixels(const std::string& value) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticInstanceLabelingOutput.pixels)
}
inline void SemanticInstanceLabelingOutput::set_pixels(std::string&& value) {
  
  pixels_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.SemanticInstanceLabelingOutput.pixels)
}
inline void SemanticInstanceLabelingOutput::set_pixels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.SemanticInstanceLabelingOutput.pixels)
}
inline void SemanticInstanceLabelingOutput::set_pixels(const void* value, size_t size) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.SemanticInstanceLabelingOutput.pixels)
}
inline std::string* SemanticInstanceLabelingOutput::mutable_pixels() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SemanticInstanceLabelingOutput.pixels)
  return pixels_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SemanticInstanceLabelingOutput::release_pixels() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SemanticInstanceLabelingOutput.pixels)
  
  return pixels_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SemanticInstanceLabelingOutput::set_allocated_pixels(std::string* pixels) {
  if (pixels != nullptr) {
    
  } else {
    
  }
  pixels_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pixels);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SemanticInstanceLabelingOutput.pixels)
}

// -------------------------------------------------------------------

// SemanticClassLabelingOutput

// uint32 width = 1;
inline void SemanticClassLabelingOutput::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SemanticClassLabelingOutput::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticClassLabelingOutput.width)
  return width_;
}
inline void SemanticClassLabelingOutput::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticClassLabelingOutput.width)
}

// uint32 height = 2;
inline void SemanticClassLabelingOutput::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SemanticClassLabelingOutput::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticClassLabelingOutput.height)
  return height_;
}
inline void SemanticClassLabelingOutput::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticClassLabelingOutput.height)
}

// bytes pixels = 3;
inline void SemanticClassLabelingOutput::clear_pixels() {
  pixels_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SemanticClassLabelingOutput::pixels() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticClassLabelingOutput.pixels)
  return pixels_.GetNoArena();
}
inline void SemanticClassLabelingOutput::set_pixels(const std::string& value) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticClassLabelingOutput.pixels)
}
inline void SemanticClassLabelingOutput::set_pixels(std::string&& value) {
  
  pixels_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.SemanticClassLabelingOutput.pixels)
}
inline void SemanticClassLabelingOutput::set_pixels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.SemanticClassLabelingOutput.pixels)
}
inline void SemanticClassLabelingOutput::set_pixels(const void* value, size_t size) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.SemanticClassLabelingOutput.pixels)
}
inline std::string* SemanticClassLabelingOutput::mutable_pixels() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SemanticClassLabelingOutput.pixels)
  return pixels_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SemanticClassLabelingOutput::release_pixels() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SemanticClassLabelingOutput.pixels)
  
  return pixels_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SemanticClassLabelingOutput::set_allocated_pixels(std::string* pixels) {
  if (pixels != nullptr) {
    
  } else {
    
  }
  pixels_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pixels);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SemanticClassLabelingOutput.pixels)
}

// -------------------------------------------------------------------

// SemanticMaterialLabelingOutput

// uint32 width = 1;
inline void SemanticMaterialLabelingOutput::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SemanticMaterialLabelingOutput::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticMaterialLabelingOutput.width)
  return width_;
}
inline void SemanticMaterialLabelingOutput::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticMaterialLabelingOutput.width)
}

// uint32 height = 2;
inline void SemanticMaterialLabelingOutput::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SemanticMaterialLabelingOutput::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticMaterialLabelingOutput.height)
  return height_;
}
inline void SemanticMaterialLabelingOutput::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticMaterialLabelingOutput.height)
}

// bytes pixels = 3;
inline void SemanticMaterialLabelingOutput::clear_pixels() {
  pixels_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SemanticMaterialLabelingOutput::pixels() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticMaterialLabelingOutput.pixels)
  return pixels_.GetNoArena();
}
inline void SemanticMaterialLabelingOutput::set_pixels(const std::string& value) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticMaterialLabelingOutput.pixels)
}
inline void SemanticMaterialLabelingOutput::set_pixels(std::string&& value) {
  
  pixels_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.SemanticMaterialLabelingOutput.pixels)
}
inline void SemanticMaterialLabelingOutput::set_pixels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.SemanticMaterialLabelingOutput.pixels)
}
inline void SemanticMaterialLabelingOutput::set_pixels(const void* value, size_t size) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.SemanticMaterialLabelingOutput.pixels)
}
inline std::string* SemanticMaterialLabelingOutput::mutable_pixels() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SemanticMaterialLabelingOutput.pixels)
  return pixels_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SemanticMaterialLabelingOutput::release_pixels() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SemanticMaterialLabelingOutput.pixels)
  
  return pixels_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SemanticMaterialLabelingOutput::set_allocated_pixels(std::string* pixels) {
  if (pixels != nullptr) {
    
  } else {
    
  }
  pixels_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pixels);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SemanticMaterialLabelingOutput.pixels)
}

// -------------------------------------------------------------------

// SemanticStructureLabelingOutput

// uint32 width = 1;
inline void SemanticStructureLabelingOutput::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SemanticStructureLabelingOutput::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticStructureLabelingOutput.width)
  return width_;
}
inline void SemanticStructureLabelingOutput::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticStructureLabelingOutput.width)
}

// uint32 height = 2;
inline void SemanticStructureLabelingOutput::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SemanticStructureLabelingOutput::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticStructureLabelingOutput.height)
  return height_;
}
inline void SemanticStructureLabelingOutput::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticStructureLabelingOutput.height)
}

// bytes pixels = 3;
inline void SemanticStructureLabelingOutput::clear_pixels() {
  pixels_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SemanticStructureLabelingOutput::pixels() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SemanticStructureLabelingOutput.pixels)
  return pixels_.GetNoArena();
}
inline void SemanticStructureLabelingOutput::set_pixels(const std::string& value) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.SemanticStructureLabelingOutput.pixels)
}
inline void SemanticStructureLabelingOutput::set_pixels(std::string&& value) {
  
  pixels_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.SemanticStructureLabelingOutput.pixels)
}
inline void SemanticStructureLabelingOutput::set_pixels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.SemanticStructureLabelingOutput.pixels)
}
inline void SemanticStructureLabelingOutput::set_pixels(const void* value, size_t size) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.SemanticStructureLabelingOutput.pixels)
}
inline std::string* SemanticStructureLabelingOutput::mutable_pixels() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SemanticStructureLabelingOutput.pixels)
  return pixels_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SemanticStructureLabelingOutput::release_pixels() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SemanticStructureLabelingOutput.pixels)
  
  return pixels_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SemanticStructureLabelingOutput::set_allocated_pixels(std::string* pixels) {
  if (pixels != nullptr) {
    
  } else {
    
  }
  pixels_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pixels);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SemanticStructureLabelingOutput.pixels)
}

// -------------------------------------------------------------------

// LidarOutput

// bytes points = 1;
inline void LidarOutput::clear_points() {
  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LidarOutput::points() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarOutput.points)
  return points_.GetNoArena();
}
inline void LidarOutput::set_points(const std::string& value) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarOutput.points)
}
inline void LidarOutput::set_points(std::string&& value) {
  
  points_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.LidarOutput.points)
}
inline void LidarOutput::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.LidarOutput.points)
}
inline void LidarOutput::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.LidarOutput.points)
}
inline std::string* LidarOutput::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.LidarOutput.points)
  return points_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LidarOutput::release_points() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.LidarOutput.points)
  
  return points_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LidarOutput::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.LidarOutput.points)
}

// -------------------------------------------------------------------

// GPSOutput

// float lat = 1;
inline void GPSOutput::clear_lat() {
  lat_ = 0;
}
inline float GPSOutput::lat() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.lat)
  return lat_;
}
inline void GPSOutput::set_lat(float value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.lat)
}

// float long = 2;
inline void GPSOutput::clear_long_() {
  long__ = 0;
}
inline float GPSOutput::long_() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.long)
  return long__;
}
inline void GPSOutput::set_long_(float value) {
  
  long__ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.long)
}

// .Cognata.SDK.SDKVector3 orientation = 3;
inline bool GPSOutput::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::orientation() const {
  const ::Cognata::SDK::SDKVector3* p = orientation_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_orientation() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.orientation)
  
  ::Cognata::SDK::SDKVector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.orientation)
  return orientation_;
}
inline void GPSOutput::set_allocated_orientation(::Cognata::SDK::SDKVector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.orientation)
}

// float speed = 4;
inline void GPSOutput::clear_speed() {
  speed_ = 0;
}
inline float GPSOutput::speed() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.speed)
  return speed_;
}
inline void GPSOutput::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.speed)
}

// float laneWidth = 5;
inline void GPSOutput::clear_lanewidth() {
  lanewidth_ = 0;
}
inline float GPSOutput::lanewidth() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.laneWidth)
  return lanewidth_;
}
inline void GPSOutput::set_lanewidth(float value) {
  
  lanewidth_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.laneWidth)
}

// float LaneOffset = 6;
inline void GPSOutput::clear_laneoffset() {
  laneoffset_ = 0;
}
inline float GPSOutput::laneoffset() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.LaneOffset)
  return laneoffset_;
}
inline void GPSOutput::set_laneoffset(float value) {
  
  laneoffset_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.LaneOffset)
}

// .Cognata.SDK.SDKVector3 Position = 7;
inline bool GPSOutput::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::position() const {
  const ::Cognata::SDK::SDKVector3* p = position_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.Position)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_position() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.Position)
  
  ::Cognata::SDK::SDKVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.Position)
  return position_;
}
inline void GPSOutput::set_allocated_position(::Cognata::SDK::SDKVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.Position)
}

// .Cognata.SDK.SDKVector3 acceleration = 8;
inline bool GPSOutput::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::acceleration() const {
  const ::Cognata::SDK::SDKVector3* p = acceleration_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.acceleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_acceleration() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.acceleration)
  
  ::Cognata::SDK::SDKVector3* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.acceleration)
  return acceleration_;
}
inline void GPSOutput::set_allocated_acceleration(::Cognata::SDK::SDKVector3* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.acceleration)
}

// .Cognata.SDK.SDKVector3 velocityLocal3D = 9;
inline bool GPSOutput::has_velocitylocal3d() const {
  return this != internal_default_instance() && velocitylocal3d_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::velocitylocal3d() const {
  const ::Cognata::SDK::SDKVector3* p = velocitylocal3d_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.velocityLocal3D)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_velocitylocal3d() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.velocityLocal3D)
  
  ::Cognata::SDK::SDKVector3* temp = velocitylocal3d_;
  velocitylocal3d_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_velocitylocal3d() {
  
  if (velocitylocal3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    velocitylocal3d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.velocityLocal3D)
  return velocitylocal3d_;
}
inline void GPSOutput::set_allocated_velocitylocal3d(::Cognata::SDK::SDKVector3* velocitylocal3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocitylocal3d_);
  }
  if (velocitylocal3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocitylocal3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocitylocal3d, submessage_arena);
    }
    
  } else {
    
  }
  velocitylocal3d_ = velocitylocal3d;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.velocityLocal3D)
}

// .Cognata.SDK.SDKVector3 angularVelocityLocal3D = 10;
inline bool GPSOutput::has_angularvelocitylocal3d() const {
  return this != internal_default_instance() && angularvelocitylocal3d_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::angularvelocitylocal3d() const {
  const ::Cognata::SDK::SDKVector3* p = angularvelocitylocal3d_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.angularVelocityLocal3D)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_angularvelocitylocal3d() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.angularVelocityLocal3D)
  
  ::Cognata::SDK::SDKVector3* temp = angularvelocitylocal3d_;
  angularvelocitylocal3d_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_angularvelocitylocal3d() {
  
  if (angularvelocitylocal3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    angularvelocitylocal3d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.angularVelocityLocal3D)
  return angularvelocitylocal3d_;
}
inline void GPSOutput::set_allocated_angularvelocitylocal3d(::Cognata::SDK::SDKVector3* angularvelocitylocal3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angularvelocitylocal3d_);
  }
  if (angularvelocitylocal3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angularvelocitylocal3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularvelocitylocal3d, submessage_arena);
    }
    
  } else {
    
  }
  angularvelocitylocal3d_ = angularvelocitylocal3d;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.angularVelocityLocal3D)
}

// .Cognata.SDK.SDKVector3 angularAccelerationLocal3D = 11;
inline bool GPSOutput::has_angularaccelerationlocal3d() const {
  return this != internal_default_instance() && angularaccelerationlocal3d_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::angularaccelerationlocal3d() const {
  const ::Cognata::SDK::SDKVector3* p = angularaccelerationlocal3d_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.angularAccelerationLocal3D)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_angularaccelerationlocal3d() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.angularAccelerationLocal3D)
  
  ::Cognata::SDK::SDKVector3* temp = angularaccelerationlocal3d_;
  angularaccelerationlocal3d_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_angularaccelerationlocal3d() {
  
  if (angularaccelerationlocal3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    angularaccelerationlocal3d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.angularAccelerationLocal3D)
  return angularaccelerationlocal3d_;
}
inline void GPSOutput::set_allocated_angularaccelerationlocal3d(::Cognata::SDK::SDKVector3* angularaccelerationlocal3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angularaccelerationlocal3d_);
  }
  if (angularaccelerationlocal3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angularaccelerationlocal3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularaccelerationlocal3d, submessage_arena);
    }
    
  } else {
    
  }
  angularaccelerationlocal3d_ = angularaccelerationlocal3d;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.angularAccelerationLocal3D)
}

// int32 laneNumber = 12;
inline void GPSOutput::clear_lanenumber() {
  lanenumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPSOutput::lanenumber() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.laneNumber)
  return lanenumber_;
}
inline void GPSOutput::set_lanenumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lanenumber_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.laneNumber)
}

// int32 navigationSegment = 13;
inline void GPSOutput::clear_navigationsegment() {
  navigationsegment_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPSOutput::navigationsegment() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.navigationSegment)
  return navigationsegment_;
}
inline void GPSOutput::set_navigationsegment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  navigationsegment_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.navigationSegment)
}

// float alt = 14;
inline void GPSOutput::clear_alt() {
  alt_ = 0;
}
inline float GPSOutput::alt() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.alt)
  return alt_;
}
inline void GPSOutput::set_alt(float value) {
  
  alt_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.alt)
}

// float noisedLat = 15;
inline void GPSOutput::clear_noisedlat() {
  noisedlat_ = 0;
}
inline float GPSOutput::noisedlat() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.noisedLat)
  return noisedlat_;
}
inline void GPSOutput::set_noisedlat(float value) {
  
  noisedlat_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.noisedLat)
}

// float noisedLon = 16;
inline void GPSOutput::clear_noisedlon() {
  noisedlon_ = 0;
}
inline float GPSOutput::noisedlon() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.noisedLon)
  return noisedlon_;
}
inline void GPSOutput::set_noisedlon(float value) {
  
  noisedlon_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.noisedLon)
}

// float noisedAlt = 17;
inline void GPSOutput::clear_noisedalt() {
  noisedalt_ = 0;
}
inline float GPSOutput::noisedalt() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.noisedAlt)
  return noisedalt_;
}
inline void GPSOutput::set_noisedalt(float value) {
  
  noisedalt_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.noisedAlt)
}

// .Cognata.SDK.SDKVector3 noisedPosition = 18;
inline bool GPSOutput::has_noisedposition() const {
  return this != internal_default_instance() && noisedposition_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::noisedposition() const {
  const ::Cognata::SDK::SDKVector3* p = noisedposition_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.noisedPosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_noisedposition() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.noisedPosition)
  
  ::Cognata::SDK::SDKVector3* temp = noisedposition_;
  noisedposition_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_noisedposition() {
  
  if (noisedposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    noisedposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.noisedPosition)
  return noisedposition_;
}
inline void GPSOutput::set_allocated_noisedposition(::Cognata::SDK::SDKVector3* noisedposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(noisedposition_);
  }
  if (noisedposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      noisedposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noisedposition, submessage_arena);
    }
    
  } else {
    
  }
  noisedposition_ = noisedposition;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.noisedPosition)
}

// string sensorName = 19;
inline void GPSOutput::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GPSOutput::sensorname() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.sensorName)
  return sensorname_.GetNoArena();
}
inline void GPSOutput::set_sensorname(const std::string& value) {
  
  sensorname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.GPSOutput.sensorName)
}
inline void GPSOutput::set_sensorname(std::string&& value) {
  
  sensorname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.GPSOutput.sensorName)
}
inline void GPSOutput::set_sensorname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sensorname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.GPSOutput.sensorName)
}
inline void GPSOutput::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.GPSOutput.sensorName)
}
inline std::string* GPSOutput::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.sensorName)
  return sensorname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GPSOutput::release_sensorname() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.sensorName)
  
  return sensorname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GPSOutput::set_allocated_sensorname(std::string* sensorname) {
  if (sensorname != nullptr) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.sensorName)
}

// .Cognata.SDK.SDKVector3 GPSAcceleration = 20;
inline bool GPSOutput::has_gpsacceleration() const {
  return this != internal_default_instance() && gpsacceleration_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::gpsacceleration() const {
  const ::Cognata::SDK::SDKVector3* p = gpsacceleration_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.GPSAcceleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_gpsacceleration() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.GPSAcceleration)
  
  ::Cognata::SDK::SDKVector3* temp = gpsacceleration_;
  gpsacceleration_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_gpsacceleration() {
  
  if (gpsacceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    gpsacceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.GPSAcceleration)
  return gpsacceleration_;
}
inline void GPSOutput::set_allocated_gpsacceleration(::Cognata::SDK::SDKVector3* gpsacceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpsacceleration_);
  }
  if (gpsacceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpsacceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpsacceleration, submessage_arena);
    }
    
  } else {
    
  }
  gpsacceleration_ = gpsacceleration;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.GPSAcceleration)
}

// .Cognata.SDK.SDKVector3 GPSVelocityLocal3D = 21;
inline bool GPSOutput::has_gpsvelocitylocal3d() const {
  return this != internal_default_instance() && gpsvelocitylocal3d_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::gpsvelocitylocal3d() const {
  const ::Cognata::SDK::SDKVector3* p = gpsvelocitylocal3d_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.GPSVelocityLocal3D)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_gpsvelocitylocal3d() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.GPSVelocityLocal3D)
  
  ::Cognata::SDK::SDKVector3* temp = gpsvelocitylocal3d_;
  gpsvelocitylocal3d_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_gpsvelocitylocal3d() {
  
  if (gpsvelocitylocal3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    gpsvelocitylocal3d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.GPSVelocityLocal3D)
  return gpsvelocitylocal3d_;
}
inline void GPSOutput::set_allocated_gpsvelocitylocal3d(::Cognata::SDK::SDKVector3* gpsvelocitylocal3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpsvelocitylocal3d_);
  }
  if (gpsvelocitylocal3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpsvelocitylocal3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpsvelocitylocal3d, submessage_arena);
    }
    
  } else {
    
  }
  gpsvelocitylocal3d_ = gpsvelocitylocal3d;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.GPSVelocityLocal3D)
}

// .Cognata.SDK.SDKVector3 GPSAngularVelocityLocal3D = 22;
inline bool GPSOutput::has_gpsangularvelocitylocal3d() const {
  return this != internal_default_instance() && gpsangularvelocitylocal3d_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::gpsangularvelocitylocal3d() const {
  const ::Cognata::SDK::SDKVector3* p = gpsangularvelocitylocal3d_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.GPSAngularVelocityLocal3D)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_gpsangularvelocitylocal3d() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.GPSAngularVelocityLocal3D)
  
  ::Cognata::SDK::SDKVector3* temp = gpsangularvelocitylocal3d_;
  gpsangularvelocitylocal3d_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_gpsangularvelocitylocal3d() {
  
  if (gpsangularvelocitylocal3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    gpsangularvelocitylocal3d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.GPSAngularVelocityLocal3D)
  return gpsangularvelocitylocal3d_;
}
inline void GPSOutput::set_allocated_gpsangularvelocitylocal3d(::Cognata::SDK::SDKVector3* gpsangularvelocitylocal3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpsangularvelocitylocal3d_);
  }
  if (gpsangularvelocitylocal3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpsangularvelocitylocal3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpsangularvelocitylocal3d, submessage_arena);
    }
    
  } else {
    
  }
  gpsangularvelocitylocal3d_ = gpsangularvelocitylocal3d;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.GPSAngularVelocityLocal3D)
}

// .Cognata.SDK.SDKVector3 GPSAngularAccelerationLocal3D = 23;
inline bool GPSOutput::has_gpsangularaccelerationlocal3d() const {
  return this != internal_default_instance() && gpsangularaccelerationlocal3d_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& GPSOutput::gpsangularaccelerationlocal3d() const {
  const ::Cognata::SDK::SDKVector3* p = gpsangularaccelerationlocal3d_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.GPSOutput.GPSAngularAccelerationLocal3D)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::release_gpsangularaccelerationlocal3d() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.GPSOutput.GPSAngularAccelerationLocal3D)
  
  ::Cognata::SDK::SDKVector3* temp = gpsangularaccelerationlocal3d_;
  gpsangularaccelerationlocal3d_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* GPSOutput::mutable_gpsangularaccelerationlocal3d() {
  
  if (gpsangularaccelerationlocal3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    gpsangularaccelerationlocal3d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.GPSOutput.GPSAngularAccelerationLocal3D)
  return gpsangularaccelerationlocal3d_;
}
inline void GPSOutput::set_allocated_gpsangularaccelerationlocal3d(::Cognata::SDK::SDKVector3* gpsangularaccelerationlocal3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpsangularaccelerationlocal3d_);
  }
  if (gpsangularaccelerationlocal3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpsangularaccelerationlocal3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpsangularaccelerationlocal3d, submessage_arena);
    }
    
  } else {
    
  }
  gpsangularaccelerationlocal3d_ = gpsangularaccelerationlocal3d;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.GPSOutput.GPSAngularAccelerationLocal3D)
}

// -------------------------------------------------------------------

// RadarOutput_Header

// string radarID = 1;
inline void RadarOutput_Header::clear_radarid() {
  radarid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RadarOutput_Header::radarid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Header.radarID)
  return radarid_.GetNoArena();
}
inline void RadarOutput_Header::set_radarid(const std::string& value) {
  
  radarid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Header.radarID)
}
inline void RadarOutput_Header::set_radarid(std::string&& value) {
  
  radarid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.RadarOutput.Header.radarID)
}
inline void RadarOutput_Header::set_radarid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  radarid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.RadarOutput.Header.radarID)
}
inline void RadarOutput_Header::set_radarid(const char* value, size_t size) {
  
  radarid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.RadarOutput.Header.radarID)
}
inline std::string* RadarOutput_Header::mutable_radarid() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.Header.radarID)
  return radarid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RadarOutput_Header::release_radarid() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarOutput.Header.radarID)
  
  return radarid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RadarOutput_Header::set_allocated_radarid(std::string* radarid) {
  if (radarid != nullptr) {
    
  } else {
    
  }
  radarid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radarid);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RadarOutput.Header.radarID)
}

// .Cognata.SDK.RadarPlacement radarPlacement = 2;
inline bool RadarOutput_Header::has_radarplacement() const {
  return this != internal_default_instance() && radarplacement_ != nullptr;
}
inline void RadarOutput_Header::clear_radarplacement() {
  if (GetArenaNoVirtual() == nullptr && radarplacement_ != nullptr) {
    delete radarplacement_;
  }
  radarplacement_ = nullptr;
}
inline const ::Cognata::SDK::RadarPlacement& RadarOutput_Header::radarplacement() const {
  const ::Cognata::SDK::RadarPlacement* p = radarplacement_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Header.radarPlacement)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::RadarPlacement*>(
      &::Cognata::SDK::_RadarPlacement_default_instance_);
}
inline ::Cognata::SDK::RadarPlacement* RadarOutput_Header::release_radarplacement() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarOutput.Header.radarPlacement)
  
  ::Cognata::SDK::RadarPlacement* temp = radarplacement_;
  radarplacement_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::RadarPlacement* RadarOutput_Header::mutable_radarplacement() {
  
  if (radarplacement_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::RadarPlacement>(GetArenaNoVirtual());
    radarplacement_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.Header.radarPlacement)
  return radarplacement_;
}
inline void RadarOutput_Header::set_allocated_radarplacement(::Cognata::SDK::RadarPlacement* radarplacement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete radarplacement_;
  }
  if (radarplacement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      radarplacement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radarplacement, submessage_arena);
    }
    
  } else {
    
  }
  radarplacement_ = radarplacement;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RadarOutput.Header.radarPlacement)
}

// float HorizontalFOV = 3;
inline void RadarOutput_Header::clear_horizontalfov() {
  horizontalfov_ = 0;
}
inline float RadarOutput_Header::horizontalfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Header.HorizontalFOV)
  return horizontalfov_;
}
inline void RadarOutput_Header::set_horizontalfov(float value) {
  
  horizontalfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Header.HorizontalFOV)
}

// float VerticalFOV = 4;
inline void RadarOutput_Header::clear_verticalfov() {
  verticalfov_ = 0;
}
inline float RadarOutput_Header::verticalfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Header.VerticalFOV)
  return verticalfov_;
}
inline void RadarOutput_Header::set_verticalfov(float value) {
  
  verticalfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Header.VerticalFOV)
}

// repeated .Cognata.SDK.RadarOutput.BeamInfo BeamInfo = 5;
inline int RadarOutput_Header::beaminfo_size() const {
  return beaminfo_.size();
}
inline void RadarOutput_Header::clear_beaminfo() {
  beaminfo_.Clear();
}
inline ::Cognata::SDK::RadarOutput_BeamInfo* RadarOutput_Header::mutable_beaminfo(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.Header.BeamInfo)
  return beaminfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::RadarOutput_BeamInfo >*
RadarOutput_Header::mutable_beaminfo() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.RadarOutput.Header.BeamInfo)
  return &beaminfo_;
}
inline const ::Cognata::SDK::RadarOutput_BeamInfo& RadarOutput_Header::beaminfo(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Header.BeamInfo)
  return beaminfo_.Get(index);
}
inline ::Cognata::SDK::RadarOutput_BeamInfo* RadarOutput_Header::add_beaminfo() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.RadarOutput.Header.BeamInfo)
  return beaminfo_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::RadarOutput_BeamInfo >&
RadarOutput_Header::beaminfo() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.RadarOutput.Header.BeamInfo)
  return beaminfo_;
}

// -------------------------------------------------------------------

// RadarOutput_BeamInfo

// float horizontalFOV = 1;
inline void RadarOutput_BeamInfo::clear_horizontalfov() {
  horizontalfov_ = 0;
}
inline float RadarOutput_BeamInfo::horizontalfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.BeamInfo.horizontalFOV)
  return horizontalfov_;
}
inline void RadarOutput_BeamInfo::set_horizontalfov(float value) {
  
  horizontalfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.BeamInfo.horizontalFOV)
}

// float verticalFOV = 2;
inline void RadarOutput_BeamInfo::clear_verticalfov() {
  verticalfov_ = 0;
}
inline float RadarOutput_BeamInfo::verticalfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.BeamInfo.verticalFOV)
  return verticalfov_;
}
inline void RadarOutput_BeamInfo::set_verticalfov(float value) {
  
  verticalfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.BeamInfo.verticalFOV)
}

// string radarBeamID = 3;
inline void RadarOutput_BeamInfo::clear_radarbeamid() {
  radarbeamid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RadarOutput_BeamInfo::radarbeamid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.BeamInfo.radarBeamID)
  return radarbeamid_.GetNoArena();
}
inline void RadarOutput_BeamInfo::set_radarbeamid(const std::string& value) {
  
  radarbeamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.BeamInfo.radarBeamID)
}
inline void RadarOutput_BeamInfo::set_radarbeamid(std::string&& value) {
  
  radarbeamid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.RadarOutput.BeamInfo.radarBeamID)
}
inline void RadarOutput_BeamInfo::set_radarbeamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  radarbeamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.RadarOutput.BeamInfo.radarBeamID)
}
inline void RadarOutput_BeamInfo::set_radarbeamid(const char* value, size_t size) {
  
  radarbeamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.RadarOutput.BeamInfo.radarBeamID)
}
inline std::string* RadarOutput_BeamInfo::mutable_radarbeamid() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.BeamInfo.radarBeamID)
  return radarbeamid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RadarOutput_BeamInfo::release_radarbeamid() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarOutput.BeamInfo.radarBeamID)
  
  return radarbeamid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RadarOutput_BeamInfo::set_allocated_radarbeamid(std::string* radarbeamid) {
  if (radarbeamid != nullptr) {
    
  } else {
    
  }
  radarbeamid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radarbeamid);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RadarOutput.BeamInfo.radarBeamID)
}

// float range = 4;
inline void RadarOutput_BeamInfo::clear_range() {
  range_ = 0;
}
inline float RadarOutput_BeamInfo::range() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.BeamInfo.range)
  return range_;
}
inline void RadarOutput_BeamInfo::set_range(float value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.BeamInfo.range)
}

// .Cognata.SDK.SDKVector3 offset = 5;
inline bool RadarOutput_BeamInfo::has_offset() const {
  return this != internal_default_instance() && offset_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& RadarOutput_BeamInfo::offset() const {
  const ::Cognata::SDK::SDKVector3* p = offset_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.BeamInfo.offset)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* RadarOutput_BeamInfo::release_offset() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarOutput.BeamInfo.offset)
  
  ::Cognata::SDK::SDKVector3* temp = offset_;
  offset_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* RadarOutput_BeamInfo::mutable_offset() {
  
  if (offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.BeamInfo.offset)
  return offset_;
}
inline void RadarOutput_BeamInfo::set_allocated_offset(::Cognata::SDK::SDKVector3* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RadarOutput.BeamInfo.offset)
}

// .Cognata.SDK.SDKVector3 rotation = 6;
inline bool RadarOutput_BeamInfo::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& RadarOutput_BeamInfo::rotation() const {
  const ::Cognata::SDK::SDKVector3* p = rotation_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.BeamInfo.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* RadarOutput_BeamInfo::release_rotation() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarOutput.BeamInfo.rotation)
  
  ::Cognata::SDK::SDKVector3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* RadarOutput_BeamInfo::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.BeamInfo.rotation)
  return rotation_;
}
inline void RadarOutput_BeamInfo::set_allocated_rotation(::Cognata::SDK::SDKVector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RadarOutput.BeamInfo.rotation)
}

// -------------------------------------------------------------------

// RadarOutput_Target_RadarTarget

// int32 trackingStatus = 1;
inline void RadarOutput_Target_RadarTarget::clear_trackingstatus() {
  trackingstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarOutput_Target_RadarTarget::trackingstatus() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.RadarTarget.trackingStatus)
  return trackingstatus_;
}
inline void RadarOutput_Target_RadarTarget::set_trackingstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trackingstatus_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.RadarTarget.trackingStatus)
}

// uint32 age = 2;
inline void RadarOutput_Target_RadarTarget::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarOutput_Target_RadarTarget::age() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.RadarTarget.age)
  return age_;
}
inline void RadarOutput_Target_RadarTarget::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.RadarTarget.age)
}

// uint32 lastSeen = 3;
inline void RadarOutput_Target_RadarTarget::clear_lastseen() {
  lastseen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarOutput_Target_RadarTarget::lastseen() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.RadarTarget.lastSeen)
  return lastseen_;
}
inline void RadarOutput_Target_RadarTarget::set_lastseen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lastseen_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.RadarTarget.lastSeen)
}

// bool isStationary = 5;
inline void RadarOutput_Target_RadarTarget::clear_isstationary() {
  isstationary_ = false;
}
inline bool RadarOutput_Target_RadarTarget::isstationary() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.RadarTarget.isStationary)
  return isstationary_;
}
inline void RadarOutput_Target_RadarTarget::set_isstationary(bool value) {
  
  isstationary_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.RadarTarget.isStationary)
}

// bool isGhost = 6;
inline void RadarOutput_Target_RadarTarget::clear_isghost() {
  isghost_ = false;
}
inline bool RadarOutput_Target_RadarTarget::isghost() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.RadarTarget.isGhost)
  return isghost_;
}
inline void RadarOutput_Target_RadarTarget::set_isghost(bool value) {
  
  isghost_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.RadarTarget.isGhost)
}

// -------------------------------------------------------------------

// RadarOutput_Target_GeometricTarget

// uint32 isAggregate = 1;
inline void RadarOutput_Target_GeometricTarget::clear_isaggregate() {
  isaggregate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarOutput_Target_GeometricTarget::isaggregate() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.GeometricTarget.isAggregate)
  return isaggregate_;
}
inline void RadarOutput_Target_GeometricTarget::set_isaggregate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  isaggregate_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.GeometricTarget.isAggregate)
}

// -------------------------------------------------------------------

// RadarOutput_Target

// uint32 id = 1;
inline void RadarOutput_Target::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarOutput_Target::id() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.id)
  return id_;
}
inline void RadarOutput_Target::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.id)
}

// uint32 timeStamp = 2;
inline void RadarOutput_Target::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarOutput_Target::timestamp() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.timeStamp)
  return timestamp_;
}
inline void RadarOutput_Target::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.timeStamp)
}

// float range = 3;
inline void RadarOutput_Target::clear_range() {
  range_ = 0;
}
inline float RadarOutput_Target::range() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.range)
  return range_;
}
inline void RadarOutput_Target::set_range(float value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.range)
}

// float azimuth = 4;
inline void RadarOutput_Target::clear_azimuth() {
  azimuth_ = 0;
}
inline float RadarOutput_Target::azimuth() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.azimuth)
  return azimuth_;
}
inline void RadarOutput_Target::set_azimuth(float value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.azimuth)
}

// float elevation = 5;
inline void RadarOutput_Target::clear_elevation() {
  elevation_ = 0;
}
inline float RadarOutput_Target::elevation() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.elevation)
  return elevation_;
}
inline void RadarOutput_Target::set_elevation(float value) {
  
  elevation_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.elevation)
}

// float rangeRate = 6;
inline void RadarOutput_Target::clear_rangerate() {
  rangerate_ = 0;
}
inline float RadarOutput_Target::rangerate() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.rangeRate)
  return rangerate_;
}
inline void RadarOutput_Target::set_rangerate(float value) {
  
  rangerate_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.rangeRate)
}

// float amplitude = 7;
inline void RadarOutput_Target::clear_amplitude() {
  amplitude_ = 0;
}
inline float RadarOutput_Target::amplitude() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.amplitude)
  return amplitude_;
}
inline void RadarOutput_Target::set_amplitude(float value) {
  
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.amplitude)
}

// float reflectorID = 8;
inline void RadarOutput_Target::clear_reflectorid() {
  reflectorid_ = 0;
}
inline float RadarOutput_Target::reflectorid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.reflectorID)
  return reflectorid_;
}
inline void RadarOutput_Target::set_reflectorid(float value) {
  
  reflectorid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.reflectorID)
}

// float instanceID = 9;
inline void RadarOutput_Target::clear_instanceid() {
  instanceid_ = 0;
}
inline float RadarOutput_Target::instanceid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.instanceID)
  return instanceid_;
}
inline void RadarOutput_Target::set_instanceid(float value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.instanceID)
}

// string beamsId = 10;
inline void RadarOutput_Target::clear_beamsid() {
  beamsid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RadarOutput_Target::beamsid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.beamsId)
  return beamsid_.GetNoArena();
}
inline void RadarOutput_Target::set_beamsid(const std::string& value) {
  
  beamsid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.RadarOutput.Target.beamsId)
}
inline void RadarOutput_Target::set_beamsid(std::string&& value) {
  
  beamsid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.RadarOutput.Target.beamsId)
}
inline void RadarOutput_Target::set_beamsid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  beamsid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.RadarOutput.Target.beamsId)
}
inline void RadarOutput_Target::set_beamsid(const char* value, size_t size) {
  
  beamsid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.RadarOutput.Target.beamsId)
}
inline std::string* RadarOutput_Target::mutable_beamsid() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.Target.beamsId)
  return beamsid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RadarOutput_Target::release_beamsid() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarOutput.Target.beamsId)
  
  return beamsid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RadarOutput_Target::set_allocated_beamsid(std::string* beamsid) {
  if (beamsid != nullptr) {
    
  } else {
    
  }
  beamsid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), beamsid);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RadarOutput.Target.beamsId)
}

// .Cognata.SDK.RadarOutput.Target.GeometricTarget geometricTarget = 50;
inline bool RadarOutput_Target::has_geometrictarget() const {
  return TargetType_case() == kGeometricTarget;
}
inline void RadarOutput_Target::set_has_geometrictarget() {
  _oneof_case_[0] = kGeometricTarget;
}
inline void RadarOutput_Target::clear_geometrictarget() {
  if (has_geometrictarget()) {
    delete TargetType_.geometrictarget_;
    clear_has_TargetType();
  }
}
inline ::Cognata::SDK::RadarOutput_Target_GeometricTarget* RadarOutput_Target::release_geometrictarget() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarOutput.Target.geometricTarget)
  if (has_geometrictarget()) {
    clear_has_TargetType();
      ::Cognata::SDK::RadarOutput_Target_GeometricTarget* temp = TargetType_.geometrictarget_;
    TargetType_.geometrictarget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RadarOutput_Target_GeometricTarget& RadarOutput_Target::geometrictarget() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.geometricTarget)
  return has_geometrictarget()
      ? *TargetType_.geometrictarget_
      : *reinterpret_cast< ::Cognata::SDK::RadarOutput_Target_GeometricTarget*>(&::Cognata::SDK::_RadarOutput_Target_GeometricTarget_default_instance_);
}
inline ::Cognata::SDK::RadarOutput_Target_GeometricTarget* RadarOutput_Target::mutable_geometrictarget() {
  if (!has_geometrictarget()) {
    clear_TargetType();
    set_has_geometrictarget();
    TargetType_.geometrictarget_ = CreateMaybeMessage< ::Cognata::SDK::RadarOutput_Target_GeometricTarget >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.Target.geometricTarget)
  return TargetType_.geometrictarget_;
}

// .Cognata.SDK.RadarOutput.Target.RadarTarget radarTarget = 51;
inline bool RadarOutput_Target::has_radartarget() const {
  return TargetType_case() == kRadarTarget;
}
inline void RadarOutput_Target::set_has_radartarget() {
  _oneof_case_[0] = kRadarTarget;
}
inline void RadarOutput_Target::clear_radartarget() {
  if (has_radartarget()) {
    delete TargetType_.radartarget_;
    clear_has_TargetType();
  }
}
inline ::Cognata::SDK::RadarOutput_Target_RadarTarget* RadarOutput_Target::release_radartarget() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarOutput.Target.radarTarget)
  if (has_radartarget()) {
    clear_has_TargetType();
      ::Cognata::SDK::RadarOutput_Target_RadarTarget* temp = TargetType_.radartarget_;
    TargetType_.radartarget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::RadarOutput_Target_RadarTarget& RadarOutput_Target::radartarget() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Target.radarTarget)
  return has_radartarget()
      ? *TargetType_.radartarget_
      : *reinterpret_cast< ::Cognata::SDK::RadarOutput_Target_RadarTarget*>(&::Cognata::SDK::_RadarOutput_Target_RadarTarget_default_instance_);
}
inline ::Cognata::SDK::RadarOutput_Target_RadarTarget* RadarOutput_Target::mutable_radartarget() {
  if (!has_radartarget()) {
    clear_TargetType();
    set_has_radartarget();
    TargetType_.radartarget_ = CreateMaybeMessage< ::Cognata::SDK::RadarOutput_Target_RadarTarget >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.Target.radarTarget)
  return TargetType_.radartarget_;
}

inline bool RadarOutput_Target::has_TargetType() const {
  return TargetType_case() != TARGETTYPE_NOT_SET;
}
inline void RadarOutput_Target::clear_has_TargetType() {
  _oneof_case_[0] = TARGETTYPE_NOT_SET;
}
inline RadarOutput_Target::TargetTypeCase RadarOutput_Target::TargetType_case() const {
  return RadarOutput_Target::TargetTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RadarOutput

// .Cognata.SDK.RadarOutput.Header header = 1;
inline bool RadarOutput::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void RadarOutput::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Cognata::SDK::RadarOutput_Header& RadarOutput::header() const {
  const ::Cognata::SDK::RadarOutput_Header* p = header_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::RadarOutput_Header*>(
      &::Cognata::SDK::_RadarOutput_Header_default_instance_);
}
inline ::Cognata::SDK::RadarOutput_Header* RadarOutput::release_header() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarOutput.header)
  
  ::Cognata::SDK::RadarOutput_Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::RadarOutput_Header* RadarOutput::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::RadarOutput_Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.header)
  return header_;
}
inline void RadarOutput::set_allocated_header(::Cognata::SDK::RadarOutput_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RadarOutput.header)
}

// repeated .Cognata.SDK.RadarOutput.Target Targets = 2;
inline int RadarOutput::targets_size() const {
  return targets_.size();
}
inline void RadarOutput::clear_targets() {
  targets_.Clear();
}
inline ::Cognata::SDK::RadarOutput_Target* RadarOutput::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarOutput.Targets)
  return targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::RadarOutput_Target >*
RadarOutput::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.RadarOutput.Targets)
  return &targets_;
}
inline const ::Cognata::SDK::RadarOutput_Target& RadarOutput::targets(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarOutput.Targets)
  return targets_.Get(index);
}
inline ::Cognata::SDK::RadarOutput_Target* RadarOutput::add_targets() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.RadarOutput.Targets)
  return targets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::RadarOutput_Target >&
RadarOutput::targets() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.RadarOutput.Targets)
  return targets_;
}

// -------------------------------------------------------------------

// ThermalCameraOutput

// uint32 width = 1;
inline void ThermalCameraOutput::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThermalCameraOutput::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ThermalCameraOutput.width)
  return width_;
}
inline void ThermalCameraOutput::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.ThermalCameraOutput.width)
}

// uint32 height = 2;
inline void ThermalCameraOutput::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThermalCameraOutput::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ThermalCameraOutput.height)
  return height_;
}
inline void ThermalCameraOutput::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.ThermalCameraOutput.height)
}

// bytes pixels = 3;
inline void ThermalCameraOutput::clear_pixels() {
  pixels_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ThermalCameraOutput::pixels() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ThermalCameraOutput.pixels)
  return pixels_.GetNoArena();
}
inline void ThermalCameraOutput::set_pixels(const std::string& value) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.ThermalCameraOutput.pixels)
}
inline void ThermalCameraOutput::set_pixels(std::string&& value) {
  
  pixels_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.ThermalCameraOutput.pixels)
}
inline void ThermalCameraOutput::set_pixels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.ThermalCameraOutput.pixels)
}
inline void ThermalCameraOutput::set_pixels(const void* value, size_t size) {
  
  pixels_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.ThermalCameraOutput.pixels)
}
inline std::string* ThermalCameraOutput::mutable_pixels() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ThermalCameraOutput.pixels)
  return pixels_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThermalCameraOutput::release_pixels() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ThermalCameraOutput.pixels)
  
  return pixels_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThermalCameraOutput::set_allocated_pixels(std::string* pixels) {
  if (pixels != nullptr) {
    
  } else {
    
  }
  pixels_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pixels);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ThermalCameraOutput.pixels)
}

// -------------------------------------------------------------------

// RadarPlacement

// .Cognata.SDK.SDKVector3 location = 1;
inline bool RadarPlacement::has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& RadarPlacement::location() const {
  const ::Cognata::SDK::SDKVector3* p = location_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarPlacement.location)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* RadarPlacement::release_location() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarPlacement.location)
  
  ::Cognata::SDK::SDKVector3* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* RadarPlacement::mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarPlacement.location)
  return location_;
}
inline void RadarPlacement::set_allocated_location(::Cognata::SDK::SDKVector3* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RadarPlacement.location)
}

// .Cognata.SDK.SDKVector3 orientation = 2;
inline bool RadarPlacement::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& RadarPlacement::orientation() const {
  const ::Cognata::SDK::SDKVector3* p = orientation_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.RadarPlacement.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* RadarPlacement::release_orientation() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.RadarPlacement.orientation)
  
  ::Cognata::SDK::SDKVector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* RadarPlacement::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.RadarPlacement.orientation)
  return orientation_;
}
inline void RadarPlacement::set_allocated_orientation(::Cognata::SDK::SDKVector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.RadarPlacement.orientation)
}

// -------------------------------------------------------------------

// WakeupOutput

// -------------------------------------------------------------------

// EngineVersionReport

// string version = 1;
inline void EngineVersionReport::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EngineVersionReport::version() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.EngineVersionReport.version)
  return version_.GetNoArena();
}
inline void EngineVersionReport::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.EngineVersionReport.version)
}
inline void EngineVersionReport::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.EngineVersionReport.version)
}
inline void EngineVersionReport::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.EngineVersionReport.version)
}
inline void EngineVersionReport::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.EngineVersionReport.version)
}
inline std::string* EngineVersionReport::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.EngineVersionReport.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EngineVersionReport::release_version() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.EngineVersionReport.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EngineVersionReport::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.EngineVersionReport.version)
}

// -------------------------------------------------------------------

// EndOfSimulation

// string reason = 1;
inline void EndOfSimulation::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EndOfSimulation::reason() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.EndOfSimulation.reason)
  return reason_.GetNoArena();
}
inline void EndOfSimulation::set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.EndOfSimulation.reason)
}
inline void EndOfSimulation::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.EndOfSimulation.reason)
}
inline void EndOfSimulation::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.EndOfSimulation.reason)
}
inline void EndOfSimulation::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.EndOfSimulation.reason)
}
inline std::string* EndOfSimulation::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.EndOfSimulation.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndOfSimulation::release_reason() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.EndOfSimulation.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndOfSimulation::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.EndOfSimulation.reason)
}

// -------------------------------------------------------------------

// E2COutput

// string param = 1;
inline void E2COutput::clear_param() {
  param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& E2COutput::param() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.E2COutput.param)
  return param_.GetNoArena();
}
inline void E2COutput::set_param(const std::string& value) {
  
  param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.E2COutput.param)
}
inline void E2COutput::set_param(std::string&& value) {
  
  param_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.E2COutput.param)
}
inline void E2COutput::set_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.E2COutput.param)
}
inline void E2COutput::set_param(const char* value, size_t size) {
  
  param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.E2COutput.param)
}
inline std::string* E2COutput::mutable_param() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.E2COutput.param)
  return param_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* E2COutput::release_param() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.E2COutput.param)
  
  return param_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void E2COutput::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    
  } else {
    
  }
  param_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.E2COutput.param)
}

// string value = 2;
inline void E2COutput::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& E2COutput::value() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.E2COutput.value)
  return value_.GetNoArena();
}
inline void E2COutput::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.E2COutput.value)
}
inline void E2COutput::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.E2COutput.value)
}
inline void E2COutput::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.E2COutput.value)
}
inline void E2COutput::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.E2COutput.value)
}
inline std::string* E2COutput::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.E2COutput.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* E2COutput::release_value() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.E2COutput.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void E2COutput::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.E2COutput.value)
}

// -------------------------------------------------------------------

// LaneDetectorOutput

// repeated .Cognata.SDK.SDKVector3 frontCoordsBuff = 1;
inline int LaneDetectorOutput::frontcoordsbuff_size() const {
  return frontcoordsbuff_.size();
}
inline ::Cognata::SDK::SDKVector3* LaneDetectorOutput::mutable_frontcoordsbuff(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.LaneDetectorOutput.frontCoordsBuff)
  return frontcoordsbuff_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector3 >*
LaneDetectorOutput::mutable_frontcoordsbuff() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.LaneDetectorOutput.frontCoordsBuff)
  return &frontcoordsbuff_;
}
inline const ::Cognata::SDK::SDKVector3& LaneDetectorOutput::frontcoordsbuff(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LaneDetectorOutput.frontCoordsBuff)
  return frontcoordsbuff_.Get(index);
}
inline ::Cognata::SDK::SDKVector3* LaneDetectorOutput::add_frontcoordsbuff() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.LaneDetectorOutput.frontCoordsBuff)
  return frontcoordsbuff_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector3 >&
LaneDetectorOutput::frontcoordsbuff() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.LaneDetectorOutput.frontCoordsBuff)
  return frontcoordsbuff_;
}

// repeated .Cognata.SDK.SDKVector3 backCoordsBuff = 2;
inline int LaneDetectorOutput::backcoordsbuff_size() const {
  return backcoordsbuff_.size();
}
inline ::Cognata::SDK::SDKVector3* LaneDetectorOutput::mutable_backcoordsbuff(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.LaneDetectorOutput.backCoordsBuff)
  return backcoordsbuff_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector3 >*
LaneDetectorOutput::mutable_backcoordsbuff() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.LaneDetectorOutput.backCoordsBuff)
  return &backcoordsbuff_;
}
inline const ::Cognata::SDK::SDKVector3& LaneDetectorOutput::backcoordsbuff(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LaneDetectorOutput.backCoordsBuff)
  return backcoordsbuff_.Get(index);
}
inline ::Cognata::SDK::SDKVector3* LaneDetectorOutput::add_backcoordsbuff() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.LaneDetectorOutput.backCoordsBuff)
  return backcoordsbuff_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::SDKVector3 >&
LaneDetectorOutput::backcoordsbuff() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.LaneDetectorOutput.backCoordsBuff)
  return backcoordsbuff_;
}

// uint32 numOfLanes = 3;
inline void LaneDetectorOutput::clear_numoflanes() {
  numoflanes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneDetectorOutput::numoflanes() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LaneDetectorOutput.numOfLanes)
  return numoflanes_;
}
inline void LaneDetectorOutput::set_numoflanes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numoflanes_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LaneDetectorOutput.numOfLanes)
}

// -------------------------------------------------------------------

// WheelTelemetriesOutput

// float angularVelocity = 1;
inline void WheelTelemetriesOutput::clear_angularvelocity() {
  angularvelocity_ = 0;
}
inline float WheelTelemetriesOutput::angularvelocity() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.angularVelocity)
  return angularvelocity_;
}
inline void WheelTelemetriesOutput::set_angularvelocity(float value) {
  
  angularvelocity_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.angularVelocity)
}

// float steerAngle = 2;
inline void WheelTelemetriesOutput::clear_steerangle() {
  steerangle_ = 0;
}
inline float WheelTelemetriesOutput::steerangle() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.steerAngle)
  return steerangle_;
}
inline void WheelTelemetriesOutput::set_steerangle(float value) {
  
  steerangle_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.steerAngle)
}

// float driveTorque = 3;
inline void WheelTelemetriesOutput::clear_drivetorque() {
  drivetorque_ = 0;
}
inline float WheelTelemetriesOutput::drivetorque() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.driveTorque)
  return drivetorque_;
}
inline void WheelTelemetriesOutput::set_drivetorque(float value) {
  
  drivetorque_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.driveTorque)
}

// float brakeTorque = 4;
inline void WheelTelemetriesOutput::clear_braketorque() {
  braketorque_ = 0;
}
inline float WheelTelemetriesOutput::braketorque() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.brakeTorque)
  return braketorque_;
}
inline void WheelTelemetriesOutput::set_braketorque(float value) {
  
  braketorque_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.brakeTorque)
}

// float reactionTorque = 5;
inline void WheelTelemetriesOutput::clear_reactiontorque() {
  reactiontorque_ = 0;
}
inline float WheelTelemetriesOutput::reactiontorque() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.reactionTorque)
  return reactiontorque_;
}
inline void WheelTelemetriesOutput::set_reactiontorque(float value) {
  
  reactiontorque_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.reactionTorque)
}

// .Cognata.SDK.SDKVector2 tireForce = 6;
inline bool WheelTelemetriesOutput::has_tireforce() const {
  return this != internal_default_instance() && tireforce_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector2& WheelTelemetriesOutput::tireforce() const {
  const ::Cognata::SDK::SDKVector2* p = tireforce_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.tireForce)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector2*>(
      &::Cognata::SDK::_SDKVector2_default_instance_);
}
inline ::Cognata::SDK::SDKVector2* WheelTelemetriesOutput::release_tireforce() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.WheelTelemetriesOutput.tireForce)
  
  ::Cognata::SDK::SDKVector2* temp = tireforce_;
  tireforce_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector2* WheelTelemetriesOutput::mutable_tireforce() {
  
  if (tireforce_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector2>(GetArenaNoVirtual());
    tireforce_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.WheelTelemetriesOutput.tireForce)
  return tireforce_;
}
inline void WheelTelemetriesOutput::set_allocated_tireforce(::Cognata::SDK::SDKVector2* tireforce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tireforce_);
  }
  if (tireforce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tireforce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tireforce, submessage_arena);
    }
    
  } else {
    
  }
  tireforce_ = tireforce;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.WheelTelemetriesOutput.tireForce)
}

// .Cognata.SDK.SDKVector2 tireSlip = 7;
inline bool WheelTelemetriesOutput::has_tireslip() const {
  return this != internal_default_instance() && tireslip_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector2& WheelTelemetriesOutput::tireslip() const {
  const ::Cognata::SDK::SDKVector2* p = tireslip_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.tireSlip)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector2*>(
      &::Cognata::SDK::_SDKVector2_default_instance_);
}
inline ::Cognata::SDK::SDKVector2* WheelTelemetriesOutput::release_tireslip() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.WheelTelemetriesOutput.tireSlip)
  
  ::Cognata::SDK::SDKVector2* temp = tireslip_;
  tireslip_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector2* WheelTelemetriesOutput::mutable_tireslip() {
  
  if (tireslip_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector2>(GetArenaNoVirtual());
    tireslip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.WheelTelemetriesOutput.tireSlip)
  return tireslip_;
}
inline void WheelTelemetriesOutput::set_allocated_tireslip(::Cognata::SDK::SDKVector2* tireslip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tireslip_);
  }
  if (tireslip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tireslip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tireslip, submessage_arena);
    }
    
  } else {
    
  }
  tireslip_ = tireslip;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.WheelTelemetriesOutput.tireSlip)
}

// bool canSlip = 8;
inline void WheelTelemetriesOutput::clear_canslip() {
  canslip_ = false;
}
inline bool WheelTelemetriesOutput::canslip() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.canSlip)
  return canslip_;
}
inline void WheelTelemetriesOutput::set_canslip(bool value) {
  
  canslip_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.canSlip)
}

// float combinedTireSlip = 9;
inline void WheelTelemetriesOutput::clear_combinedtireslip() {
  combinedtireslip_ = 0;
}
inline float WheelTelemetriesOutput::combinedtireslip() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.combinedTireSlip)
  return combinedtireslip_;
}
inline void WheelTelemetriesOutput::set_combinedtireslip(float value) {
  
  combinedtireslip_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.combinedTireSlip)
}

// float suspensionCompression = 10;
inline void WheelTelemetriesOutput::clear_suspensioncompression() {
  suspensioncompression_ = 0;
}
inline float WheelTelemetriesOutput::suspensioncompression() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.suspensionCompression)
  return suspensioncompression_;
}
inline void WheelTelemetriesOutput::set_suspensioncompression(float value) {
  
  suspensioncompression_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.suspensionCompression)
}

// float downforce = 11;
inline void WheelTelemetriesOutput::clear_downforce() {
  downforce_ = 0;
}
inline float WheelTelemetriesOutput::downforce() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.downforce)
  return downforce_;
}
inline void WheelTelemetriesOutput::set_downforce(float value) {
  
  downforce_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.downforce)
}

// float contactAngle = 12;
inline void WheelTelemetriesOutput::clear_contactangle() {
  contactangle_ = 0;
}
inline float WheelTelemetriesOutput::contactangle() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.contactAngle)
  return contactangle_;
}
inline void WheelTelemetriesOutput::set_contactangle(float value) {
  
  contactangle_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.contactAngle)
}

// float contactDepth = 13;
inline void WheelTelemetriesOutput::clear_contactdepth() {
  contactdepth_ = 0;
}
inline float WheelTelemetriesOutput::contactdepth() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.contactDepth)
  return contactdepth_;
}
inline void WheelTelemetriesOutput::set_contactdepth(float value) {
  
  contactdepth_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.contactDepth)
}

// float contactSpeed = 14;
inline void WheelTelemetriesOutput::clear_contactspeed() {
  contactspeed_ = 0;
}
inline float WheelTelemetriesOutput::contactspeed() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.contactSpeed)
  return contactspeed_;
}
inline void WheelTelemetriesOutput::set_contactspeed(float value) {
  
  contactspeed_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.contactSpeed)
}

// bool grounded = 15;
inline void WheelTelemetriesOutput::clear_grounded() {
  grounded_ = false;
}
inline bool WheelTelemetriesOutput::grounded() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.grounded)
  return grounded_;
}
inline void WheelTelemetriesOutput::set_grounded(bool value) {
  
  grounded_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.grounded)
}

// .Cognata.SDK.SDKVector3 wheelVelocity = 16;
inline bool WheelTelemetriesOutput::has_wheelvelocity() const {
  return this != internal_default_instance() && wheelvelocity_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& WheelTelemetriesOutput::wheelvelocity() const {
  const ::Cognata::SDK::SDKVector3* p = wheelvelocity_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.wheelVelocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* WheelTelemetriesOutput::release_wheelvelocity() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.WheelTelemetriesOutput.wheelVelocity)
  
  ::Cognata::SDK::SDKVector3* temp = wheelvelocity_;
  wheelvelocity_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* WheelTelemetriesOutput::mutable_wheelvelocity() {
  
  if (wheelvelocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    wheelvelocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.WheelTelemetriesOutput.wheelVelocity)
  return wheelvelocity_;
}
inline void WheelTelemetriesOutput::set_allocated_wheelvelocity(::Cognata::SDK::SDKVector3* wheelvelocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wheelvelocity_);
  }
  if (wheelvelocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wheelvelocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheelvelocity, submessage_arena);
    }
    
  } else {
    
  }
  wheelvelocity_ = wheelvelocity;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.WheelTelemetriesOutput.wheelVelocity)
}

// float suspensionLoad = 17;
inline void WheelTelemetriesOutput::clear_suspensionload() {
  suspensionload_ = 0;
}
inline float WheelTelemetriesOutput::suspensionload() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.suspensionLoad)
  return suspensionload_;
}
inline void WheelTelemetriesOutput::set_suspensionload(float value) {
  
  suspensionload_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.WheelTelemetriesOutput.suspensionLoad)
}

// .Cognata.SDK.GroundMaterial groundMaterial = 18;
inline bool WheelTelemetriesOutput::has_groundmaterial() const {
  return this != internal_default_instance() && groundmaterial_ != nullptr;
}
inline void WheelTelemetriesOutput::clear_groundmaterial() {
  if (GetArenaNoVirtual() == nullptr && groundmaterial_ != nullptr) {
    delete groundmaterial_;
  }
  groundmaterial_ = nullptr;
}
inline const ::Cognata::SDK::GroundMaterial& WheelTelemetriesOutput::groundmaterial() const {
  const ::Cognata::SDK::GroundMaterial* p = groundmaterial_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.WheelTelemetriesOutput.groundMaterial)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::GroundMaterial*>(
      &::Cognata::SDK::_GroundMaterial_default_instance_);
}
inline ::Cognata::SDK::GroundMaterial* WheelTelemetriesOutput::release_groundmaterial() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.WheelTelemetriesOutput.groundMaterial)
  
  ::Cognata::SDK::GroundMaterial* temp = groundmaterial_;
  groundmaterial_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::GroundMaterial* WheelTelemetriesOutput::mutable_groundmaterial() {
  
  if (groundmaterial_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::GroundMaterial>(GetArenaNoVirtual());
    groundmaterial_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.WheelTelemetriesOutput.groundMaterial)
  return groundmaterial_;
}
inline void WheelTelemetriesOutput::set_allocated_groundmaterial(::Cognata::SDK::GroundMaterial* groundmaterial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete groundmaterial_;
  }
  if (groundmaterial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      groundmaterial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groundmaterial, submessage_arena);
    }
    
  } else {
    
  }
  groundmaterial_ = groundmaterial;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.WheelTelemetriesOutput.groundMaterial)
}

// -------------------------------------------------------------------

// GroundMaterial

// .Cognata.SDK.GroundMaterial.SurfaceType sufraceType = 1;
inline void GroundMaterial::clear_sufracetype() {
  sufracetype_ = 0;
}
inline ::Cognata::SDK::GroundMaterial_SurfaceType GroundMaterial::sufracetype() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GroundMaterial.sufraceType)
  return static_cast< ::Cognata::SDK::GroundMaterial_SurfaceType >(sufracetype_);
}
inline void GroundMaterial::set_sufracetype(::Cognata::SDK::GroundMaterial_SurfaceType value) {
  
  sufracetype_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GroundMaterial.sufraceType)
}

// float grip = 2;
inline void GroundMaterial::clear_grip() {
  grip_ = 0;
}
inline float GroundMaterial::grip() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GroundMaterial.grip)
  return grip_;
}
inline void GroundMaterial::set_grip(float value) {
  
  grip_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GroundMaterial.grip)
}

// float drag = 3;
inline void GroundMaterial::clear_drag() {
  drag_ = 0;
}
inline float GroundMaterial::drag() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.GroundMaterial.drag)
  return drag_;
}
inline void GroundMaterial::set_drag(float value) {
  
  drag_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.GroundMaterial.drag)
}

// -------------------------------------------------------------------

// CarTelemetriesOutput

// .Cognata.SDK.CarConfiguration.SignalState turnLight = 1;
inline void CarTelemetriesOutput::clear_turnlight() {
  turnlight_ = 0;
}
inline ::Cognata::SDK::CarConfiguration_SignalState CarTelemetriesOutput::turnlight() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.turnLight)
  return static_cast< ::Cognata::SDK::CarConfiguration_SignalState >(turnlight_);
}
inline void CarTelemetriesOutput::set_turnlight(::Cognata::SDK::CarConfiguration_SignalState value) {
  
  turnlight_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.turnLight)
}

// float acceleration = 2;
inline void CarTelemetriesOutput::clear_acceleration() {
  acceleration_ = 0;
}
inline float CarTelemetriesOutput::acceleration() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.acceleration)
  return acceleration_;
}
inline void CarTelemetriesOutput::set_acceleration(float value) {
  
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.acceleration)
}

// float brake = 3;
inline void CarTelemetriesOutput::clear_brake() {
  brake_ = 0;
}
inline float CarTelemetriesOutput::brake() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.brake)
  return brake_;
}
inline void CarTelemetriesOutput::set_brake(float value) {
  
  brake_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.brake)
}

// float gas = 4;
inline void CarTelemetriesOutput::clear_gas() {
  gas_ = 0;
}
inline float CarTelemetriesOutput::gas() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.gas)
  return gas_;
}
inline void CarTelemetriesOutput::set_gas(float value) {
  
  gas_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.gas)
}

// float steering = 5;
inline void CarTelemetriesOutput::clear_steering() {
  steering_ = 0;
}
inline float CarTelemetriesOutput::steering() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.steering)
  return steering_;
}
inline void CarTelemetriesOutput::set_steering(float value) {
  
  steering_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.steering)
}

// .Cognata.SDK.SDKVector3 centerOfMassLocalPosition = 6;
inline bool CarTelemetriesOutput::has_centerofmasslocalposition() const {
  return this != internal_default_instance() && centerofmasslocalposition_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& CarTelemetriesOutput::centerofmasslocalposition() const {
  const ::Cognata::SDK::SDKVector3* p = centerofmasslocalposition_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.centerOfMassLocalPosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* CarTelemetriesOutput::release_centerofmasslocalposition() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarTelemetriesOutput.centerOfMassLocalPosition)
  
  ::Cognata::SDK::SDKVector3* temp = centerofmasslocalposition_;
  centerofmasslocalposition_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* CarTelemetriesOutput::mutable_centerofmasslocalposition() {
  
  if (centerofmasslocalposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    centerofmasslocalposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarTelemetriesOutput.centerOfMassLocalPosition)
  return centerofmasslocalposition_;
}
inline void CarTelemetriesOutput::set_allocated_centerofmasslocalposition(::Cognata::SDK::SDKVector3* centerofmasslocalposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(centerofmasslocalposition_);
  }
  if (centerofmasslocalposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      centerofmasslocalposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centerofmasslocalposition, submessage_arena);
    }
    
  } else {
    
  }
  centerofmasslocalposition_ = centerofmasslocalposition;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarTelemetriesOutput.centerOfMassLocalPosition)
}

// .Cognata.SDK.SDKVector3 centerOfMassLocalRotation = 7;
inline bool CarTelemetriesOutput::has_centerofmasslocalrotation() const {
  return this != internal_default_instance() && centerofmasslocalrotation_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& CarTelemetriesOutput::centerofmasslocalrotation() const {
  const ::Cognata::SDK::SDKVector3* p = centerofmasslocalrotation_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.centerOfMassLocalRotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* CarTelemetriesOutput::release_centerofmasslocalrotation() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.CarTelemetriesOutput.centerOfMassLocalRotation)
  
  ::Cognata::SDK::SDKVector3* temp = centerofmasslocalrotation_;
  centerofmasslocalrotation_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* CarTelemetriesOutput::mutable_centerofmasslocalrotation() {
  
  if (centerofmasslocalrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    centerofmasslocalrotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarTelemetriesOutput.centerOfMassLocalRotation)
  return centerofmasslocalrotation_;
}
inline void CarTelemetriesOutput::set_allocated_centerofmasslocalrotation(::Cognata::SDK::SDKVector3* centerofmasslocalrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(centerofmasslocalrotation_);
  }
  if (centerofmasslocalrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      centerofmasslocalrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centerofmasslocalrotation, submessage_arena);
    }
    
  } else {
    
  }
  centerofmasslocalrotation_ = centerofmasslocalrotation;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.CarTelemetriesOutput.centerOfMassLocalRotation)
}

// float engineRpm = 8;
inline void CarTelemetriesOutput::clear_enginerpm() {
  enginerpm_ = 0;
}
inline float CarTelemetriesOutput::enginerpm() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.engineRpm)
  return enginerpm_;
}
inline void CarTelemetriesOutput::set_enginerpm(float value) {
  
  enginerpm_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.engineRpm)
}

// float engineLoad = 9;
inline void CarTelemetriesOutput::clear_engineload() {
  engineload_ = 0;
}
inline float CarTelemetriesOutput::engineload() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.engineLoad)
  return engineload_;
}
inline void CarTelemetriesOutput::set_engineload(float value) {
  
  engineload_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.engineLoad)
}

// float engineTorque = 10;
inline void CarTelemetriesOutput::clear_enginetorque() {
  enginetorque_ = 0;
}
inline float CarTelemetriesOutput::enginetorque() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.engineTorque)
  return enginetorque_;
}
inline void CarTelemetriesOutput::set_enginetorque(float value) {
  
  enginetorque_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.engineTorque)
}

// float enginePower = 11;
inline void CarTelemetriesOutput::clear_enginepower() {
  enginepower_ = 0;
}
inline float CarTelemetriesOutput::enginepower() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.enginePower)
  return enginepower_;
}
inline void CarTelemetriesOutput::set_enginepower(float value) {
  
  enginepower_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.enginePower)
}

// int32 currentGear = 12;
inline void CarTelemetriesOutput::clear_currentgear() {
  currentgear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarTelemetriesOutput::currentgear() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.currentGear)
  return currentgear_;
}
inline void CarTelemetriesOutput::set_currentgear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentgear_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.currentGear)
}

// repeated .Cognata.SDK.WheelTelemetriesOutput wheels = 13;
inline int CarTelemetriesOutput::wheels_size() const {
  return wheels_.size();
}
inline void CarTelemetriesOutput::clear_wheels() {
  wheels_.Clear();
}
inline ::Cognata::SDK::WheelTelemetriesOutput* CarTelemetriesOutput::mutable_wheels(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.CarTelemetriesOutput.wheels)
  return wheels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::WheelTelemetriesOutput >*
CarTelemetriesOutput::mutable_wheels() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.CarTelemetriesOutput.wheels)
  return &wheels_;
}
inline const ::Cognata::SDK::WheelTelemetriesOutput& CarTelemetriesOutput::wheels(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.wheels)
  return wheels_.Get(index);
}
inline ::Cognata::SDK::WheelTelemetriesOutput* CarTelemetriesOutput::add_wheels() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.CarTelemetriesOutput.wheels)
  return wheels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::WheelTelemetriesOutput >&
CarTelemetriesOutput::wheels() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.CarTelemetriesOutput.wheels)
  return wheels_;
}

// .Cognata.SDK.DrivingControllerType currentCarController = 14;
inline void CarTelemetriesOutput::clear_currentcarcontroller() {
  currentcarcontroller_ = 0;
}
inline ::Cognata::SDK::DrivingControllerType CarTelemetriesOutput::currentcarcontroller() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.currentCarController)
  return static_cast< ::Cognata::SDK::DrivingControllerType >(currentcarcontroller_);
}
inline void CarTelemetriesOutput::set_currentcarcontroller(::Cognata::SDK::DrivingControllerType value) {
  
  currentcarcontroller_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.currentCarController)
}

// float clutchLockRatio = 15;
inline void CarTelemetriesOutput::clear_clutchlockratio() {
  clutchlockratio_ = 0;
}
inline float CarTelemetriesOutput::clutchlockratio() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.clutchLockRatio)
  return clutchlockratio_;
}
inline void CarTelemetriesOutput::set_clutchlockratio(float value) {
  
  clutchlockratio_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.clutchLockRatio)
}

// float clutchTorque = 16;
inline void CarTelemetriesOutput::clear_clutchtorque() {
  clutchtorque_ = 0;
}
inline float CarTelemetriesOutput::clutchtorque() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.clutchTorque)
  return clutchtorque_;
}
inline void CarTelemetriesOutput::set_clutchtorque(float value) {
  
  clutchtorque_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.clutchTorque)
}

// float engineFuelRate = 17;
inline void CarTelemetriesOutput::clear_enginefuelrate() {
  enginefuelrate_ = 0;
}
inline float CarTelemetriesOutput::enginefuelrate() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.engineFuelRate)
  return enginefuelrate_;
}
inline void CarTelemetriesOutput::set_enginefuelrate(float value) {
  
  enginefuelrate_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.engineFuelRate)
}

// .Cognata.SDK.CarConfiguration.GearState gearboxMode = 18;
inline void CarTelemetriesOutput::clear_gearboxmode() {
  gearboxmode_ = 0;
}
inline ::Cognata::SDK::CarConfiguration_GearState CarTelemetriesOutput::gearboxmode() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.gearboxMode)
  return static_cast< ::Cognata::SDK::CarConfiguration_GearState >(gearboxmode_);
}
inline void CarTelemetriesOutput::set_gearboxmode(::Cognata::SDK::CarConfiguration_GearState value) {
  
  gearboxmode_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.gearboxMode)
}

// bool isGearShifting = 19;
inline void CarTelemetriesOutput::clear_isgearshifting() {
  isgearshifting_ = false;
}
inline bool CarTelemetriesOutput::isgearshifting() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.isGearShifting)
  return isgearshifting_;
}
inline void CarTelemetriesOutput::set_isgearshifting(bool value) {
  
  isgearshifting_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.isGearShifting)
}

// float retarderTorque = 20;
inline void CarTelemetriesOutput::clear_retardertorque() {
  retardertorque_ = 0;
}
inline float CarTelemetriesOutput::retardertorque() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.retarderTorque)
  return retardertorque_;
}
inline void CarTelemetriesOutput::set_retardertorque(float value) {
  
  retardertorque_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.retarderTorque)
}

// float transmissionRpm = 21;
inline void CarTelemetriesOutput::clear_transmissionrpm() {
  transmissionrpm_ = 0;
}
inline float CarTelemetriesOutput::transmissionrpm() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.transmissionRpm)
  return transmissionrpm_;
}
inline void CarTelemetriesOutput::set_transmissionrpm(float value) {
  
  transmissionrpm_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.transmissionRpm)
}

// bool isEngineOnButStalled = 22;
inline void CarTelemetriesOutput::clear_isengineonbutstalled() {
  isengineonbutstalled_ = false;
}
inline bool CarTelemetriesOutput::isengineonbutstalled() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.isEngineOnButStalled)
  return isengineonbutstalled_;
}
inline void CarTelemetriesOutput::set_isengineonbutstalled(bool value) {
  
  isengineonbutstalled_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.isEngineOnButStalled)
}

// bool isEngineWorking = 23;
inline void CarTelemetriesOutput::clear_isengineworking() {
  isengineworking_ = false;
}
inline bool CarTelemetriesOutput::isengineworking() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.isEngineWorking)
  return isengineworking_;
}
inline void CarTelemetriesOutput::set_isengineworking(bool value) {
  
  isengineworking_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.isEngineWorking)
}

// bool isEngineStarting = 24;
inline void CarTelemetriesOutput::clear_isenginestarting() {
  isenginestarting_ = false;
}
inline bool CarTelemetriesOutput::isenginestarting() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.isEngineStarting)
  return isenginestarting_;
}
inline void CarTelemetriesOutput::set_isenginestarting(bool value) {
  
  isenginestarting_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.isEngineStarting)
}

// bool isEngineLimitReached = 25;
inline void CarTelemetriesOutput::clear_isenginelimitreached() {
  isenginelimitreached_ = false;
}
inline bool CarTelemetriesOutput::isenginelimitreached() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.CarTelemetriesOutput.isEngineLimitReached)
  return isenginelimitreached_;
}
inline void CarTelemetriesOutput::set_isenginelimitreached(bool value) {
  
  isenginelimitreached_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.CarTelemetriesOutput.isEngineLimitReached)
}

// -------------------------------------------------------------------

// DynamicObjectGroundTruthOutput

// repeated .Cognata.SDK.ObjectDescription objects = 1;
inline int DynamicObjectGroundTruthOutput::objects_size() const {
  return objects_.size();
}
inline ::Cognata::SDK::ObjectDescription* DynamicObjectGroundTruthOutput::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.DynamicObjectGroundTruthOutput.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::ObjectDescription >*
DynamicObjectGroundTruthOutput::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.DynamicObjectGroundTruthOutput.objects)
  return &objects_;
}
inline const ::Cognata::SDK::ObjectDescription& DynamicObjectGroundTruthOutput::objects(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DynamicObjectGroundTruthOutput.objects)
  return objects_.Get(index);
}
inline ::Cognata::SDK::ObjectDescription* DynamicObjectGroundTruthOutput::add_objects() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.DynamicObjectGroundTruthOutput.objects)
  return objects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::ObjectDescription >&
DynamicObjectGroundTruthOutput::objects() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.DynamicObjectGroundTruthOutput.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SDK
}  // namespace Cognata

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Cognata::SDK::LoadingStateReport_stateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::LoadingStateReport_stateType>() {
  return ::Cognata::SDK::LoadingStateReport_stateType_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::GroundMaterial_SurfaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::GroundMaterial_SurfaceType>() {
  return ::Cognata::SDK::GroundMaterial_SurfaceType_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::DrivingControllerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::DrivingControllerType>() {
  return ::Cognata::SDK::DrivingControllerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EngineToClientMessage_2eproto
