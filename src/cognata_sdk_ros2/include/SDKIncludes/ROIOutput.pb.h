// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ROIOutput.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ROIOutput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ROIOutput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vectors.pb.h"
#include "CarConfiguration.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ROIOutput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ROIOutput_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ROIOutput_2eproto;
namespace Cognata {
namespace SDK {
class Animal;
class AnimalDefaultTypeInternal;
extern AnimalDefaultTypeInternal _Animal_default_instance_;
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class GeneralObject;
class GeneralObjectDefaultTypeInternal;
extern GeneralObjectDefaultTypeInternal _GeneralObject_default_instance_;
class LaneMark;
class LaneMarkDefaultTypeInternal;
extern LaneMarkDefaultTypeInternal _LaneMark_default_instance_;
class Motion;
class MotionDefaultTypeInternal;
extern MotionDefaultTypeInternal _Motion_default_instance_;
class ObjectDescription;
class ObjectDescriptionDefaultTypeInternal;
extern ObjectDescriptionDefaultTypeInternal _ObjectDescription_default_instance_;
class ParkingSlot;
class ParkingSlotDefaultTypeInternal;
extern ParkingSlotDefaultTypeInternal _ParkingSlot_default_instance_;
class Pedestrian;
class PedestrianDefaultTypeInternal;
extern PedestrianDefaultTypeInternal _Pedestrian_default_instance_;
class ROIOutput;
class ROIOutputDefaultTypeInternal;
extern ROIOutputDefaultTypeInternal _ROIOutput_default_instance_;
class SDKBoundingBox;
class SDKBoundingBoxDefaultTypeInternal;
extern SDKBoundingBoxDefaultTypeInternal _SDKBoundingBox_default_instance_;
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficSign;
class TrafficSignDefaultTypeInternal;
extern TrafficSignDefaultTypeInternal _TrafficSign_default_instance_;
class Vehicle;
class VehicleDefaultTypeInternal;
extern VehicleDefaultTypeInternal _Vehicle_default_instance_;
class Vertices;
class VerticesDefaultTypeInternal;
extern VerticesDefaultTypeInternal _Vertices_default_instance_;
class Wheel;
class WheelDefaultTypeInternal;
extern WheelDefaultTypeInternal _Wheel_default_instance_;
}  // namespace SDK
}  // namespace Cognata
PROTOBUF_NAMESPACE_OPEN
template<> ::Cognata::SDK::Animal* Arena::CreateMaybeMessage<::Cognata::SDK::Animal>(Arena*);
template<> ::Cognata::SDK::Annotation* Arena::CreateMaybeMessage<::Cognata::SDK::Annotation>(Arena*);
template<> ::Cognata::SDK::GeneralObject* Arena::CreateMaybeMessage<::Cognata::SDK::GeneralObject>(Arena*);
template<> ::Cognata::SDK::LaneMark* Arena::CreateMaybeMessage<::Cognata::SDK::LaneMark>(Arena*);
template<> ::Cognata::SDK::Motion* Arena::CreateMaybeMessage<::Cognata::SDK::Motion>(Arena*);
template<> ::Cognata::SDK::ObjectDescription* Arena::CreateMaybeMessage<::Cognata::SDK::ObjectDescription>(Arena*);
template<> ::Cognata::SDK::ParkingSlot* Arena::CreateMaybeMessage<::Cognata::SDK::ParkingSlot>(Arena*);
template<> ::Cognata::SDK::Pedestrian* Arena::CreateMaybeMessage<::Cognata::SDK::Pedestrian>(Arena*);
template<> ::Cognata::SDK::ROIOutput* Arena::CreateMaybeMessage<::Cognata::SDK::ROIOutput>(Arena*);
template<> ::Cognata::SDK::SDKBoundingBox* Arena::CreateMaybeMessage<::Cognata::SDK::SDKBoundingBox>(Arena*);
template<> ::Cognata::SDK::TrafficLight* Arena::CreateMaybeMessage<::Cognata::SDK::TrafficLight>(Arena*);
template<> ::Cognata::SDK::TrafficSign* Arena::CreateMaybeMessage<::Cognata::SDK::TrafficSign>(Arena*);
template<> ::Cognata::SDK::Vehicle* Arena::CreateMaybeMessage<::Cognata::SDK::Vehicle>(Arena*);
template<> ::Cognata::SDK::Vertices* Arena::CreateMaybeMessage<::Cognata::SDK::Vertices>(Arena*);
template<> ::Cognata::SDK::Wheel* Arena::CreateMaybeMessage<::Cognata::SDK::Wheel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Cognata {
namespace SDK {

enum Vehicle_Type : int {
  Vehicle_Type_CAR = 0,
  Vehicle_Type_BICYCLE = 1,
  Vehicle_Type_MOTORCYCLE = 2,
  Vehicle_Type_Vehicle_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Vehicle_Type_Vehicle_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Vehicle_Type_IsValid(int value);
constexpr Vehicle_Type Vehicle_Type_Type_MIN = Vehicle_Type_CAR;
constexpr Vehicle_Type Vehicle_Type_Type_MAX = Vehicle_Type_MOTORCYCLE;
constexpr int Vehicle_Type_Type_ARRAYSIZE = Vehicle_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_Type_descriptor();
template<typename T>
inline const std::string& Vehicle_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle_Type_descriptor(), enum_t_value);
}
inline bool Vehicle_Type_Parse(
    const std::string& name, Vehicle_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle_Type>(
    Vehicle_Type_descriptor(), name, value);
}
enum Vehicle_Role : int {
  Vehicle_Role_NORMAL = 0,
  Vehicle_Role_POLICE = 1,
  Vehicle_Role_FIRETRUCK = 2,
  Vehicle_Role_AMBULANCE = 3,
  Vehicle_Role_Vehicle_Role_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Vehicle_Role_Vehicle_Role_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Vehicle_Role_IsValid(int value);
constexpr Vehicle_Role Vehicle_Role_Role_MIN = Vehicle_Role_NORMAL;
constexpr Vehicle_Role Vehicle_Role_Role_MAX = Vehicle_Role_AMBULANCE;
constexpr int Vehicle_Role_Role_ARRAYSIZE = Vehicle_Role_Role_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_Role_descriptor();
template<typename T>
inline const std::string& Vehicle_Role_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle_Role>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle_Role_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle_Role_descriptor(), enum_t_value);
}
inline bool Vehicle_Role_Parse(
    const std::string& name, Vehicle_Role* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle_Role>(
    Vehicle_Role_descriptor(), name, value);
}
enum TrafficLight_Status : int {
  TrafficLight_Status_OUTOFORDER = 0,
  TrafficLight_Status_STOPWARN = 1,
  TrafficLight_Status_Go = 2,
  TrafficLight_Status_WARN = 3,
  TrafficLight_Status_STOP = 4,
  TrafficLight_Status_FLASH = 5,
  TrafficLight_Status_TrafficLight_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrafficLight_Status_TrafficLight_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrafficLight_Status_IsValid(int value);
constexpr TrafficLight_Status TrafficLight_Status_Status_MIN = TrafficLight_Status_OUTOFORDER;
constexpr TrafficLight_Status TrafficLight_Status_Status_MAX = TrafficLight_Status_FLASH;
constexpr int TrafficLight_Status_Status_ARRAYSIZE = TrafficLight_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Status_descriptor();
template<typename T>
inline const std::string& TrafficLight_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficLight_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficLight_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficLight_Status_descriptor(), enum_t_value);
}
inline bool TrafficLight_Status_Parse(
    const std::string& name, TrafficLight_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficLight_Status>(
    TrafficLight_Status_descriptor(), name, value);
}
enum ParkingSlot_State : int {
  ParkingSlot_State_AVAILABLE = 0,
  ParkingSlot_State_OCCUPIED = 1,
  ParkingSlot_State_ParkingSlot_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParkingSlot_State_ParkingSlot_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParkingSlot_State_IsValid(int value);
constexpr ParkingSlot_State ParkingSlot_State_State_MIN = ParkingSlot_State_AVAILABLE;
constexpr ParkingSlot_State ParkingSlot_State_State_MAX = ParkingSlot_State_OCCUPIED;
constexpr int ParkingSlot_State_State_ARRAYSIZE = ParkingSlot_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlot_State_descriptor();
template<typename T>
inline const std::string& ParkingSlot_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParkingSlot_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParkingSlot_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParkingSlot_State_descriptor(), enum_t_value);
}
inline bool ParkingSlot_State_Parse(
    const std::string& name, ParkingSlot_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParkingSlot_State>(
    ParkingSlot_State_descriptor(), name, value);
}
// ===================================================================

class SDKBoundingBox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SDKBoundingBox) */ {
 public:
  SDKBoundingBox();
  virtual ~SDKBoundingBox();

  SDKBoundingBox(const SDKBoundingBox& from);
  SDKBoundingBox(SDKBoundingBox&& from) noexcept
    : SDKBoundingBox() {
    *this = ::std::move(from);
  }

  inline SDKBoundingBox& operator=(const SDKBoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKBoundingBox& operator=(SDKBoundingBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDKBoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDKBoundingBox* internal_default_instance() {
    return reinterpret_cast<const SDKBoundingBox*>(
               &_SDKBoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SDKBoundingBox* other);
  friend void swap(SDKBoundingBox& a, SDKBoundingBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDKBoundingBox* New() const final {
    return CreateMaybeMessage<SDKBoundingBox>(nullptr);
  }

  SDKBoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDKBoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDKBoundingBox& from);
  void MergeFrom(const SDKBoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKBoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SDKBoundingBox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.Transform3 transform = 1;
  bool has_transform() const;
  void clear_transform();
  static const int kTransformFieldNumber = 1;
  const ::Cognata::SDK::Transform3& transform() const;
  ::Cognata::SDK::Transform3* release_transform();
  ::Cognata::SDK::Transform3* mutable_transform();
  void set_allocated_transform(::Cognata::SDK::Transform3* transform);

  // float height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  float height() const;
  void set_height(float value);

  // float width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  float width() const;
  void set_width(float value);

  // float length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  float length() const;
  void set_length(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SDKBoundingBox)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::Transform3* transform_;
  float height_;
  float width_;
  float length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class Wheel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Wheel) */ {
 public:
  Wheel();
  virtual ~Wheel();

  Wheel(const Wheel& from);
  Wheel(Wheel&& from) noexcept
    : Wheel() {
    *this = ::std::move(from);
  }

  inline Wheel& operator=(const Wheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wheel& operator=(Wheel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wheel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wheel* internal_default_instance() {
    return reinterpret_cast<const Wheel*>(
               &_Wheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Wheel* other);
  friend void swap(Wheel& a, Wheel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Wheel* New() const final {
    return CreateMaybeMessage<Wheel>(nullptr);
  }

  Wheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wheel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wheel& from);
  void MergeFrom(const Wheel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wheel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Wheel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .Cognata.SDK.SDKVector3 relativePosition = 1;
  bool has_relativeposition() const;
  void clear_relativeposition();
  static const int kRelativePositionFieldNumber = 1;
  const ::Cognata::SDK::SDKVector3& relativeposition() const;
  ::Cognata::SDK::SDKVector3* release_relativeposition();
  ::Cognata::SDK::SDKVector3* mutable_relativeposition();
  void set_allocated_relativeposition(::Cognata::SDK::SDKVector3* relativeposition);

  // float steeringAngle = 2;
  void clear_steeringangle();
  static const int kSteeringAngleFieldNumber = 2;
  float steeringangle() const;
  void set_steeringangle(float value);

  // float rotateAngle = 3;
  void clear_rotateangle();
  static const int kRotateAngleFieldNumber = 3;
  float rotateangle() const;
  void set_rotateangle(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.Wheel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Cognata::SDK::SDKVector3* relativeposition_;
  float steeringangle_;
  float rotateangle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class Vehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Vehicle) */ {
 public:
  Vehicle();
  virtual ~Vehicle();

  Vehicle(const Vehicle& from);
  Vehicle(Vehicle&& from) noexcept
    : Vehicle() {
    *this = ::std::move(from);
  }

  inline Vehicle& operator=(const Vehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle& operator=(Vehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle* internal_default_instance() {
    return reinterpret_cast<const Vehicle*>(
               &_Vehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Vehicle* other);
  friend void swap(Vehicle& a, Vehicle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vehicle* New() const final {
    return CreateMaybeMessage<Vehicle>(nullptr);
  }

  Vehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle& from);
  void MergeFrom(const Vehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Vehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vehicle_Type Type;
  static constexpr Type CAR =
    Vehicle_Type_CAR;
  static constexpr Type BICYCLE =
    Vehicle_Type_BICYCLE;
  static constexpr Type MOTORCYCLE =
    Vehicle_Type_MOTORCYCLE;
  static inline bool Type_IsValid(int value) {
    return Vehicle_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Vehicle_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Vehicle_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Vehicle_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Vehicle_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Vehicle_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Vehicle_Type_Parse(name, value);
  }

  typedef Vehicle_Role Role;
  static constexpr Role NORMAL =
    Vehicle_Role_NORMAL;
  static constexpr Role POLICE =
    Vehicle_Role_POLICE;
  static constexpr Role FIRETRUCK =
    Vehicle_Role_FIRETRUCK;
  static constexpr Role AMBULANCE =
    Vehicle_Role_AMBULANCE;
  static inline bool Role_IsValid(int value) {
    return Vehicle_Role_IsValid(value);
  }
  static constexpr Role Role_MIN =
    Vehicle_Role_Role_MIN;
  static constexpr Role Role_MAX =
    Vehicle_Role_Role_MAX;
  static constexpr int Role_ARRAYSIZE =
    Vehicle_Role_Role_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Role_descriptor() {
    return Vehicle_Role_descriptor();
  }
  template<typename T>
  static inline const std::string& Role_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Role>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Role_Name.");
    return Vehicle_Role_Name(enum_t_value);
  }
  static inline bool Role_Parse(const std::string& name,
      Role* value) {
    return Vehicle_Role_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.Wheel wheels = 6;
  int wheels_size() const;
  void clear_wheels();
  static const int kWheelsFieldNumber = 6;
  ::Cognata::SDK::Wheel* mutable_wheels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::Wheel >*
      mutable_wheels();
  const ::Cognata::SDK::Wheel& wheels(int index) const;
  ::Cognata::SDK::Wheel* add_wheels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::Wheel >&
      wheels() const;

  // string navigationSegment = 3;
  void clear_navigationsegment();
  static const int kNavigationSegmentFieldNumber = 3;
  const std::string& navigationsegment() const;
  void set_navigationsegment(const std::string& value);
  void set_navigationsegment(std::string&& value);
  void set_navigationsegment(const char* value);
  void set_navigationsegment(const char* value, size_t size);
  std::string* mutable_navigationsegment();
  std::string* release_navigationsegment();
  void set_allocated_navigationsegment(std::string* navigationsegment);

  // string laneId = 4;
  void clear_laneid();
  static const int kLaneIdFieldNumber = 4;
  const std::string& laneid() const;
  void set_laneid(const std::string& value);
  void set_laneid(std::string&& value);
  void set_laneid(const char* value);
  void set_laneid(const char* value, size_t size);
  std::string* mutable_laneid();
  std::string* release_laneid();
  void set_allocated_laneid(std::string* laneid);

  // string lanesFromLeft = 5;
  void clear_lanesfromleft();
  static const int kLanesFromLeftFieldNumber = 5;
  const std::string& lanesfromleft() const;
  void set_lanesfromleft(const std::string& value);
  void set_lanesfromleft(std::string&& value);
  void set_lanesfromleft(const char* value);
  void set_lanesfromleft(const char* value, size_t size);
  std::string* mutable_lanesfromleft();
  std::string* release_lanesfromleft();
  void set_allocated_lanesfromleft(std::string* lanesfromleft);

  // .Cognata.SDK.LightsState lightsState = 7;
  bool has_lightsstate() const;
  void clear_lightsstate();
  static const int kLightsStateFieldNumber = 7;
  const ::Cognata::SDK::LightsState& lightsstate() const;
  ::Cognata::SDK::LightsState* release_lightsstate();
  ::Cognata::SDK::LightsState* mutable_lightsstate();
  void set_allocated_lightsstate(::Cognata::SDK::LightsState* lightsstate);

  // .Cognata.SDK.Vehicle.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Cognata::SDK::Vehicle_Type type() const;
  void set_type(::Cognata::SDK::Vehicle_Type value);

  // .Cognata.SDK.Vehicle.Role role = 2;
  void clear_role();
  static const int kRoleFieldNumber = 2;
  ::Cognata::SDK::Vehicle_Role role() const;
  void set_role(::Cognata::SDK::Vehicle_Role value);

  // .Cognata.SDK.CarConfiguration.SignalState signalState = 8;
  void clear_signalstate();
  static const int kSignalStateFieldNumber = 8;
  ::Cognata::SDK::CarConfiguration_SignalState signalstate() const;
  void set_signalstate(::Cognata::SDK::CarConfiguration_SignalState value);

  // .Cognata.SDK.CarConfiguration.SignalState signalLight = 9;
  void clear_signallight();
  static const int kSignalLightFieldNumber = 9;
  ::Cognata::SDK::CarConfiguration_SignalState signallight() const;
  void set_signallight(::Cognata::SDK::CarConfiguration_SignalState value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.Vehicle)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::Wheel > wheels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr navigationsegment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr laneid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lanesfromleft_;
  ::Cognata::SDK::LightsState* lightsstate_;
  int type_;
  int role_;
  int signalstate_;
  int signallight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class Pedestrian :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Pedestrian) */ {
 public:
  Pedestrian();
  virtual ~Pedestrian();

  Pedestrian(const Pedestrian& from);
  Pedestrian(Pedestrian&& from) noexcept
    : Pedestrian() {
    *this = ::std::move(from);
  }

  inline Pedestrian& operator=(const Pedestrian& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pedestrian& operator=(Pedestrian&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pedestrian& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pedestrian* internal_default_instance() {
    return reinterpret_cast<const Pedestrian*>(
               &_Pedestrian_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Pedestrian* other);
  friend void swap(Pedestrian& a, Pedestrian& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pedestrian* New() const final {
    return CreateMaybeMessage<Pedestrian>(nullptr);
  }

  Pedestrian* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pedestrian>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pedestrian& from);
  void MergeFrom(const Pedestrian& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pedestrian* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Pedestrian";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.SDKVector3 velocity = 1;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 1;
  const ::Cognata::SDK::SDKVector3& velocity() const;
  ::Cognata::SDK::SDKVector3* release_velocity();
  ::Cognata::SDK::SDKVector3* mutable_velocity();
  void set_allocated_velocity(::Cognata::SDK::SDKVector3* velocity);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.Pedestrian)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::SDKVector3* velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class TrafficLight :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TrafficLight* other);
  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const final {
    return CreateMaybeMessage<TrafficLight>(nullptr);
  }

  TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.TrafficLight";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficLight_Status Status;
  static constexpr Status OUTOFORDER =
    TrafficLight_Status_OUTOFORDER;
  static constexpr Status STOPWARN =
    TrafficLight_Status_STOPWARN;
  static constexpr Status Go =
    TrafficLight_Status_Go;
  static constexpr Status WARN =
    TrafficLight_Status_WARN;
  static constexpr Status STOP =
    TrafficLight_Status_STOP;
  static constexpr Status FLASH =
    TrafficLight_Status_FLASH;
  static inline bool Status_IsValid(int value) {
    return TrafficLight_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TrafficLight_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TrafficLight_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TrafficLight_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TrafficLight_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TrafficLight_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return TrafficLight_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string bulbStatus = 3;
  void clear_bulbstatus();
  static const int kBulbStatusFieldNumber = 3;
  const std::string& bulbstatus() const;
  void set_bulbstatus(const std::string& value);
  void set_bulbstatus(std::string&& value);
  void set_bulbstatus(const char* value);
  void set_bulbstatus(const char* value, size_t size);
  std::string* mutable_bulbstatus();
  std::string* release_bulbstatus();
  void set_allocated_bulbstatus(std::string* bulbstatus);

  // string functioningStatus = 4;
  void clear_functioningstatus();
  static const int kFunctioningStatusFieldNumber = 4;
  const std::string& functioningstatus() const;
  void set_functioningstatus(const std::string& value);
  void set_functioningstatus(std::string&& value);
  void set_functioningstatus(const char* value);
  void set_functioningstatus(const char* value, size_t size);
  std::string* mutable_functioningstatus();
  std::string* release_functioningstatus();
  void set_allocated_functioningstatus(std::string* functioningstatus);

  // string behaviour = 5;
  void clear_behaviour();
  static const int kBehaviourFieldNumber = 5;
  const std::string& behaviour() const;
  void set_behaviour(const std::string& value);
  void set_behaviour(std::string&& value);
  void set_behaviour(const char* value);
  void set_behaviour(const char* value, size_t size);
  std::string* mutable_behaviour();
  std::string* release_behaviour();
  void set_allocated_behaviour(std::string* behaviour);

  // string trafficSignalStatus = 6;
  void clear_trafficsignalstatus();
  static const int kTrafficSignalStatusFieldNumber = 6;
  const std::string& trafficsignalstatus() const;
  void set_trafficsignalstatus(const std::string& value);
  void set_trafficsignalstatus(std::string&& value);
  void set_trafficsignalstatus(const char* value);
  void set_trafficsignalstatus(const char* value, size_t size);
  std::string* mutable_trafficsignalstatus();
  std::string* release_trafficsignalstatus();
  void set_allocated_trafficsignalstatus(std::string* trafficsignalstatus);

  // .Cognata.SDK.TrafficLight.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::Cognata::SDK::TrafficLight_Status status() const;
  void set_status(::Cognata::SDK::TrafficLight_Status value);

  // float azimuthAngle = 7;
  void clear_azimuthangle();
  static const int kAzimuthAngleFieldNumber = 7;
  float azimuthangle() const;
  void set_azimuthangle(float value);

  // float facing = 8;
  void clear_facing();
  static const int kFacingFieldNumber = 8;
  float facing() const;
  void set_facing(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.TrafficLight)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bulbstatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr functioningstatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr behaviour_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trafficsignalstatus_;
  int status_;
  float azimuthangle_;
  float facing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class TrafficSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.TrafficSign) */ {
 public:
  TrafficSign();
  virtual ~TrafficSign();

  TrafficSign(const TrafficSign& from);
  TrafficSign(TrafficSign&& from) noexcept
    : TrafficSign() {
    *this = ::std::move(from);
  }

  inline TrafficSign& operator=(const TrafficSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSign& operator=(TrafficSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSign* internal_default_instance() {
    return reinterpret_cast<const TrafficSign*>(
               &_TrafficSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TrafficSign* other);
  friend void swap(TrafficSign& a, TrafficSign& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSign* New() const final {
    return CreateMaybeMessage<TrafficSign>(nullptr);
  }

  TrafficSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSign& from);
  void MergeFrom(const TrafficSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.TrafficSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.TrafficSign)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class LaneMark :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.LaneMark) */ {
 public:
  LaneMark();
  virtual ~LaneMark();

  LaneMark(const LaneMark& from);
  LaneMark(LaneMark&& from) noexcept
    : LaneMark() {
    *this = ::std::move(from);
  }

  inline LaneMark& operator=(const LaneMark& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMark& operator=(LaneMark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneMark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMark* internal_default_instance() {
    return reinterpret_cast<const LaneMark*>(
               &_LaneMark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LaneMark* other);
  friend void swap(LaneMark& a, LaneMark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneMark* New() const final {
    return CreateMaybeMessage<LaneMark>(nullptr);
  }

  LaneMark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneMark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneMark& from);
  void MergeFrom(const LaneMark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.LaneMark";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.LaneMark)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class Animal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Animal) */ {
 public:
  Animal();
  virtual ~Animal();

  Animal(const Animal& from);
  Animal(Animal&& from) noexcept
    : Animal() {
    *this = ::std::move(from);
  }

  inline Animal& operator=(const Animal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Animal& operator=(Animal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Animal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Animal* internal_default_instance() {
    return reinterpret_cast<const Animal*>(
               &_Animal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Animal* other);
  friend void swap(Animal& a, Animal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Animal* New() const final {
    return CreateMaybeMessage<Animal>(nullptr);
  }

  Animal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Animal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Animal& from);
  void MergeFrom(const Animal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Animal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Animal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.Animal)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class GeneralObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GeneralObject) */ {
 public:
  GeneralObject();
  virtual ~GeneralObject();

  GeneralObject(const GeneralObject& from);
  GeneralObject(GeneralObject&& from) noexcept
    : GeneralObject() {
    *this = ::std::move(from);
  }

  inline GeneralObject& operator=(const GeneralObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralObject& operator=(GeneralObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneralObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralObject* internal_default_instance() {
    return reinterpret_cast<const GeneralObject*>(
               &_GeneralObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GeneralObject* other);
  friend void swap(GeneralObject& a, GeneralObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeneralObject* New() const final {
    return CreateMaybeMessage<GeneralObject>(nullptr);
  }

  GeneralObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneralObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneralObject& from);
  void MergeFrom(const GeneralObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GeneralObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.GeneralObject)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class Annotation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Annotation) */ {
 public:
  Annotation();
  virtual ~Annotation();

  Annotation(const Annotation& from);
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotation& operator=(Annotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Annotation* other);
  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Annotation* New() const final {
    return CreateMaybeMessage<Annotation>(nullptr);
  }

  Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Annotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.Transform3 localTransform = 1;
  bool has_localtransform() const;
  void clear_localtransform();
  static const int kLocalTransformFieldNumber = 1;
  const ::Cognata::SDK::Transform3& localtransform() const;
  ::Cognata::SDK::Transform3* release_localtransform();
  ::Cognata::SDK::Transform3* mutable_localtransform();
  void set_allocated_localtransform(::Cognata::SDK::Transform3* localtransform);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.Annotation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::Transform3* localtransform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class Motion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Motion) */ {
 public:
  Motion();
  virtual ~Motion();

  Motion(const Motion& from);
  Motion(Motion&& from) noexcept
    : Motion() {
    *this = ::std::move(from);
  }

  inline Motion& operator=(const Motion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motion& operator=(Motion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Motion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Motion* internal_default_instance() {
    return reinterpret_cast<const Motion*>(
               &_Motion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Motion* other);
  friend void swap(Motion& a, Motion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Motion* New() const final {
    return CreateMaybeMessage<Motion>(nullptr);
  }

  Motion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Motion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Motion& from);
  void MergeFrom(const Motion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Motion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.SDKVector3 velocity = 1;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 1;
  const ::Cognata::SDK::SDKVector3& velocity() const;
  ::Cognata::SDK::SDKVector3* release_velocity();
  ::Cognata::SDK::SDKVector3* mutable_velocity();
  void set_allocated_velocity(::Cognata::SDK::SDKVector3* velocity);

  // .Cognata.SDK.SDKVector3 angularRates = 2;
  bool has_angularrates() const;
  void clear_angularrates();
  static const int kAngularRatesFieldNumber = 2;
  const ::Cognata::SDK::SDKVector3& angularrates() const;
  ::Cognata::SDK::SDKVector3* release_angularrates();
  ::Cognata::SDK::SDKVector3* mutable_angularrates();
  void set_allocated_angularrates(::Cognata::SDK::SDKVector3* angularrates);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.Motion)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::SDKVector3* velocity_;
  ::Cognata::SDK::SDKVector3* angularrates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class ObjectDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ObjectDescription) */ {
 public:
  ObjectDescription();
  virtual ~ObjectDescription();

  ObjectDescription(const ObjectDescription& from);
  ObjectDescription(ObjectDescription&& from) noexcept
    : ObjectDescription() {
    *this = ::std::move(from);
  }

  inline ObjectDescription& operator=(const ObjectDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDescription& operator=(ObjectDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectDescription& default_instance();

  enum ObjectTypeCase {
    kVehicle = 20,
    kPedestrian = 21,
    kTrafficLight = 22,
    kTrafficSign = 23,
    kLaneMark = 24,
    kAnnotation = 25,
    kAnimal = 26,
    kGeneralObject = 27,
    kParkingSlot = 28,
    OBJECTTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectDescription* internal_default_instance() {
    return reinterpret_cast<const ObjectDescription*>(
               &_ObjectDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ObjectDescription* other);
  friend void swap(ObjectDescription& a, ObjectDescription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectDescription* New() const final {
    return CreateMaybeMessage<ObjectDescription>(nullptr);
  }

  ObjectDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectDescription& from);
  void MergeFrom(const ObjectDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ObjectDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string SensorIds = 2;
  int sensorids_size() const;
  void clear_sensorids();
  static const int kSensorIdsFieldNumber = 2;
  const std::string& sensorids(int index) const;
  std::string* mutable_sensorids(int index);
  void set_sensorids(int index, const std::string& value);
  void set_sensorids(int index, std::string&& value);
  void set_sensorids(int index, const char* value);
  void set_sensorids(int index, const char* value, size_t size);
  std::string* add_sensorids();
  void add_sensorids(const std::string& value);
  void add_sensorids(std::string&& value);
  void add_sensorids(const char* value);
  void add_sensorids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sensorids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sensorids();

  // repeated string animationStateList = 8;
  int animationstatelist_size() const;
  void clear_animationstatelist();
  static const int kAnimationStateListFieldNumber = 8;
  const std::string& animationstatelist(int index) const;
  std::string* mutable_animationstatelist(int index);
  void set_animationstatelist(int index, const std::string& value);
  void set_animationstatelist(int index, std::string&& value);
  void set_animationstatelist(int index, const char* value);
  void set_animationstatelist(int index, const char* value, size_t size);
  std::string* add_animationstatelist();
  void add_animationstatelist(const std::string& value);
  void add_animationstatelist(std::string&& value);
  void add_animationstatelist(const char* value);
  void add_animationstatelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& animationstatelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_animationstatelist();

  // string Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string ROIType = 5;
  void clear_roitype();
  static const int kROITypeFieldNumber = 5;
  const std::string& roitype() const;
  void set_roitype(const std::string& value);
  void set_roitype(std::string&& value);
  void set_roitype(const char* value);
  void set_roitype(const char* value, size_t size);
  std::string* mutable_roitype();
  std::string* release_roitype();
  void set_allocated_roitype(std::string* roitype);

  // string ROISubtype = 6;
  void clear_roisubtype();
  static const int kROISubtypeFieldNumber = 6;
  const std::string& roisubtype() const;
  void set_roisubtype(const std::string& value);
  void set_roisubtype(std::string&& value);
  void set_roisubtype(const char* value);
  void set_roisubtype(const char* value, size_t size);
  std::string* mutable_roisubtype();
  std::string* release_roisubtype();
  void set_allocated_roisubtype(std::string* roisubtype);

  // string animationState = 7;
  void clear_animationstate();
  static const int kAnimationStateFieldNumber = 7;
  const std::string& animationstate() const;
  void set_animationstate(const std::string& value);
  void set_animationstate(std::string&& value);
  void set_animationstate(const char* value);
  void set_animationstate(const char* value, size_t size);
  std::string* mutable_animationstate();
  std::string* release_animationstate();
  void set_allocated_animationstate(std::string* animationstate);

  // .Cognata.SDK.SDKBoundingBox boundingBox = 3;
  bool has_boundingbox() const;
  void clear_boundingbox();
  static const int kBoundingBoxFieldNumber = 3;
  const ::Cognata::SDK::SDKBoundingBox& boundingbox() const;
  ::Cognata::SDK::SDKBoundingBox* release_boundingbox();
  ::Cognata::SDK::SDKBoundingBox* mutable_boundingbox();
  void set_allocated_boundingbox(::Cognata::SDK::SDKBoundingBox* boundingbox);

  // .Cognata.SDK.Motion motion = 4;
  bool has_motion() const;
  void clear_motion();
  static const int kMotionFieldNumber = 4;
  const ::Cognata::SDK::Motion& motion() const;
  ::Cognata::SDK::Motion* release_motion();
  ::Cognata::SDK::Motion* mutable_motion();
  void set_allocated_motion(::Cognata::SDK::Motion* motion);

  // .Cognata.SDK.Vehicle vehicle = 20;
  bool has_vehicle() const;
  void clear_vehicle();
  static const int kVehicleFieldNumber = 20;
  const ::Cognata::SDK::Vehicle& vehicle() const;
  ::Cognata::SDK::Vehicle* release_vehicle();
  ::Cognata::SDK::Vehicle* mutable_vehicle();
  void set_allocated_vehicle(::Cognata::SDK::Vehicle* vehicle);

  // .Cognata.SDK.Pedestrian pedestrian = 21;
  bool has_pedestrian() const;
  void clear_pedestrian();
  static const int kPedestrianFieldNumber = 21;
  const ::Cognata::SDK::Pedestrian& pedestrian() const;
  ::Cognata::SDK::Pedestrian* release_pedestrian();
  ::Cognata::SDK::Pedestrian* mutable_pedestrian();
  void set_allocated_pedestrian(::Cognata::SDK::Pedestrian* pedestrian);

  // .Cognata.SDK.TrafficLight trafficLight = 22;
  bool has_trafficlight() const;
  void clear_trafficlight();
  static const int kTrafficLightFieldNumber = 22;
  const ::Cognata::SDK::TrafficLight& trafficlight() const;
  ::Cognata::SDK::TrafficLight* release_trafficlight();
  ::Cognata::SDK::TrafficLight* mutable_trafficlight();
  void set_allocated_trafficlight(::Cognata::SDK::TrafficLight* trafficlight);

  // .Cognata.SDK.TrafficSign trafficSign = 23;
  bool has_trafficsign() const;
  void clear_trafficsign();
  static const int kTrafficSignFieldNumber = 23;
  const ::Cognata::SDK::TrafficSign& trafficsign() const;
  ::Cognata::SDK::TrafficSign* release_trafficsign();
  ::Cognata::SDK::TrafficSign* mutable_trafficsign();
  void set_allocated_trafficsign(::Cognata::SDK::TrafficSign* trafficsign);

  // .Cognata.SDK.LaneMark laneMark = 24;
  bool has_lanemark() const;
  void clear_lanemark();
  static const int kLaneMarkFieldNumber = 24;
  const ::Cognata::SDK::LaneMark& lanemark() const;
  ::Cognata::SDK::LaneMark* release_lanemark();
  ::Cognata::SDK::LaneMark* mutable_lanemark();
  void set_allocated_lanemark(::Cognata::SDK::LaneMark* lanemark);

  // .Cognata.SDK.Annotation annotation = 25;
  bool has_annotation() const;
  void clear_annotation();
  static const int kAnnotationFieldNumber = 25;
  const ::Cognata::SDK::Annotation& annotation() const;
  ::Cognata::SDK::Annotation* release_annotation();
  ::Cognata::SDK::Annotation* mutable_annotation();
  void set_allocated_annotation(::Cognata::SDK::Annotation* annotation);

  // .Cognata.SDK.Animal animal = 26;
  bool has_animal() const;
  void clear_animal();
  static const int kAnimalFieldNumber = 26;
  const ::Cognata::SDK::Animal& animal() const;
  ::Cognata::SDK::Animal* release_animal();
  ::Cognata::SDK::Animal* mutable_animal();
  void set_allocated_animal(::Cognata::SDK::Animal* animal);

  // .Cognata.SDK.GeneralObject generalObject = 27;
  bool has_generalobject() const;
  void clear_generalobject();
  static const int kGeneralObjectFieldNumber = 27;
  const ::Cognata::SDK::GeneralObject& generalobject() const;
  ::Cognata::SDK::GeneralObject* release_generalobject();
  ::Cognata::SDK::GeneralObject* mutable_generalobject();
  void set_allocated_generalobject(::Cognata::SDK::GeneralObject* generalobject);

  // .Cognata.SDK.ParkingSlot parkingSlot = 28;
  bool has_parkingslot() const;
  void clear_parkingslot();
  static const int kParkingSlotFieldNumber = 28;
  const ::Cognata::SDK::ParkingSlot& parkingslot() const;
  ::Cognata::SDK::ParkingSlot* release_parkingslot();
  ::Cognata::SDK::ParkingSlot* mutable_parkingslot();
  void set_allocated_parkingslot(::Cognata::SDK::ParkingSlot* parkingslot);

  void clear_ObjectType();
  ObjectTypeCase ObjectType_case() const;
  // @@protoc_insertion_point(class_scope:Cognata.SDK.ObjectDescription)
 private:
  class HasBitSetters;
  void set_has_vehicle();
  void set_has_pedestrian();
  void set_has_trafficlight();
  void set_has_trafficsign();
  void set_has_lanemark();
  void set_has_annotation();
  void set_has_animal();
  void set_has_generalobject();
  void set_has_parkingslot();

  inline bool has_ObjectType() const;
  inline void clear_has_ObjectType();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sensorids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> animationstatelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roitype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roisubtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationstate_;
  ::Cognata::SDK::SDKBoundingBox* boundingbox_;
  ::Cognata::SDK::Motion* motion_;
  union ObjectTypeUnion {
    ObjectTypeUnion() {}
    ::Cognata::SDK::Vehicle* vehicle_;
    ::Cognata::SDK::Pedestrian* pedestrian_;
    ::Cognata::SDK::TrafficLight* trafficlight_;
    ::Cognata::SDK::TrafficSign* trafficsign_;
    ::Cognata::SDK::LaneMark* lanemark_;
    ::Cognata::SDK::Annotation* annotation_;
    ::Cognata::SDK::Animal* animal_;
    ::Cognata::SDK::GeneralObject* generalobject_;
    ::Cognata::SDK::ParkingSlot* parkingslot_;
  } ObjectType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class ParkingSlot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ParkingSlot) */ {
 public:
  ParkingSlot();
  virtual ~ParkingSlot();

  ParkingSlot(const ParkingSlot& from);
  ParkingSlot(ParkingSlot&& from) noexcept
    : ParkingSlot() {
    *this = ::std::move(from);
  }

  inline ParkingSlot& operator=(const ParkingSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingSlot& operator=(ParkingSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSlot* internal_default_instance() {
    return reinterpret_cast<const ParkingSlot*>(
               &_ParkingSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ParkingSlot* other);
  friend void swap(ParkingSlot& a, ParkingSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParkingSlot* New() const final {
    return CreateMaybeMessage<ParkingSlot>(nullptr);
  }

  ParkingSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingSlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingSlot& from);
  void MergeFrom(const ParkingSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingSlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ParkingSlot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ParkingSlot_State State;
  static constexpr State AVAILABLE =
    ParkingSlot_State_AVAILABLE;
  static constexpr State OCCUPIED =
    ParkingSlot_State_OCCUPIED;
  static inline bool State_IsValid(int value) {
    return ParkingSlot_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ParkingSlot_State_State_MIN;
  static constexpr State State_MAX =
    ParkingSlot_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ParkingSlot_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ParkingSlot_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ParkingSlot_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return ParkingSlot_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Cognata.SDK.Vertices vertices = 2;
  bool has_vertices() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 2;
  const ::Cognata::SDK::Vertices& vertices() const;
  ::Cognata::SDK::Vertices* release_vertices();
  ::Cognata::SDK::Vertices* mutable_vertices();
  void set_allocated_vertices(::Cognata::SDK::Vertices* vertices);

  // .Cognata.SDK.ParkingSlot.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::Cognata::SDK::ParkingSlot_State state() const;
  void set_state(::Cognata::SDK::ParkingSlot_State value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.ParkingSlot)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::Vertices* vertices_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class Vertices :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Vertices) */ {
 public:
  Vertices();
  virtual ~Vertices();

  Vertices(const Vertices& from);
  Vertices(Vertices&& from) noexcept
    : Vertices() {
    *this = ::std::move(from);
  }

  inline Vertices& operator=(const Vertices& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vertices& operator=(Vertices&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vertices& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vertices* internal_default_instance() {
    return reinterpret_cast<const Vertices*>(
               &_Vertices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Vertices* other);
  friend void swap(Vertices& a, Vertices& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vertices* New() const final {
    return CreateMaybeMessage<Vertices>(nullptr);
  }

  Vertices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vertices>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vertices& from);
  void MergeFrom(const Vertices& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vertices* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Vertices";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.SDKVector3 vertex1 = 1;
  bool has_vertex1() const;
  void clear_vertex1();
  static const int kVertex1FieldNumber = 1;
  const ::Cognata::SDK::SDKVector3& vertex1() const;
  ::Cognata::SDK::SDKVector3* release_vertex1();
  ::Cognata::SDK::SDKVector3* mutable_vertex1();
  void set_allocated_vertex1(::Cognata::SDK::SDKVector3* vertex1);

  // .Cognata.SDK.SDKVector3 vertex2 = 2;
  bool has_vertex2() const;
  void clear_vertex2();
  static const int kVertex2FieldNumber = 2;
  const ::Cognata::SDK::SDKVector3& vertex2() const;
  ::Cognata::SDK::SDKVector3* release_vertex2();
  ::Cognata::SDK::SDKVector3* mutable_vertex2();
  void set_allocated_vertex2(::Cognata::SDK::SDKVector3* vertex2);

  // .Cognata.SDK.SDKVector3 vertex3 = 3;
  bool has_vertex3() const;
  void clear_vertex3();
  static const int kVertex3FieldNumber = 3;
  const ::Cognata::SDK::SDKVector3& vertex3() const;
  ::Cognata::SDK::SDKVector3* release_vertex3();
  ::Cognata::SDK::SDKVector3* mutable_vertex3();
  void set_allocated_vertex3(::Cognata::SDK::SDKVector3* vertex3);

  // .Cognata.SDK.SDKVector3 vertex4 = 4;
  bool has_vertex4() const;
  void clear_vertex4();
  static const int kVertex4FieldNumber = 4;
  const ::Cognata::SDK::SDKVector3& vertex4() const;
  ::Cognata::SDK::SDKVector3* release_vertex4();
  ::Cognata::SDK::SDKVector3* mutable_vertex4();
  void set_allocated_vertex4(::Cognata::SDK::SDKVector3* vertex4);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.Vertices)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::SDKVector3* vertex1_;
  ::Cognata::SDK::SDKVector3* vertex2_;
  ::Cognata::SDK::SDKVector3* vertex3_;
  ::Cognata::SDK::SDKVector3* vertex4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// -------------------------------------------------------------------

class ROIOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ROIOutput) */ {
 public:
  ROIOutput();
  virtual ~ROIOutput();

  ROIOutput(const ROIOutput& from);
  ROIOutput(ROIOutput&& from) noexcept
    : ROIOutput() {
    *this = ::std::move(from);
  }

  inline ROIOutput& operator=(const ROIOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIOutput& operator=(ROIOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIOutput* internal_default_instance() {
    return reinterpret_cast<const ROIOutput*>(
               &_ROIOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ROIOutput* other);
  friend void swap(ROIOutput& a, ROIOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ROIOutput* New() const final {
    return CreateMaybeMessage<ROIOutput>(nullptr);
  }

  ROIOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIOutput& from);
  void MergeFrom(const ROIOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ROIOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ROIOutput_2eproto);
    return ::descriptor_table_ROIOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cognata.SDK.ObjectDescription objectsList = 1;
  int objectslist_size() const;
  void clear_objectslist();
  static const int kObjectsListFieldNumber = 1;
  ::Cognata::SDK::ObjectDescription* mutable_objectslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::ObjectDescription >*
      mutable_objectslist();
  const ::Cognata::SDK::ObjectDescription& objectslist(int index) const;
  ::Cognata::SDK::ObjectDescription* add_objectslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::ObjectDescription >&
      objectslist() const;

  // @@protoc_insertion_point(class_scope:Cognata.SDK.ROIOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::ObjectDescription > objectslist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ROIOutput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SDKBoundingBox

// .Cognata.SDK.Transform3 transform = 1;
inline bool SDKBoundingBox::has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline const ::Cognata::SDK::Transform3& SDKBoundingBox::transform() const {
  const ::Cognata::SDK::Transform3* p = transform_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.SDKBoundingBox.transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::Transform3*>(
      &::Cognata::SDK::_Transform3_default_instance_);
}
inline ::Cognata::SDK::Transform3* SDKBoundingBox::release_transform() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.SDKBoundingBox.transform)
  
  ::Cognata::SDK::Transform3* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::Transform3* SDKBoundingBox::mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::Transform3>(GetArenaNoVirtual());
    transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.SDKBoundingBox.transform)
  return transform_;
}
inline void SDKBoundingBox::set_allocated_transform(::Cognata::SDK::Transform3* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.SDKBoundingBox.transform)
}

// float height = 2;
inline void SDKBoundingBox::clear_height() {
  height_ = 0;
}
inline float SDKBoundingBox::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SDKBoundingBox.height)
  return height_;
}
inline void SDKBoundingBox::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SDKBoundingBox.height)
}

// float width = 3;
inline void SDKBoundingBox::clear_width() {
  width_ = 0;
}
inline float SDKBoundingBox::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SDKBoundingBox.width)
  return width_;
}
inline void SDKBoundingBox::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SDKBoundingBox.width)
}

// float length = 4;
inline void SDKBoundingBox::clear_length() {
  length_ = 0;
}
inline float SDKBoundingBox::length() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SDKBoundingBox.length)
  return length_;
}
inline void SDKBoundingBox::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SDKBoundingBox.length)
}

// -------------------------------------------------------------------

// Wheel

// .Cognata.SDK.SDKVector3 relativePosition = 1;
inline bool Wheel::has_relativeposition() const {
  return this != internal_default_instance() && relativeposition_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Wheel::relativeposition() const {
  const ::Cognata::SDK::SDKVector3* p = relativeposition_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Wheel.relativePosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Wheel::release_relativeposition() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Wheel.relativePosition)
  
  ::Cognata::SDK::SDKVector3* temp = relativeposition_;
  relativeposition_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Wheel::mutable_relativeposition() {
  
  if (relativeposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    relativeposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Wheel.relativePosition)
  return relativeposition_;
}
inline void Wheel::set_allocated_relativeposition(::Cognata::SDK::SDKVector3* relativeposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relativeposition_);
  }
  if (relativeposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relativeposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativeposition, submessage_arena);
    }
    
  } else {
    
  }
  relativeposition_ = relativeposition;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Wheel.relativePosition)
}

// float steeringAngle = 2;
inline void Wheel::clear_steeringangle() {
  steeringangle_ = 0;
}
inline float Wheel::steeringangle() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Wheel.steeringAngle)
  return steeringangle_;
}
inline void Wheel::set_steeringangle(float value) {
  
  steeringangle_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.Wheel.steeringAngle)
}

// float rotateAngle = 3;
inline void Wheel::clear_rotateangle() {
  rotateangle_ = 0;
}
inline float Wheel::rotateangle() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Wheel.rotateAngle)
  return rotateangle_;
}
inline void Wheel::set_rotateangle(float value) {
  
  rotateangle_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.Wheel.rotateAngle)
}

// string name = 4;
inline void Wheel::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Wheel::name() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Wheel.name)
  return name_.GetNoArena();
}
inline void Wheel::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.Wheel.name)
}
inline void Wheel::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.Wheel.name)
}
inline void Wheel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.Wheel.name)
}
inline void Wheel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.Wheel.name)
}
inline std::string* Wheel::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Wheel.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Wheel::release_name() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Wheel.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Wheel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Wheel.name)
}

// -------------------------------------------------------------------

// Vehicle

// .Cognata.SDK.Vehicle.Type type = 1;
inline void Vehicle::clear_type() {
  type_ = 0;
}
inline ::Cognata::SDK::Vehicle_Type Vehicle::type() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vehicle.type)
  return static_cast< ::Cognata::SDK::Vehicle_Type >(type_);
}
inline void Vehicle::set_type(::Cognata::SDK::Vehicle_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.Vehicle.type)
}

// .Cognata.SDK.Vehicle.Role role = 2;
inline void Vehicle::clear_role() {
  role_ = 0;
}
inline ::Cognata::SDK::Vehicle_Role Vehicle::role() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vehicle.role)
  return static_cast< ::Cognata::SDK::Vehicle_Role >(role_);
}
inline void Vehicle::set_role(::Cognata::SDK::Vehicle_Role value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.Vehicle.role)
}

// string navigationSegment = 3;
inline void Vehicle::clear_navigationsegment() {
  navigationsegment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Vehicle::navigationsegment() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vehicle.navigationSegment)
  return navigationsegment_.GetNoArena();
}
inline void Vehicle::set_navigationsegment(const std::string& value) {
  
  navigationsegment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.Vehicle.navigationSegment)
}
inline void Vehicle::set_navigationsegment(std::string&& value) {
  
  navigationsegment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.Vehicle.navigationSegment)
}
inline void Vehicle::set_navigationsegment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  navigationsegment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.Vehicle.navigationSegment)
}
inline void Vehicle::set_navigationsegment(const char* value, size_t size) {
  
  navigationsegment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.Vehicle.navigationSegment)
}
inline std::string* Vehicle::mutable_navigationsegment() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Vehicle.navigationSegment)
  return navigationsegment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Vehicle::release_navigationsegment() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Vehicle.navigationSegment)
  
  return navigationsegment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle::set_allocated_navigationsegment(std::string* navigationsegment) {
  if (navigationsegment != nullptr) {
    
  } else {
    
  }
  navigationsegment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), navigationsegment);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Vehicle.navigationSegment)
}

// string laneId = 4;
inline void Vehicle::clear_laneid() {
  laneid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Vehicle::laneid() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vehicle.laneId)
  return laneid_.GetNoArena();
}
inline void Vehicle::set_laneid(const std::string& value) {
  
  laneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.Vehicle.laneId)
}
inline void Vehicle::set_laneid(std::string&& value) {
  
  laneid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.Vehicle.laneId)
}
inline void Vehicle::set_laneid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  laneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.Vehicle.laneId)
}
inline void Vehicle::set_laneid(const char* value, size_t size) {
  
  laneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.Vehicle.laneId)
}
inline std::string* Vehicle::mutable_laneid() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Vehicle.laneId)
  return laneid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Vehicle::release_laneid() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Vehicle.laneId)
  
  return laneid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle::set_allocated_laneid(std::string* laneid) {
  if (laneid != nullptr) {
    
  } else {
    
  }
  laneid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), laneid);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Vehicle.laneId)
}

// string lanesFromLeft = 5;
inline void Vehicle::clear_lanesfromleft() {
  lanesfromleft_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Vehicle::lanesfromleft() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vehicle.lanesFromLeft)
  return lanesfromleft_.GetNoArena();
}
inline void Vehicle::set_lanesfromleft(const std::string& value) {
  
  lanesfromleft_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.Vehicle.lanesFromLeft)
}
inline void Vehicle::set_lanesfromleft(std::string&& value) {
  
  lanesfromleft_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.Vehicle.lanesFromLeft)
}
inline void Vehicle::set_lanesfromleft(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lanesfromleft_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.Vehicle.lanesFromLeft)
}
inline void Vehicle::set_lanesfromleft(const char* value, size_t size) {
  
  lanesfromleft_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.Vehicle.lanesFromLeft)
}
inline std::string* Vehicle::mutable_lanesfromleft() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Vehicle.lanesFromLeft)
  return lanesfromleft_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Vehicle::release_lanesfromleft() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Vehicle.lanesFromLeft)
  
  return lanesfromleft_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle::set_allocated_lanesfromleft(std::string* lanesfromleft) {
  if (lanesfromleft != nullptr) {
    
  } else {
    
  }
  lanesfromleft_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lanesfromleft);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Vehicle.lanesFromLeft)
}

// repeated .Cognata.SDK.Wheel wheels = 6;
inline int Vehicle::wheels_size() const {
  return wheels_.size();
}
inline void Vehicle::clear_wheels() {
  wheels_.Clear();
}
inline ::Cognata::SDK::Wheel* Vehicle::mutable_wheels(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Vehicle.wheels)
  return wheels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::Wheel >*
Vehicle::mutable_wheels() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.Vehicle.wheels)
  return &wheels_;
}
inline const ::Cognata::SDK::Wheel& Vehicle::wheels(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vehicle.wheels)
  return wheels_.Get(index);
}
inline ::Cognata::SDK::Wheel* Vehicle::add_wheels() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.Vehicle.wheels)
  return wheels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::Wheel >&
Vehicle::wheels() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.Vehicle.wheels)
  return wheels_;
}

// .Cognata.SDK.LightsState lightsState = 7;
inline bool Vehicle::has_lightsstate() const {
  return this != internal_default_instance() && lightsstate_ != nullptr;
}
inline const ::Cognata::SDK::LightsState& Vehicle::lightsstate() const {
  const ::Cognata::SDK::LightsState* p = lightsstate_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vehicle.lightsState)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::LightsState*>(
      &::Cognata::SDK::_LightsState_default_instance_);
}
inline ::Cognata::SDK::LightsState* Vehicle::release_lightsstate() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Vehicle.lightsState)
  
  ::Cognata::SDK::LightsState* temp = lightsstate_;
  lightsstate_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::LightsState* Vehicle::mutable_lightsstate() {
  
  if (lightsstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::LightsState>(GetArenaNoVirtual());
    lightsstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Vehicle.lightsState)
  return lightsstate_;
}
inline void Vehicle::set_allocated_lightsstate(::Cognata::SDK::LightsState* lightsstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lightsstate_);
  }
  if (lightsstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lightsstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lightsstate, submessage_arena);
    }
    
  } else {
    
  }
  lightsstate_ = lightsstate;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Vehicle.lightsState)
}

// .Cognata.SDK.CarConfiguration.SignalState signalState = 8;
inline void Vehicle::clear_signalstate() {
  signalstate_ = 0;
}
inline ::Cognata::SDK::CarConfiguration_SignalState Vehicle::signalstate() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vehicle.signalState)
  return static_cast< ::Cognata::SDK::CarConfiguration_SignalState >(signalstate_);
}
inline void Vehicle::set_signalstate(::Cognata::SDK::CarConfiguration_SignalState value) {
  
  signalstate_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.Vehicle.signalState)
}

// .Cognata.SDK.CarConfiguration.SignalState signalLight = 9;
inline void Vehicle::clear_signallight() {
  signallight_ = 0;
}
inline ::Cognata::SDK::CarConfiguration_SignalState Vehicle::signallight() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vehicle.signalLight)
  return static_cast< ::Cognata::SDK::CarConfiguration_SignalState >(signallight_);
}
inline void Vehicle::set_signallight(::Cognata::SDK::CarConfiguration_SignalState value) {
  
  signallight_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.Vehicle.signalLight)
}

// -------------------------------------------------------------------

// Pedestrian

// .Cognata.SDK.SDKVector3 velocity = 1;
inline bool Pedestrian::has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Pedestrian::velocity() const {
  const ::Cognata::SDK::SDKVector3* p = velocity_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Pedestrian.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Pedestrian::release_velocity() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Pedestrian.velocity)
  
  ::Cognata::SDK::SDKVector3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Pedestrian::mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Pedestrian.velocity)
  return velocity_;
}
inline void Pedestrian::set_allocated_velocity(::Cognata::SDK::SDKVector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Pedestrian.velocity)
}

// -------------------------------------------------------------------

// TrafficLight

// .Cognata.SDK.TrafficLight.Status status = 2;
inline void TrafficLight::clear_status() {
  status_ = 0;
}
inline ::Cognata::SDK::TrafficLight_Status TrafficLight::status() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLight.status)
  return static_cast< ::Cognata::SDK::TrafficLight_Status >(status_);
}
inline void TrafficLight::set_status(::Cognata::SDK::TrafficLight_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.TrafficLight.status)
}

// string bulbStatus = 3;
inline void TrafficLight::clear_bulbstatus() {
  bulbstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLight::bulbstatus() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLight.bulbStatus)
  return bulbstatus_.GetNoArena();
}
inline void TrafficLight::set_bulbstatus(const std::string& value) {
  
  bulbstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.TrafficLight.bulbStatus)
}
inline void TrafficLight::set_bulbstatus(std::string&& value) {
  
  bulbstatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.TrafficLight.bulbStatus)
}
inline void TrafficLight::set_bulbstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bulbstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.TrafficLight.bulbStatus)
}
inline void TrafficLight::set_bulbstatus(const char* value, size_t size) {
  
  bulbstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.TrafficLight.bulbStatus)
}
inline std::string* TrafficLight::mutable_bulbstatus() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.TrafficLight.bulbStatus)
  return bulbstatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight::release_bulbstatus() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.TrafficLight.bulbStatus)
  
  return bulbstatus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_bulbstatus(std::string* bulbstatus) {
  if (bulbstatus != nullptr) {
    
  } else {
    
  }
  bulbstatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bulbstatus);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.TrafficLight.bulbStatus)
}

// string functioningStatus = 4;
inline void TrafficLight::clear_functioningstatus() {
  functioningstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLight::functioningstatus() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLight.functioningStatus)
  return functioningstatus_.GetNoArena();
}
inline void TrafficLight::set_functioningstatus(const std::string& value) {
  
  functioningstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.TrafficLight.functioningStatus)
}
inline void TrafficLight::set_functioningstatus(std::string&& value) {
  
  functioningstatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.TrafficLight.functioningStatus)
}
inline void TrafficLight::set_functioningstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  functioningstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.TrafficLight.functioningStatus)
}
inline void TrafficLight::set_functioningstatus(const char* value, size_t size) {
  
  functioningstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.TrafficLight.functioningStatus)
}
inline std::string* TrafficLight::mutable_functioningstatus() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.TrafficLight.functioningStatus)
  return functioningstatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight::release_functioningstatus() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.TrafficLight.functioningStatus)
  
  return functioningstatus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_functioningstatus(std::string* functioningstatus) {
  if (functioningstatus != nullptr) {
    
  } else {
    
  }
  functioningstatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), functioningstatus);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.TrafficLight.functioningStatus)
}

// string behaviour = 5;
inline void TrafficLight::clear_behaviour() {
  behaviour_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLight::behaviour() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLight.behaviour)
  return behaviour_.GetNoArena();
}
inline void TrafficLight::set_behaviour(const std::string& value) {
  
  behaviour_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.TrafficLight.behaviour)
}
inline void TrafficLight::set_behaviour(std::string&& value) {
  
  behaviour_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.TrafficLight.behaviour)
}
inline void TrafficLight::set_behaviour(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  behaviour_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.TrafficLight.behaviour)
}
inline void TrafficLight::set_behaviour(const char* value, size_t size) {
  
  behaviour_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.TrafficLight.behaviour)
}
inline std::string* TrafficLight::mutable_behaviour() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.TrafficLight.behaviour)
  return behaviour_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight::release_behaviour() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.TrafficLight.behaviour)
  
  return behaviour_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_behaviour(std::string* behaviour) {
  if (behaviour != nullptr) {
    
  } else {
    
  }
  behaviour_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), behaviour);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.TrafficLight.behaviour)
}

// string trafficSignalStatus = 6;
inline void TrafficLight::clear_trafficsignalstatus() {
  trafficsignalstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLight::trafficsignalstatus() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLight.trafficSignalStatus)
  return trafficsignalstatus_.GetNoArena();
}
inline void TrafficLight::set_trafficsignalstatus(const std::string& value) {
  
  trafficsignalstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.TrafficLight.trafficSignalStatus)
}
inline void TrafficLight::set_trafficsignalstatus(std::string&& value) {
  
  trafficsignalstatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.TrafficLight.trafficSignalStatus)
}
inline void TrafficLight::set_trafficsignalstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trafficsignalstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.TrafficLight.trafficSignalStatus)
}
inline void TrafficLight::set_trafficsignalstatus(const char* value, size_t size) {
  
  trafficsignalstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.TrafficLight.trafficSignalStatus)
}
inline std::string* TrafficLight::mutable_trafficsignalstatus() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.TrafficLight.trafficSignalStatus)
  return trafficsignalstatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight::release_trafficsignalstatus() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.TrafficLight.trafficSignalStatus)
  
  return trafficsignalstatus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_trafficsignalstatus(std::string* trafficsignalstatus) {
  if (trafficsignalstatus != nullptr) {
    
  } else {
    
  }
  trafficsignalstatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trafficsignalstatus);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.TrafficLight.trafficSignalStatus)
}

// float azimuthAngle = 7;
inline void TrafficLight::clear_azimuthangle() {
  azimuthangle_ = 0;
}
inline float TrafficLight::azimuthangle() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLight.azimuthAngle)
  return azimuthangle_;
}
inline void TrafficLight::set_azimuthangle(float value) {
  
  azimuthangle_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.TrafficLight.azimuthAngle)
}

// float facing = 8;
inline void TrafficLight::clear_facing() {
  facing_ = 0;
}
inline float TrafficLight::facing() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.TrafficLight.facing)
  return facing_;
}
inline void TrafficLight::set_facing(float value) {
  
  facing_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.TrafficLight.facing)
}

// -------------------------------------------------------------------

// TrafficSign

// -------------------------------------------------------------------

// LaneMark

// -------------------------------------------------------------------

// Animal

// -------------------------------------------------------------------

// GeneralObject

// -------------------------------------------------------------------

// Annotation

// .Cognata.SDK.Transform3 localTransform = 1;
inline bool Annotation::has_localtransform() const {
  return this != internal_default_instance() && localtransform_ != nullptr;
}
inline const ::Cognata::SDK::Transform3& Annotation::localtransform() const {
  const ::Cognata::SDK::Transform3* p = localtransform_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Annotation.localTransform)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::Transform3*>(
      &::Cognata::SDK::_Transform3_default_instance_);
}
inline ::Cognata::SDK::Transform3* Annotation::release_localtransform() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Annotation.localTransform)
  
  ::Cognata::SDK::Transform3* temp = localtransform_;
  localtransform_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::Transform3* Annotation::mutable_localtransform() {
  
  if (localtransform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::Transform3>(GetArenaNoVirtual());
    localtransform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Annotation.localTransform)
  return localtransform_;
}
inline void Annotation::set_allocated_localtransform(::Cognata::SDK::Transform3* localtransform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(localtransform_);
  }
  if (localtransform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      localtransform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localtransform, submessage_arena);
    }
    
  } else {
    
  }
  localtransform_ = localtransform;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Annotation.localTransform)
}

// -------------------------------------------------------------------

// Motion

// .Cognata.SDK.SDKVector3 velocity = 1;
inline bool Motion::has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Motion::velocity() const {
  const ::Cognata::SDK::SDKVector3* p = velocity_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Motion.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Motion::release_velocity() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Motion.velocity)
  
  ::Cognata::SDK::SDKVector3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Motion::mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Motion.velocity)
  return velocity_;
}
inline void Motion::set_allocated_velocity(::Cognata::SDK::SDKVector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Motion.velocity)
}

// .Cognata.SDK.SDKVector3 angularRates = 2;
inline bool Motion::has_angularrates() const {
  return this != internal_default_instance() && angularrates_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Motion::angularrates() const {
  const ::Cognata::SDK::SDKVector3* p = angularrates_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Motion.angularRates)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Motion::release_angularrates() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Motion.angularRates)
  
  ::Cognata::SDK::SDKVector3* temp = angularrates_;
  angularrates_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Motion::mutable_angularrates() {
  
  if (angularrates_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    angularrates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Motion.angularRates)
  return angularrates_;
}
inline void Motion::set_allocated_angularrates(::Cognata::SDK::SDKVector3* angularrates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angularrates_);
  }
  if (angularrates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angularrates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularrates, submessage_arena);
    }
    
  } else {
    
  }
  angularrates_ = angularrates;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Motion.angularRates)
}

// -------------------------------------------------------------------

// ObjectDescription

// string Id = 1;
inline void ObjectDescription::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObjectDescription::id() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.Id)
  return id_.GetNoArena();
}
inline void ObjectDescription::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.ObjectDescription.Id)
}
inline void ObjectDescription::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.ObjectDescription.Id)
}
inline void ObjectDescription::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.ObjectDescription.Id)
}
inline void ObjectDescription::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.ObjectDescription.Id)
}
inline std::string* ObjectDescription::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.Id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObjectDescription::release_id() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.Id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDescription::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ObjectDescription.Id)
}

// repeated string SensorIds = 2;
inline int ObjectDescription::sensorids_size() const {
  return sensorids_.size();
}
inline void ObjectDescription::clear_sensorids() {
  sensorids_.Clear();
}
inline const std::string& ObjectDescription::sensorids(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.SensorIds)
  return sensorids_.Get(index);
}
inline std::string* ObjectDescription::mutable_sensorids(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.SensorIds)
  return sensorids_.Mutable(index);
}
inline void ObjectDescription::set_sensorids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Cognata.SDK.ObjectDescription.SensorIds)
  sensorids_.Mutable(index)->assign(value);
}
inline void ObjectDescription::set_sensorids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Cognata.SDK.ObjectDescription.SensorIds)
  sensorids_.Mutable(index)->assign(std::move(value));
}
inline void ObjectDescription::set_sensorids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sensorids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.ObjectDescription.SensorIds)
}
inline void ObjectDescription::set_sensorids(int index, const char* value, size_t size) {
  sensorids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.ObjectDescription.SensorIds)
}
inline std::string* ObjectDescription::add_sensorids() {
  // @@protoc_insertion_point(field_add_mutable:Cognata.SDK.ObjectDescription.SensorIds)
  return sensorids_.Add();
}
inline void ObjectDescription::add_sensorids(const std::string& value) {
  sensorids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cognata.SDK.ObjectDescription.SensorIds)
}
inline void ObjectDescription::add_sensorids(std::string&& value) {
  sensorids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Cognata.SDK.ObjectDescription.SensorIds)
}
inline void ObjectDescription::add_sensorids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sensorids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cognata.SDK.ObjectDescription.SensorIds)
}
inline void ObjectDescription::add_sensorids(const char* value, size_t size) {
  sensorids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cognata.SDK.ObjectDescription.SensorIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ObjectDescription::sensorids() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.ObjectDescription.SensorIds)
  return sensorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ObjectDescription::mutable_sensorids() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.ObjectDescription.SensorIds)
  return &sensorids_;
}

// .Cognata.SDK.SDKBoundingBox boundingBox = 3;
inline bool ObjectDescription::has_boundingbox() const {
  return this != internal_default_instance() && boundingbox_ != nullptr;
}
inline void ObjectDescription::clear_boundingbox() {
  if (GetArenaNoVirtual() == nullptr && boundingbox_ != nullptr) {
    delete boundingbox_;
  }
  boundingbox_ = nullptr;
}
inline const ::Cognata::SDK::SDKBoundingBox& ObjectDescription::boundingbox() const {
  const ::Cognata::SDK::SDKBoundingBox* p = boundingbox_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.boundingBox)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKBoundingBox*>(
      &::Cognata::SDK::_SDKBoundingBox_default_instance_);
}
inline ::Cognata::SDK::SDKBoundingBox* ObjectDescription::release_boundingbox() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.boundingBox)
  
  ::Cognata::SDK::SDKBoundingBox* temp = boundingbox_;
  boundingbox_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKBoundingBox* ObjectDescription::mutable_boundingbox() {
  
  if (boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKBoundingBox>(GetArenaNoVirtual());
    boundingbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.boundingBox)
  return boundingbox_;
}
inline void ObjectDescription::set_allocated_boundingbox(::Cognata::SDK::SDKBoundingBox* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete boundingbox_;
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    
  } else {
    
  }
  boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ObjectDescription.boundingBox)
}

// .Cognata.SDK.Motion motion = 4;
inline bool ObjectDescription::has_motion() const {
  return this != internal_default_instance() && motion_ != nullptr;
}
inline void ObjectDescription::clear_motion() {
  if (GetArenaNoVirtual() == nullptr && motion_ != nullptr) {
    delete motion_;
  }
  motion_ = nullptr;
}
inline const ::Cognata::SDK::Motion& ObjectDescription::motion() const {
  const ::Cognata::SDK::Motion* p = motion_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.motion)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::Motion*>(
      &::Cognata::SDK::_Motion_default_instance_);
}
inline ::Cognata::SDK::Motion* ObjectDescription::release_motion() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.motion)
  
  ::Cognata::SDK::Motion* temp = motion_;
  motion_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::Motion* ObjectDescription::mutable_motion() {
  
  if (motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::Motion>(GetArenaNoVirtual());
    motion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.motion)
  return motion_;
}
inline void ObjectDescription::set_allocated_motion(::Cognata::SDK::Motion* motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete motion_;
  }
  if (motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion, submessage_arena);
    }
    
  } else {
    
  }
  motion_ = motion;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ObjectDescription.motion)
}

// string ROIType = 5;
inline void ObjectDescription::clear_roitype() {
  roitype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObjectDescription::roitype() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.ROIType)
  return roitype_.GetNoArena();
}
inline void ObjectDescription::set_roitype(const std::string& value) {
  
  roitype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.ObjectDescription.ROIType)
}
inline void ObjectDescription::set_roitype(std::string&& value) {
  
  roitype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.ObjectDescription.ROIType)
}
inline void ObjectDescription::set_roitype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roitype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.ObjectDescription.ROIType)
}
inline void ObjectDescription::set_roitype(const char* value, size_t size) {
  
  roitype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.ObjectDescription.ROIType)
}
inline std::string* ObjectDescription::mutable_roitype() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.ROIType)
  return roitype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObjectDescription::release_roitype() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.ROIType)
  
  return roitype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDescription::set_allocated_roitype(std::string* roitype) {
  if (roitype != nullptr) {
    
  } else {
    
  }
  roitype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roitype);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ObjectDescription.ROIType)
}

// string ROISubtype = 6;
inline void ObjectDescription::clear_roisubtype() {
  roisubtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObjectDescription::roisubtype() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.ROISubtype)
  return roisubtype_.GetNoArena();
}
inline void ObjectDescription::set_roisubtype(const std::string& value) {
  
  roisubtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.ObjectDescription.ROISubtype)
}
inline void ObjectDescription::set_roisubtype(std::string&& value) {
  
  roisubtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.ObjectDescription.ROISubtype)
}
inline void ObjectDescription::set_roisubtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roisubtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.ObjectDescription.ROISubtype)
}
inline void ObjectDescription::set_roisubtype(const char* value, size_t size) {
  
  roisubtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.ObjectDescription.ROISubtype)
}
inline std::string* ObjectDescription::mutable_roisubtype() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.ROISubtype)
  return roisubtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObjectDescription::release_roisubtype() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.ROISubtype)
  
  return roisubtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDescription::set_allocated_roisubtype(std::string* roisubtype) {
  if (roisubtype != nullptr) {
    
  } else {
    
  }
  roisubtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roisubtype);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ObjectDescription.ROISubtype)
}

// string animationState = 7;
inline void ObjectDescription::clear_animationstate() {
  animationstate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObjectDescription::animationstate() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.animationState)
  return animationstate_.GetNoArena();
}
inline void ObjectDescription::set_animationstate(const std::string& value) {
  
  animationstate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.ObjectDescription.animationState)
}
inline void ObjectDescription::set_animationstate(std::string&& value) {
  
  animationstate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.ObjectDescription.animationState)
}
inline void ObjectDescription::set_animationstate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  animationstate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.ObjectDescription.animationState)
}
inline void ObjectDescription::set_animationstate(const char* value, size_t size) {
  
  animationstate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.ObjectDescription.animationState)
}
inline std::string* ObjectDescription::mutable_animationstate() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.animationState)
  return animationstate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObjectDescription::release_animationstate() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.animationState)
  
  return animationstate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectDescription::set_allocated_animationstate(std::string* animationstate) {
  if (animationstate != nullptr) {
    
  } else {
    
  }
  animationstate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), animationstate);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ObjectDescription.animationState)
}

// repeated string animationStateList = 8;
inline int ObjectDescription::animationstatelist_size() const {
  return animationstatelist_.size();
}
inline void ObjectDescription::clear_animationstatelist() {
  animationstatelist_.Clear();
}
inline const std::string& ObjectDescription::animationstatelist(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.animationStateList)
  return animationstatelist_.Get(index);
}
inline std::string* ObjectDescription::mutable_animationstatelist(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.animationStateList)
  return animationstatelist_.Mutable(index);
}
inline void ObjectDescription::set_animationstatelist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Cognata.SDK.ObjectDescription.animationStateList)
  animationstatelist_.Mutable(index)->assign(value);
}
inline void ObjectDescription::set_animationstatelist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Cognata.SDK.ObjectDescription.animationStateList)
  animationstatelist_.Mutable(index)->assign(std::move(value));
}
inline void ObjectDescription::set_animationstatelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  animationstatelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.ObjectDescription.animationStateList)
}
inline void ObjectDescription::set_animationstatelist(int index, const char* value, size_t size) {
  animationstatelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.ObjectDescription.animationStateList)
}
inline std::string* ObjectDescription::add_animationstatelist() {
  // @@protoc_insertion_point(field_add_mutable:Cognata.SDK.ObjectDescription.animationStateList)
  return animationstatelist_.Add();
}
inline void ObjectDescription::add_animationstatelist(const std::string& value) {
  animationstatelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cognata.SDK.ObjectDescription.animationStateList)
}
inline void ObjectDescription::add_animationstatelist(std::string&& value) {
  animationstatelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Cognata.SDK.ObjectDescription.animationStateList)
}
inline void ObjectDescription::add_animationstatelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  animationstatelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cognata.SDK.ObjectDescription.animationStateList)
}
inline void ObjectDescription::add_animationstatelist(const char* value, size_t size) {
  animationstatelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cognata.SDK.ObjectDescription.animationStateList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ObjectDescription::animationstatelist() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.ObjectDescription.animationStateList)
  return animationstatelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ObjectDescription::mutable_animationstatelist() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.ObjectDescription.animationStateList)
  return &animationstatelist_;
}

// .Cognata.SDK.Vehicle vehicle = 20;
inline bool ObjectDescription::has_vehicle() const {
  return ObjectType_case() == kVehicle;
}
inline void ObjectDescription::set_has_vehicle() {
  _oneof_case_[0] = kVehicle;
}
inline void ObjectDescription::clear_vehicle() {
  if (has_vehicle()) {
    delete ObjectType_.vehicle_;
    clear_has_ObjectType();
  }
}
inline ::Cognata::SDK::Vehicle* ObjectDescription::release_vehicle() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.vehicle)
  if (has_vehicle()) {
    clear_has_ObjectType();
      ::Cognata::SDK::Vehicle* temp = ObjectType_.vehicle_;
    ObjectType_.vehicle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::Vehicle& ObjectDescription::vehicle() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.vehicle)
  return has_vehicle()
      ? *ObjectType_.vehicle_
      : *reinterpret_cast< ::Cognata::SDK::Vehicle*>(&::Cognata::SDK::_Vehicle_default_instance_);
}
inline ::Cognata::SDK::Vehicle* ObjectDescription::mutable_vehicle() {
  if (!has_vehicle()) {
    clear_ObjectType();
    set_has_vehicle();
    ObjectType_.vehicle_ = CreateMaybeMessage< ::Cognata::SDK::Vehicle >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.vehicle)
  return ObjectType_.vehicle_;
}

// .Cognata.SDK.Pedestrian pedestrian = 21;
inline bool ObjectDescription::has_pedestrian() const {
  return ObjectType_case() == kPedestrian;
}
inline void ObjectDescription::set_has_pedestrian() {
  _oneof_case_[0] = kPedestrian;
}
inline void ObjectDescription::clear_pedestrian() {
  if (has_pedestrian()) {
    delete ObjectType_.pedestrian_;
    clear_has_ObjectType();
  }
}
inline ::Cognata::SDK::Pedestrian* ObjectDescription::release_pedestrian() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.pedestrian)
  if (has_pedestrian()) {
    clear_has_ObjectType();
      ::Cognata::SDK::Pedestrian* temp = ObjectType_.pedestrian_;
    ObjectType_.pedestrian_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::Pedestrian& ObjectDescription::pedestrian() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.pedestrian)
  return has_pedestrian()
      ? *ObjectType_.pedestrian_
      : *reinterpret_cast< ::Cognata::SDK::Pedestrian*>(&::Cognata::SDK::_Pedestrian_default_instance_);
}
inline ::Cognata::SDK::Pedestrian* ObjectDescription::mutable_pedestrian() {
  if (!has_pedestrian()) {
    clear_ObjectType();
    set_has_pedestrian();
    ObjectType_.pedestrian_ = CreateMaybeMessage< ::Cognata::SDK::Pedestrian >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.pedestrian)
  return ObjectType_.pedestrian_;
}

// .Cognata.SDK.TrafficLight trafficLight = 22;
inline bool ObjectDescription::has_trafficlight() const {
  return ObjectType_case() == kTrafficLight;
}
inline void ObjectDescription::set_has_trafficlight() {
  _oneof_case_[0] = kTrafficLight;
}
inline void ObjectDescription::clear_trafficlight() {
  if (has_trafficlight()) {
    delete ObjectType_.trafficlight_;
    clear_has_ObjectType();
  }
}
inline ::Cognata::SDK::TrafficLight* ObjectDescription::release_trafficlight() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.trafficLight)
  if (has_trafficlight()) {
    clear_has_ObjectType();
      ::Cognata::SDK::TrafficLight* temp = ObjectType_.trafficlight_;
    ObjectType_.trafficlight_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::TrafficLight& ObjectDescription::trafficlight() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.trafficLight)
  return has_trafficlight()
      ? *ObjectType_.trafficlight_
      : *reinterpret_cast< ::Cognata::SDK::TrafficLight*>(&::Cognata::SDK::_TrafficLight_default_instance_);
}
inline ::Cognata::SDK::TrafficLight* ObjectDescription::mutable_trafficlight() {
  if (!has_trafficlight()) {
    clear_ObjectType();
    set_has_trafficlight();
    ObjectType_.trafficlight_ = CreateMaybeMessage< ::Cognata::SDK::TrafficLight >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.trafficLight)
  return ObjectType_.trafficlight_;
}

// .Cognata.SDK.TrafficSign trafficSign = 23;
inline bool ObjectDescription::has_trafficsign() const {
  return ObjectType_case() == kTrafficSign;
}
inline void ObjectDescription::set_has_trafficsign() {
  _oneof_case_[0] = kTrafficSign;
}
inline void ObjectDescription::clear_trafficsign() {
  if (has_trafficsign()) {
    delete ObjectType_.trafficsign_;
    clear_has_ObjectType();
  }
}
inline ::Cognata::SDK::TrafficSign* ObjectDescription::release_trafficsign() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.trafficSign)
  if (has_trafficsign()) {
    clear_has_ObjectType();
      ::Cognata::SDK::TrafficSign* temp = ObjectType_.trafficsign_;
    ObjectType_.trafficsign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::TrafficSign& ObjectDescription::trafficsign() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.trafficSign)
  return has_trafficsign()
      ? *ObjectType_.trafficsign_
      : *reinterpret_cast< ::Cognata::SDK::TrafficSign*>(&::Cognata::SDK::_TrafficSign_default_instance_);
}
inline ::Cognata::SDK::TrafficSign* ObjectDescription::mutable_trafficsign() {
  if (!has_trafficsign()) {
    clear_ObjectType();
    set_has_trafficsign();
    ObjectType_.trafficsign_ = CreateMaybeMessage< ::Cognata::SDK::TrafficSign >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.trafficSign)
  return ObjectType_.trafficsign_;
}

// .Cognata.SDK.LaneMark laneMark = 24;
inline bool ObjectDescription::has_lanemark() const {
  return ObjectType_case() == kLaneMark;
}
inline void ObjectDescription::set_has_lanemark() {
  _oneof_case_[0] = kLaneMark;
}
inline void ObjectDescription::clear_lanemark() {
  if (has_lanemark()) {
    delete ObjectType_.lanemark_;
    clear_has_ObjectType();
  }
}
inline ::Cognata::SDK::LaneMark* ObjectDescription::release_lanemark() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.laneMark)
  if (has_lanemark()) {
    clear_has_ObjectType();
      ::Cognata::SDK::LaneMark* temp = ObjectType_.lanemark_;
    ObjectType_.lanemark_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::LaneMark& ObjectDescription::lanemark() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.laneMark)
  return has_lanemark()
      ? *ObjectType_.lanemark_
      : *reinterpret_cast< ::Cognata::SDK::LaneMark*>(&::Cognata::SDK::_LaneMark_default_instance_);
}
inline ::Cognata::SDK::LaneMark* ObjectDescription::mutable_lanemark() {
  if (!has_lanemark()) {
    clear_ObjectType();
    set_has_lanemark();
    ObjectType_.lanemark_ = CreateMaybeMessage< ::Cognata::SDK::LaneMark >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.laneMark)
  return ObjectType_.lanemark_;
}

// .Cognata.SDK.Annotation annotation = 25;
inline bool ObjectDescription::has_annotation() const {
  return ObjectType_case() == kAnnotation;
}
inline void ObjectDescription::set_has_annotation() {
  _oneof_case_[0] = kAnnotation;
}
inline void ObjectDescription::clear_annotation() {
  if (has_annotation()) {
    delete ObjectType_.annotation_;
    clear_has_ObjectType();
  }
}
inline ::Cognata::SDK::Annotation* ObjectDescription::release_annotation() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.annotation)
  if (has_annotation()) {
    clear_has_ObjectType();
      ::Cognata::SDK::Annotation* temp = ObjectType_.annotation_;
    ObjectType_.annotation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::Annotation& ObjectDescription::annotation() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.annotation)
  return has_annotation()
      ? *ObjectType_.annotation_
      : *reinterpret_cast< ::Cognata::SDK::Annotation*>(&::Cognata::SDK::_Annotation_default_instance_);
}
inline ::Cognata::SDK::Annotation* ObjectDescription::mutable_annotation() {
  if (!has_annotation()) {
    clear_ObjectType();
    set_has_annotation();
    ObjectType_.annotation_ = CreateMaybeMessage< ::Cognata::SDK::Annotation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.annotation)
  return ObjectType_.annotation_;
}

// .Cognata.SDK.Animal animal = 26;
inline bool ObjectDescription::has_animal() const {
  return ObjectType_case() == kAnimal;
}
inline void ObjectDescription::set_has_animal() {
  _oneof_case_[0] = kAnimal;
}
inline void ObjectDescription::clear_animal() {
  if (has_animal()) {
    delete ObjectType_.animal_;
    clear_has_ObjectType();
  }
}
inline ::Cognata::SDK::Animal* ObjectDescription::release_animal() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.animal)
  if (has_animal()) {
    clear_has_ObjectType();
      ::Cognata::SDK::Animal* temp = ObjectType_.animal_;
    ObjectType_.animal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::Animal& ObjectDescription::animal() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.animal)
  return has_animal()
      ? *ObjectType_.animal_
      : *reinterpret_cast< ::Cognata::SDK::Animal*>(&::Cognata::SDK::_Animal_default_instance_);
}
inline ::Cognata::SDK::Animal* ObjectDescription::mutable_animal() {
  if (!has_animal()) {
    clear_ObjectType();
    set_has_animal();
    ObjectType_.animal_ = CreateMaybeMessage< ::Cognata::SDK::Animal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.animal)
  return ObjectType_.animal_;
}

// .Cognata.SDK.GeneralObject generalObject = 27;
inline bool ObjectDescription::has_generalobject() const {
  return ObjectType_case() == kGeneralObject;
}
inline void ObjectDescription::set_has_generalobject() {
  _oneof_case_[0] = kGeneralObject;
}
inline void ObjectDescription::clear_generalobject() {
  if (has_generalobject()) {
    delete ObjectType_.generalobject_;
    clear_has_ObjectType();
  }
}
inline ::Cognata::SDK::GeneralObject* ObjectDescription::release_generalobject() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.generalObject)
  if (has_generalobject()) {
    clear_has_ObjectType();
      ::Cognata::SDK::GeneralObject* temp = ObjectType_.generalobject_;
    ObjectType_.generalobject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::GeneralObject& ObjectDescription::generalobject() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.generalObject)
  return has_generalobject()
      ? *ObjectType_.generalobject_
      : *reinterpret_cast< ::Cognata::SDK::GeneralObject*>(&::Cognata::SDK::_GeneralObject_default_instance_);
}
inline ::Cognata::SDK::GeneralObject* ObjectDescription::mutable_generalobject() {
  if (!has_generalobject()) {
    clear_ObjectType();
    set_has_generalobject();
    ObjectType_.generalobject_ = CreateMaybeMessage< ::Cognata::SDK::GeneralObject >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.generalObject)
  return ObjectType_.generalobject_;
}

// .Cognata.SDK.ParkingSlot parkingSlot = 28;
inline bool ObjectDescription::has_parkingslot() const {
  return ObjectType_case() == kParkingSlot;
}
inline void ObjectDescription::set_has_parkingslot() {
  _oneof_case_[0] = kParkingSlot;
}
inline void ObjectDescription::clear_parkingslot() {
  if (has_parkingslot()) {
    delete ObjectType_.parkingslot_;
    clear_has_ObjectType();
  }
}
inline ::Cognata::SDK::ParkingSlot* ObjectDescription::release_parkingslot() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ObjectDescription.parkingSlot)
  if (has_parkingslot()) {
    clear_has_ObjectType();
      ::Cognata::SDK::ParkingSlot* temp = ObjectType_.parkingslot_;
    ObjectType_.parkingslot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Cognata::SDK::ParkingSlot& ObjectDescription::parkingslot() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ObjectDescription.parkingSlot)
  return has_parkingslot()
      ? *ObjectType_.parkingslot_
      : *reinterpret_cast< ::Cognata::SDK::ParkingSlot*>(&::Cognata::SDK::_ParkingSlot_default_instance_);
}
inline ::Cognata::SDK::ParkingSlot* ObjectDescription::mutable_parkingslot() {
  if (!has_parkingslot()) {
    clear_ObjectType();
    set_has_parkingslot();
    ObjectType_.parkingslot_ = CreateMaybeMessage< ::Cognata::SDK::ParkingSlot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ObjectDescription.parkingSlot)
  return ObjectType_.parkingslot_;
}

inline bool ObjectDescription::has_ObjectType() const {
  return ObjectType_case() != OBJECTTYPE_NOT_SET;
}
inline void ObjectDescription::clear_has_ObjectType() {
  _oneof_case_[0] = OBJECTTYPE_NOT_SET;
}
inline ObjectDescription::ObjectTypeCase ObjectDescription::ObjectType_case() const {
  return ObjectDescription::ObjectTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ParkingSlot

// .Cognata.SDK.ParkingSlot.State state = 1;
inline void ParkingSlot::clear_state() {
  state_ = 0;
}
inline ::Cognata::SDK::ParkingSlot_State ParkingSlot::state() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ParkingSlot.state)
  return static_cast< ::Cognata::SDK::ParkingSlot_State >(state_);
}
inline void ParkingSlot::set_state(::Cognata::SDK::ParkingSlot_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.ParkingSlot.state)
}

// .Cognata.SDK.Vertices vertices = 2;
inline bool ParkingSlot::has_vertices() const {
  return this != internal_default_instance() && vertices_ != nullptr;
}
inline void ParkingSlot::clear_vertices() {
  if (GetArenaNoVirtual() == nullptr && vertices_ != nullptr) {
    delete vertices_;
  }
  vertices_ = nullptr;
}
inline const ::Cognata::SDK::Vertices& ParkingSlot::vertices() const {
  const ::Cognata::SDK::Vertices* p = vertices_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.ParkingSlot.vertices)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::Vertices*>(
      &::Cognata::SDK::_Vertices_default_instance_);
}
inline ::Cognata::SDK::Vertices* ParkingSlot::release_vertices() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.ParkingSlot.vertices)
  
  ::Cognata::SDK::Vertices* temp = vertices_;
  vertices_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::Vertices* ParkingSlot::mutable_vertices() {
  
  if (vertices_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::Vertices>(GetArenaNoVirtual());
    vertices_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ParkingSlot.vertices)
  return vertices_;
}
inline void ParkingSlot::set_allocated_vertices(::Cognata::SDK::Vertices* vertices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vertices_;
  }
  if (vertices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vertices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertices, submessage_arena);
    }
    
  } else {
    
  }
  vertices_ = vertices;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.ParkingSlot.vertices)
}

// -------------------------------------------------------------------

// Vertices

// .Cognata.SDK.SDKVector3 vertex1 = 1;
inline bool Vertices::has_vertex1() const {
  return this != internal_default_instance() && vertex1_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Vertices::vertex1() const {
  const ::Cognata::SDK::SDKVector3* p = vertex1_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vertices.vertex1)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Vertices::release_vertex1() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Vertices.vertex1)
  
  ::Cognata::SDK::SDKVector3* temp = vertex1_;
  vertex1_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Vertices::mutable_vertex1() {
  
  if (vertex1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    vertex1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Vertices.vertex1)
  return vertex1_;
}
inline void Vertices::set_allocated_vertex1(::Cognata::SDK::SDKVector3* vertex1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertex1_);
  }
  if (vertex1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vertex1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertex1, submessage_arena);
    }
    
  } else {
    
  }
  vertex1_ = vertex1;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Vertices.vertex1)
}

// .Cognata.SDK.SDKVector3 vertex2 = 2;
inline bool Vertices::has_vertex2() const {
  return this != internal_default_instance() && vertex2_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Vertices::vertex2() const {
  const ::Cognata::SDK::SDKVector3* p = vertex2_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vertices.vertex2)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Vertices::release_vertex2() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Vertices.vertex2)
  
  ::Cognata::SDK::SDKVector3* temp = vertex2_;
  vertex2_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Vertices::mutable_vertex2() {
  
  if (vertex2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    vertex2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Vertices.vertex2)
  return vertex2_;
}
inline void Vertices::set_allocated_vertex2(::Cognata::SDK::SDKVector3* vertex2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertex2_);
  }
  if (vertex2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vertex2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertex2, submessage_arena);
    }
    
  } else {
    
  }
  vertex2_ = vertex2;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Vertices.vertex2)
}

// .Cognata.SDK.SDKVector3 vertex3 = 3;
inline bool Vertices::has_vertex3() const {
  return this != internal_default_instance() && vertex3_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Vertices::vertex3() const {
  const ::Cognata::SDK::SDKVector3* p = vertex3_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vertices.vertex3)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Vertices::release_vertex3() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Vertices.vertex3)
  
  ::Cognata::SDK::SDKVector3* temp = vertex3_;
  vertex3_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Vertices::mutable_vertex3() {
  
  if (vertex3_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    vertex3_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Vertices.vertex3)
  return vertex3_;
}
inline void Vertices::set_allocated_vertex3(::Cognata::SDK::SDKVector3* vertex3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertex3_);
  }
  if (vertex3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vertex3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertex3, submessage_arena);
    }
    
  } else {
    
  }
  vertex3_ = vertex3;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Vertices.vertex3)
}

// .Cognata.SDK.SDKVector3 vertex4 = 4;
inline bool Vertices::has_vertex4() const {
  return this != internal_default_instance() && vertex4_ != nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Vertices::vertex4() const {
  const ::Cognata::SDK::SDKVector3* p = vertex4_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Vertices.vertex4)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Vertices::release_vertex4() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Vertices.vertex4)
  
  ::Cognata::SDK::SDKVector3* temp = vertex4_;
  vertex4_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Vertices::mutable_vertex4() {
  
  if (vertex4_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    vertex4_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Vertices.vertex4)
  return vertex4_;
}
inline void Vertices::set_allocated_vertex4(::Cognata::SDK::SDKVector3* vertex4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertex4_);
  }
  if (vertex4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vertex4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertex4, submessage_arena);
    }
    
  } else {
    
  }
  vertex4_ = vertex4;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Vertices.vertex4)
}

// -------------------------------------------------------------------

// ROIOutput

// repeated .Cognata.SDK.ObjectDescription objectsList = 1;
inline int ROIOutput::objectslist_size() const {
  return objectslist_.size();
}
inline void ROIOutput::clear_objectslist() {
  objectslist_.Clear();
}
inline ::Cognata::SDK::ObjectDescription* ROIOutput::mutable_objectslist(int index) {
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.ROIOutput.objectsList)
  return objectslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::ObjectDescription >*
ROIOutput::mutable_objectslist() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.ROIOutput.objectsList)
  return &objectslist_;
}
inline const ::Cognata::SDK::ObjectDescription& ROIOutput::objectslist(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ROIOutput.objectsList)
  return objectslist_.Get(index);
}
inline ::Cognata::SDK::ObjectDescription* ROIOutput::add_objectslist() {
  // @@protoc_insertion_point(field_add:Cognata.SDK.ROIOutput.objectsList)
  return objectslist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cognata::SDK::ObjectDescription >&
ROIOutput::objectslist() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.ROIOutput.objectsList)
  return objectslist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SDK
}  // namespace Cognata

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Cognata::SDK::Vehicle_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::Vehicle_Type>() {
  return ::Cognata::SDK::Vehicle_Type_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::Vehicle_Role> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::Vehicle_Role>() {
  return ::Cognata::SDK::Vehicle_Role_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::TrafficLight_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::TrafficLight_Status>() {
  return ::Cognata::SDK::TrafficLight_Status_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::ParkingSlot_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::ParkingSlot_State>() {
  return ::Cognata::SDK::ParkingSlot_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ROIOutput_2eproto
