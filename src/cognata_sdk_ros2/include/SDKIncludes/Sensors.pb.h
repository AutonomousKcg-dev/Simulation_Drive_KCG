// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sensors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Sensors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Sensors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Sensors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Sensors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Sensors_2eproto;
namespace Cognata {
namespace SDK {
class CarTelemetriesConfig;
class CarTelemetriesConfigDefaultTypeInternal;
extern CarTelemetriesConfigDefaultTypeInternal _CarTelemetriesConfig_default_instance_;
class DOGTConfig;
class DOGTConfigDefaultTypeInternal;
extern DOGTConfigDefaultTypeInternal _DOGTConfig_default_instance_;
class DepthCameraConfig;
class DepthCameraConfigDefaultTypeInternal;
extern DepthCameraConfigDefaultTypeInternal _DepthCameraConfig_default_instance_;
class E2CConfig;
class E2CConfigDefaultTypeInternal;
extern E2CConfigDefaultTypeInternal _E2CConfig_default_instance_;
class GPSConfig;
class GPSConfigDefaultTypeInternal;
extern GPSConfigDefaultTypeInternal _GPSConfig_default_instance_;
class LaneDetectorConfig;
class LaneDetectorConfigDefaultTypeInternal;
extern LaneDetectorConfigDefaultTypeInternal _LaneDetectorConfig_default_instance_;
class LidarConfig;
class LidarConfigDefaultTypeInternal;
extern LidarConfigDefaultTypeInternal _LidarConfig_default_instance_;
class LidarMask;
class LidarMaskDefaultTypeInternal;
extern LidarMaskDefaultTypeInternal _LidarMask_default_instance_;
class RGBCameraConfig;
class RGBCameraConfigDefaultTypeInternal;
extern RGBCameraConfigDefaultTypeInternal _RGBCameraConfig_default_instance_;
class ROIConfig;
class ROIConfigDefaultTypeInternal;
extern ROIConfigDefaultTypeInternal _ROIConfig_default_instance_;
class RadarConfig;
class RadarConfigDefaultTypeInternal;
extern RadarConfigDefaultTypeInternal _RadarConfig_default_instance_;
class SLClassCameraConfig;
class SLClassCameraConfigDefaultTypeInternal;
extern SLClassCameraConfigDefaultTypeInternal _SLClassCameraConfig_default_instance_;
class SLInstanceCameraConfig;
class SLInstanceCameraConfigDefaultTypeInternal;
extern SLInstanceCameraConfigDefaultTypeInternal _SLInstanceCameraConfig_default_instance_;
class SLMaterialCameraConfig;
class SLMaterialCameraConfigDefaultTypeInternal;
extern SLMaterialCameraConfigDefaultTypeInternal _SLMaterialCameraConfig_default_instance_;
class SLStructureCameraConfig;
class SLStructureCameraConfigDefaultTypeInternal;
extern SLStructureCameraConfigDefaultTypeInternal _SLStructureCameraConfig_default_instance_;
class ThermalCameraConfig;
class ThermalCameraConfigDefaultTypeInternal;
extern ThermalCameraConfigDefaultTypeInternal _ThermalCameraConfig_default_instance_;
}  // namespace SDK
}  // namespace Cognata
PROTOBUF_NAMESPACE_OPEN
template<> ::Cognata::SDK::CarTelemetriesConfig* Arena::CreateMaybeMessage<::Cognata::SDK::CarTelemetriesConfig>(Arena*);
template<> ::Cognata::SDK::DOGTConfig* Arena::CreateMaybeMessage<::Cognata::SDK::DOGTConfig>(Arena*);
template<> ::Cognata::SDK::DepthCameraConfig* Arena::CreateMaybeMessage<::Cognata::SDK::DepthCameraConfig>(Arena*);
template<> ::Cognata::SDK::E2CConfig* Arena::CreateMaybeMessage<::Cognata::SDK::E2CConfig>(Arena*);
template<> ::Cognata::SDK::GPSConfig* Arena::CreateMaybeMessage<::Cognata::SDK::GPSConfig>(Arena*);
template<> ::Cognata::SDK::LaneDetectorConfig* Arena::CreateMaybeMessage<::Cognata::SDK::LaneDetectorConfig>(Arena*);
template<> ::Cognata::SDK::LidarConfig* Arena::CreateMaybeMessage<::Cognata::SDK::LidarConfig>(Arena*);
template<> ::Cognata::SDK::LidarMask* Arena::CreateMaybeMessage<::Cognata::SDK::LidarMask>(Arena*);
template<> ::Cognata::SDK::RGBCameraConfig* Arena::CreateMaybeMessage<::Cognata::SDK::RGBCameraConfig>(Arena*);
template<> ::Cognata::SDK::ROIConfig* Arena::CreateMaybeMessage<::Cognata::SDK::ROIConfig>(Arena*);
template<> ::Cognata::SDK::RadarConfig* Arena::CreateMaybeMessage<::Cognata::SDK::RadarConfig>(Arena*);
template<> ::Cognata::SDK::SLClassCameraConfig* Arena::CreateMaybeMessage<::Cognata::SDK::SLClassCameraConfig>(Arena*);
template<> ::Cognata::SDK::SLInstanceCameraConfig* Arena::CreateMaybeMessage<::Cognata::SDK::SLInstanceCameraConfig>(Arena*);
template<> ::Cognata::SDK::SLMaterialCameraConfig* Arena::CreateMaybeMessage<::Cognata::SDK::SLMaterialCameraConfig>(Arena*);
template<> ::Cognata::SDK::SLStructureCameraConfig* Arena::CreateMaybeMessage<::Cognata::SDK::SLStructureCameraConfig>(Arena*);
template<> ::Cognata::SDK::ThermalCameraConfig* Arena::CreateMaybeMessage<::Cognata::SDK::ThermalCameraConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Cognata {
namespace SDK {

enum DepthCameraDataType : int {
  DCH_Float32 = 0,
  DCS_UInt16 = 1,
  DepthCameraDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DepthCameraDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DepthCameraDataType_IsValid(int value);
constexpr DepthCameraDataType DepthCameraDataType_MIN = DCH_Float32;
constexpr DepthCameraDataType DepthCameraDataType_MAX = DCS_UInt16;
constexpr int DepthCameraDataType_ARRAYSIZE = DepthCameraDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DepthCameraDataType_descriptor();
template<typename T>
inline const std::string& DepthCameraDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DepthCameraDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DepthCameraDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DepthCameraDataType_descriptor(), enum_t_value);
}
inline bool DepthCameraDataType_Parse(
    const std::string& name, DepthCameraDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DepthCameraDataType>(
    DepthCameraDataType_descriptor(), name, value);
}
enum LidarDataType : int {
  ShortLidarFile = 0,
  LongLidarFile = 1,
  LidarDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LidarDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LidarDataType_IsValid(int value);
constexpr LidarDataType LidarDataType_MIN = ShortLidarFile;
constexpr LidarDataType LidarDataType_MAX = LongLidarFile;
constexpr int LidarDataType_ARRAYSIZE = LidarDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LidarDataType_descriptor();
template<typename T>
inline const std::string& LidarDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LidarDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LidarDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LidarDataType_descriptor(), enum_t_value);
}
inline bool LidarDataType_Parse(
    const std::string& name, LidarDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LidarDataType>(
    LidarDataType_descriptor(), name, value);
}
enum ThermalCameraFormat : int {
  TRM_14Bit = 0,
  TRM_8Bit = 1,
  ThermalCameraFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ThermalCameraFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ThermalCameraFormat_IsValid(int value);
constexpr ThermalCameraFormat ThermalCameraFormat_MIN = TRM_14Bit;
constexpr ThermalCameraFormat ThermalCameraFormat_MAX = TRM_8Bit;
constexpr int ThermalCameraFormat_ARRAYSIZE = ThermalCameraFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThermalCameraFormat_descriptor();
template<typename T>
inline const std::string& ThermalCameraFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ThermalCameraFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ThermalCameraFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ThermalCameraFormat_descriptor(), enum_t_value);
}
inline bool ThermalCameraFormat_Parse(
    const std::string& name, ThermalCameraFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ThermalCameraFormat>(
    ThermalCameraFormat_descriptor(), name, value);
}
// ===================================================================

class RGBCameraConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RGBCameraConfig) */ {
 public:
  RGBCameraConfig();
  virtual ~RGBCameraConfig();

  RGBCameraConfig(const RGBCameraConfig& from);
  RGBCameraConfig(RGBCameraConfig&& from) noexcept
    : RGBCameraConfig() {
    *this = ::std::move(from);
  }

  inline RGBCameraConfig& operator=(const RGBCameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RGBCameraConfig& operator=(RGBCameraConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RGBCameraConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RGBCameraConfig* internal_default_instance() {
    return reinterpret_cast<const RGBCameraConfig*>(
               &_RGBCameraConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RGBCameraConfig* other);
  friend void swap(RGBCameraConfig& a, RGBCameraConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RGBCameraConfig* New() const final {
    return CreateMaybeMessage<RGBCameraConfig>(nullptr);
  }

  RGBCameraConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RGBCameraConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RGBCameraConfig& from);
  void MergeFrom(const RGBCameraConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RGBCameraConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RGBCameraConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float HFov = 3;
  void clear_hfov();
  static const int kHFovFieldNumber = 3;
  float hfov() const;
  void set_hfov(float value);

  // float VFov = 4;
  void clear_vfov();
  static const int kVFovFieldNumber = 4;
  float vfov() const;
  void set_vfov(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RGBCameraConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  float hfov_;
  float vfov_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class DepthCameraConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.DepthCameraConfig) */ {
 public:
  DepthCameraConfig();
  virtual ~DepthCameraConfig();

  DepthCameraConfig(const DepthCameraConfig& from);
  DepthCameraConfig(DepthCameraConfig&& from) noexcept
    : DepthCameraConfig() {
    *this = ::std::move(from);
  }

  inline DepthCameraConfig& operator=(const DepthCameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthCameraConfig& operator=(DepthCameraConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthCameraConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthCameraConfig* internal_default_instance() {
    return reinterpret_cast<const DepthCameraConfig*>(
               &_DepthCameraConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DepthCameraConfig* other);
  friend void swap(DepthCameraConfig& a, DepthCameraConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DepthCameraConfig* New() const final {
    return CreateMaybeMessage<DepthCameraConfig>(nullptr);
  }

  DepthCameraConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthCameraConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthCameraConfig& from);
  void MergeFrom(const DepthCameraConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthCameraConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.DepthCameraConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float HFov = 3;
  void clear_hfov();
  static const int kHFovFieldNumber = 3;
  float hfov() const;
  void set_hfov(float value);

  // float VFov = 4;
  void clear_vfov();
  static const int kVFovFieldNumber = 4;
  float vfov() const;
  void set_vfov(float value);

  // .Cognata.SDK.DepthCameraDataType DCdataType = 5;
  void clear_dcdatatype();
  static const int kDCdataTypeFieldNumber = 5;
  ::Cognata::SDK::DepthCameraDataType dcdatatype() const;
  void set_dcdatatype(::Cognata::SDK::DepthCameraDataType value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.DepthCameraConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  float hfov_;
  float vfov_;
  int dcdatatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class SLClassCameraConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SLClassCameraConfig) */ {
 public:
  SLClassCameraConfig();
  virtual ~SLClassCameraConfig();

  SLClassCameraConfig(const SLClassCameraConfig& from);
  SLClassCameraConfig(SLClassCameraConfig&& from) noexcept
    : SLClassCameraConfig() {
    *this = ::std::move(from);
  }

  inline SLClassCameraConfig& operator=(const SLClassCameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLClassCameraConfig& operator=(SLClassCameraConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLClassCameraConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLClassCameraConfig* internal_default_instance() {
    return reinterpret_cast<const SLClassCameraConfig*>(
               &_SLClassCameraConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SLClassCameraConfig* other);
  friend void swap(SLClassCameraConfig& a, SLClassCameraConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLClassCameraConfig* New() const final {
    return CreateMaybeMessage<SLClassCameraConfig>(nullptr);
  }

  SLClassCameraConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLClassCameraConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLClassCameraConfig& from);
  void MergeFrom(const SLClassCameraConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLClassCameraConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SLClassCameraConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float HFov = 3;
  void clear_hfov();
  static const int kHFovFieldNumber = 3;
  float hfov() const;
  void set_hfov(float value);

  // float VFov = 4;
  void clear_vfov();
  static const int kVFovFieldNumber = 4;
  float vfov() const;
  void set_vfov(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SLClassCameraConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  float hfov_;
  float vfov_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class SLInstanceCameraConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SLInstanceCameraConfig) */ {
 public:
  SLInstanceCameraConfig();
  virtual ~SLInstanceCameraConfig();

  SLInstanceCameraConfig(const SLInstanceCameraConfig& from);
  SLInstanceCameraConfig(SLInstanceCameraConfig&& from) noexcept
    : SLInstanceCameraConfig() {
    *this = ::std::move(from);
  }

  inline SLInstanceCameraConfig& operator=(const SLInstanceCameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLInstanceCameraConfig& operator=(SLInstanceCameraConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLInstanceCameraConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLInstanceCameraConfig* internal_default_instance() {
    return reinterpret_cast<const SLInstanceCameraConfig*>(
               &_SLInstanceCameraConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SLInstanceCameraConfig* other);
  friend void swap(SLInstanceCameraConfig& a, SLInstanceCameraConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLInstanceCameraConfig* New() const final {
    return CreateMaybeMessage<SLInstanceCameraConfig>(nullptr);
  }

  SLInstanceCameraConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLInstanceCameraConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLInstanceCameraConfig& from);
  void MergeFrom(const SLInstanceCameraConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLInstanceCameraConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SLInstanceCameraConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float HFov = 3;
  void clear_hfov();
  static const int kHFovFieldNumber = 3;
  float hfov() const;
  void set_hfov(float value);

  // float VFov = 4;
  void clear_vfov();
  static const int kVFovFieldNumber = 4;
  float vfov() const;
  void set_vfov(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SLInstanceCameraConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  float hfov_;
  float vfov_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class SLMaterialCameraConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SLMaterialCameraConfig) */ {
 public:
  SLMaterialCameraConfig();
  virtual ~SLMaterialCameraConfig();

  SLMaterialCameraConfig(const SLMaterialCameraConfig& from);
  SLMaterialCameraConfig(SLMaterialCameraConfig&& from) noexcept
    : SLMaterialCameraConfig() {
    *this = ::std::move(from);
  }

  inline SLMaterialCameraConfig& operator=(const SLMaterialCameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLMaterialCameraConfig& operator=(SLMaterialCameraConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLMaterialCameraConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLMaterialCameraConfig* internal_default_instance() {
    return reinterpret_cast<const SLMaterialCameraConfig*>(
               &_SLMaterialCameraConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SLMaterialCameraConfig* other);
  friend void swap(SLMaterialCameraConfig& a, SLMaterialCameraConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLMaterialCameraConfig* New() const final {
    return CreateMaybeMessage<SLMaterialCameraConfig>(nullptr);
  }

  SLMaterialCameraConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLMaterialCameraConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLMaterialCameraConfig& from);
  void MergeFrom(const SLMaterialCameraConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLMaterialCameraConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SLMaterialCameraConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float HFov = 3;
  void clear_hfov();
  static const int kHFovFieldNumber = 3;
  float hfov() const;
  void set_hfov(float value);

  // float VFov = 4;
  void clear_vfov();
  static const int kVFovFieldNumber = 4;
  float vfov() const;
  void set_vfov(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SLMaterialCameraConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  float hfov_;
  float vfov_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class SLStructureCameraConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SLStructureCameraConfig) */ {
 public:
  SLStructureCameraConfig();
  virtual ~SLStructureCameraConfig();

  SLStructureCameraConfig(const SLStructureCameraConfig& from);
  SLStructureCameraConfig(SLStructureCameraConfig&& from) noexcept
    : SLStructureCameraConfig() {
    *this = ::std::move(from);
  }

  inline SLStructureCameraConfig& operator=(const SLStructureCameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLStructureCameraConfig& operator=(SLStructureCameraConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLStructureCameraConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLStructureCameraConfig* internal_default_instance() {
    return reinterpret_cast<const SLStructureCameraConfig*>(
               &_SLStructureCameraConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SLStructureCameraConfig* other);
  friend void swap(SLStructureCameraConfig& a, SLStructureCameraConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLStructureCameraConfig* New() const final {
    return CreateMaybeMessage<SLStructureCameraConfig>(nullptr);
  }

  SLStructureCameraConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLStructureCameraConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLStructureCameraConfig& from);
  void MergeFrom(const SLStructureCameraConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLStructureCameraConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SLStructureCameraConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float HFov = 3;
  void clear_hfov();
  static const int kHFovFieldNumber = 3;
  float hfov() const;
  void set_hfov(float value);

  // float VFov = 4;
  void clear_vfov();
  static const int kVFovFieldNumber = 4;
  float vfov() const;
  void set_vfov(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SLStructureCameraConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  float hfov_;
  float vfov_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class LidarConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.LidarConfig) */ {
 public:
  LidarConfig();
  virtual ~LidarConfig();

  LidarConfig(const LidarConfig& from);
  LidarConfig(LidarConfig&& from) noexcept
    : LidarConfig() {
    *this = ::std::move(from);
  }

  inline LidarConfig& operator=(const LidarConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarConfig& operator=(LidarConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarConfig* internal_default_instance() {
    return reinterpret_cast<const LidarConfig*>(
               &_LidarConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LidarConfig* other);
  friend void swap(LidarConfig& a, LidarConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarConfig* New() const final {
    return CreateMaybeMessage<LidarConfig>(nullptr);
  }

  LidarConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarConfig& from);
  void MergeFrom(const LidarConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.LidarConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.LidarMask mask = 1;
  bool has_mask() const;
  void clear_mask();
  static const int kMaskFieldNumber = 1;
  const ::Cognata::SDK::LidarMask& mask() const;
  ::Cognata::SDK::LidarMask* release_mask();
  ::Cognata::SDK::LidarMask* mutable_mask();
  void set_allocated_mask(::Cognata::SDK::LidarMask* mask);

  // float HFov = 2;
  void clear_hfov();
  static const int kHFovFieldNumber = 2;
  float hfov() const;
  void set_hfov(float value);

  // float VFov = 3;
  void clear_vfov();
  static const int kVFovFieldNumber = 3;
  float vfov() const;
  void set_vfov(float value);

  // .Cognata.SDK.LidarDataType SLR = 4;
  void clear_slr();
  static const int kSLRFieldNumber = 4;
  ::Cognata::SDK::LidarDataType slr() const;
  void set_slr(::Cognata::SDK::LidarDataType value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.LidarConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::LidarMask* mask_;
  float hfov_;
  float vfov_;
  int slr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class LidarMask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.LidarMask) */ {
 public:
  LidarMask();
  virtual ~LidarMask();

  LidarMask(const LidarMask& from);
  LidarMask(LidarMask&& from) noexcept
    : LidarMask() {
    *this = ::std::move(from);
  }

  inline LidarMask& operator=(const LidarMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarMask& operator=(LidarMask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarMask* internal_default_instance() {
    return reinterpret_cast<const LidarMask*>(
               &_LidarMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LidarMask* other);
  friend void swap(LidarMask& a, LidarMask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarMask* New() const final {
    return CreateMaybeMessage<LidarMask>(nullptr);
  }

  LidarMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarMask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarMask& from);
  void MergeFrom(const LidarMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.LidarMask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool samplingTexture = 4;
  int samplingtexture_size() const;
  void clear_samplingtexture();
  static const int kSamplingTextureFieldNumber = 4;
  bool samplingtexture(int index) const;
  void set_samplingtexture(int index, bool value);
  void add_samplingtexture(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      samplingtexture() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_samplingtexture();

  // repeated uint32 noiseMask = 5;
  int noisemask_size() const;
  void clear_noisemask();
  static const int kNoiseMaskFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 noisemask(int index) const;
  void set_noisemask(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_noisemask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      noisemask() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_noisemask();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // uint32 HRes = 2;
  void clear_hres();
  static const int kHResFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 hres() const;
  void set_hres(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 VRes = 3;
  void clear_vres();
  static const int kVResFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 vres() const;
  void set_vres(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.LidarMask)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > samplingtexture_;
  mutable std::atomic<int> _samplingtexture_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > noisemask_;
  mutable std::atomic<int> _noisemask_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hres_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vres_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class RadarConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.RadarConfig) */ {
 public:
  RadarConfig();
  virtual ~RadarConfig();

  RadarConfig(const RadarConfig& from);
  RadarConfig(RadarConfig&& from) noexcept
    : RadarConfig() {
    *this = ::std::move(from);
  }

  inline RadarConfig& operator=(const RadarConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarConfig& operator=(RadarConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarConfig* internal_default_instance() {
    return reinterpret_cast<const RadarConfig*>(
               &_RadarConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RadarConfig* other);
  friend void swap(RadarConfig& a, RadarConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarConfig* New() const final {
    return CreateMaybeMessage<RadarConfig>(nullptr);
  }

  RadarConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarConfig& from);
  void MergeFrom(const RadarConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.RadarConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.RadarConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class GPSConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.GPSConfig) */ {
 public:
  GPSConfig();
  virtual ~GPSConfig();

  GPSConfig(const GPSConfig& from);
  GPSConfig(GPSConfig&& from) noexcept
    : GPSConfig() {
    *this = ::std::move(from);
  }

  inline GPSConfig& operator=(const GPSConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSConfig& operator=(GPSConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSConfig* internal_default_instance() {
    return reinterpret_cast<const GPSConfig*>(
               &_GPSConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GPSConfig* other);
  friend void swap(GPSConfig& a, GPSConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GPSConfig* New() const final {
    return CreateMaybeMessage<GPSConfig>(nullptr);
  }

  GPSConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSConfig& from);
  void MergeFrom(const GPSConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.GPSConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.GPSConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class ROIConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ROIConfig) */ {
 public:
  ROIConfig();
  virtual ~ROIConfig();

  ROIConfig(const ROIConfig& from);
  ROIConfig(ROIConfig&& from) noexcept
    : ROIConfig() {
    *this = ::std::move(from);
  }

  inline ROIConfig& operator=(const ROIConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIConfig& operator=(ROIConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIConfig* internal_default_instance() {
    return reinterpret_cast<const ROIConfig*>(
               &_ROIConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ROIConfig* other);
  friend void swap(ROIConfig& a, ROIConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ROIConfig* New() const final {
    return CreateMaybeMessage<ROIConfig>(nullptr);
  }

  ROIConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIConfig& from);
  void MergeFrom(const ROIConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ROIConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.ROIConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class E2CConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.E2CConfig) */ {
 public:
  E2CConfig();
  virtual ~E2CConfig();

  E2CConfig(const E2CConfig& from);
  E2CConfig(E2CConfig&& from) noexcept
    : E2CConfig() {
    *this = ::std::move(from);
  }

  inline E2CConfig& operator=(const E2CConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline E2CConfig& operator=(E2CConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const E2CConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const E2CConfig* internal_default_instance() {
    return reinterpret_cast<const E2CConfig*>(
               &_E2CConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(E2CConfig* other);
  friend void swap(E2CConfig& a, E2CConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline E2CConfig* New() const final {
    return CreateMaybeMessage<E2CConfig>(nullptr);
  }

  E2CConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<E2CConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const E2CConfig& from);
  void MergeFrom(const E2CConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2CConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.E2CConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.E2CConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class LaneDetectorConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.LaneDetectorConfig) */ {
 public:
  LaneDetectorConfig();
  virtual ~LaneDetectorConfig();

  LaneDetectorConfig(const LaneDetectorConfig& from);
  LaneDetectorConfig(LaneDetectorConfig&& from) noexcept
    : LaneDetectorConfig() {
    *this = ::std::move(from);
  }

  inline LaneDetectorConfig& operator=(const LaneDetectorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneDetectorConfig& operator=(LaneDetectorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneDetectorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneDetectorConfig* internal_default_instance() {
    return reinterpret_cast<const LaneDetectorConfig*>(
               &_LaneDetectorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(LaneDetectorConfig* other);
  friend void swap(LaneDetectorConfig& a, LaneDetectorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneDetectorConfig* New() const final {
    return CreateMaybeMessage<LaneDetectorConfig>(nullptr);
  }

  LaneDetectorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneDetectorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneDetectorConfig& from);
  void MergeFrom(const LaneDetectorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneDetectorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.LaneDetectorConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.LaneDetectorConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class CarTelemetriesConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.CarTelemetriesConfig) */ {
 public:
  CarTelemetriesConfig();
  virtual ~CarTelemetriesConfig();

  CarTelemetriesConfig(const CarTelemetriesConfig& from);
  CarTelemetriesConfig(CarTelemetriesConfig&& from) noexcept
    : CarTelemetriesConfig() {
    *this = ::std::move(from);
  }

  inline CarTelemetriesConfig& operator=(const CarTelemetriesConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarTelemetriesConfig& operator=(CarTelemetriesConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarTelemetriesConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarTelemetriesConfig* internal_default_instance() {
    return reinterpret_cast<const CarTelemetriesConfig*>(
               &_CarTelemetriesConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CarTelemetriesConfig* other);
  friend void swap(CarTelemetriesConfig& a, CarTelemetriesConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarTelemetriesConfig* New() const final {
    return CreateMaybeMessage<CarTelemetriesConfig>(nullptr);
  }

  CarTelemetriesConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarTelemetriesConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarTelemetriesConfig& from);
  void MergeFrom(const CarTelemetriesConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarTelemetriesConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.CarTelemetriesConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.CarTelemetriesConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class ThermalCameraConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.ThermalCameraConfig) */ {
 public:
  ThermalCameraConfig();
  virtual ~ThermalCameraConfig();

  ThermalCameraConfig(const ThermalCameraConfig& from);
  ThermalCameraConfig(ThermalCameraConfig&& from) noexcept
    : ThermalCameraConfig() {
    *this = ::std::move(from);
  }

  inline ThermalCameraConfig& operator=(const ThermalCameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalCameraConfig& operator=(ThermalCameraConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThermalCameraConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThermalCameraConfig* internal_default_instance() {
    return reinterpret_cast<const ThermalCameraConfig*>(
               &_ThermalCameraConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ThermalCameraConfig* other);
  friend void swap(ThermalCameraConfig& a, ThermalCameraConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThermalCameraConfig* New() const final {
    return CreateMaybeMessage<ThermalCameraConfig>(nullptr);
  }

  ThermalCameraConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalCameraConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThermalCameraConfig& from);
  void MergeFrom(const ThermalCameraConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalCameraConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.ThermalCameraConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float HFov = 3;
  void clear_hfov();
  static const int kHFovFieldNumber = 3;
  float hfov() const;
  void set_hfov(float value);

  // float VFov = 4;
  void clear_vfov();
  static const int kVFovFieldNumber = 4;
  float vfov() const;
  void set_vfov(float value);

  // .Cognata.SDK.ThermalCameraFormat formatType = 5;
  void clear_formattype();
  static const int kFormatTypeFieldNumber = 5;
  ::Cognata::SDK::ThermalCameraFormat formattype() const;
  void set_formattype(::Cognata::SDK::ThermalCameraFormat value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.ThermalCameraConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  float hfov_;
  float vfov_;
  int formattype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// -------------------------------------------------------------------

class DOGTConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.DOGTConfig) */ {
 public:
  DOGTConfig();
  virtual ~DOGTConfig();

  DOGTConfig(const DOGTConfig& from);
  DOGTConfig(DOGTConfig&& from) noexcept
    : DOGTConfig() {
    *this = ::std::move(from);
  }

  inline DOGTConfig& operator=(const DOGTConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DOGTConfig& operator=(DOGTConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DOGTConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DOGTConfig* internal_default_instance() {
    return reinterpret_cast<const DOGTConfig*>(
               &_DOGTConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(DOGTConfig* other);
  friend void swap(DOGTConfig& a, DOGTConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DOGTConfig* New() const final {
    return CreateMaybeMessage<DOGTConfig>(nullptr);
  }

  DOGTConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DOGTConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DOGTConfig& from);
  void MergeFrom(const DOGTConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DOGTConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.DOGTConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensors_2eproto);
    return ::descriptor_table_Sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cognata.SDK.DOGTConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RGBCameraConfig

// uint32 width = 1;
inline void RGBCameraConfig::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGBCameraConfig::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RGBCameraConfig.width)
  return width_;
}
inline void RGBCameraConfig::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RGBCameraConfig.width)
}

// uint32 height = 2;
inline void RGBCameraConfig::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGBCameraConfig::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RGBCameraConfig.height)
  return height_;
}
inline void RGBCameraConfig::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RGBCameraConfig.height)
}

// float HFov = 3;
inline void RGBCameraConfig::clear_hfov() {
  hfov_ = 0;
}
inline float RGBCameraConfig::hfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RGBCameraConfig.HFov)
  return hfov_;
}
inline void RGBCameraConfig::set_hfov(float value) {
  
  hfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RGBCameraConfig.HFov)
}

// float VFov = 4;
inline void RGBCameraConfig::clear_vfov() {
  vfov_ = 0;
}
inline float RGBCameraConfig::vfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.RGBCameraConfig.VFov)
  return vfov_;
}
inline void RGBCameraConfig::set_vfov(float value) {
  
  vfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.RGBCameraConfig.VFov)
}

// -------------------------------------------------------------------

// DepthCameraConfig

// uint32 width = 1;
inline void DepthCameraConfig::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepthCameraConfig::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DepthCameraConfig.width)
  return width_;
}
inline void DepthCameraConfig::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.DepthCameraConfig.width)
}

// uint32 height = 2;
inline void DepthCameraConfig::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepthCameraConfig::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DepthCameraConfig.height)
  return height_;
}
inline void DepthCameraConfig::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.DepthCameraConfig.height)
}

// float HFov = 3;
inline void DepthCameraConfig::clear_hfov() {
  hfov_ = 0;
}
inline float DepthCameraConfig::hfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DepthCameraConfig.HFov)
  return hfov_;
}
inline void DepthCameraConfig::set_hfov(float value) {
  
  hfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.DepthCameraConfig.HFov)
}

// float VFov = 4;
inline void DepthCameraConfig::clear_vfov() {
  vfov_ = 0;
}
inline float DepthCameraConfig::vfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DepthCameraConfig.VFov)
  return vfov_;
}
inline void DepthCameraConfig::set_vfov(float value) {
  
  vfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.DepthCameraConfig.VFov)
}

// .Cognata.SDK.DepthCameraDataType DCdataType = 5;
inline void DepthCameraConfig::clear_dcdatatype() {
  dcdatatype_ = 0;
}
inline ::Cognata::SDK::DepthCameraDataType DepthCameraConfig::dcdatatype() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.DepthCameraConfig.DCdataType)
  return static_cast< ::Cognata::SDK::DepthCameraDataType >(dcdatatype_);
}
inline void DepthCameraConfig::set_dcdatatype(::Cognata::SDK::DepthCameraDataType value) {
  
  dcdatatype_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.DepthCameraConfig.DCdataType)
}

// -------------------------------------------------------------------

// SLClassCameraConfig

// uint32 width = 1;
inline void SLClassCameraConfig::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLClassCameraConfig::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLClassCameraConfig.width)
  return width_;
}
inline void SLClassCameraConfig::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLClassCameraConfig.width)
}

// uint32 height = 2;
inline void SLClassCameraConfig::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLClassCameraConfig::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLClassCameraConfig.height)
  return height_;
}
inline void SLClassCameraConfig::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLClassCameraConfig.height)
}

// float HFov = 3;
inline void SLClassCameraConfig::clear_hfov() {
  hfov_ = 0;
}
inline float SLClassCameraConfig::hfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLClassCameraConfig.HFov)
  return hfov_;
}
inline void SLClassCameraConfig::set_hfov(float value) {
  
  hfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLClassCameraConfig.HFov)
}

// float VFov = 4;
inline void SLClassCameraConfig::clear_vfov() {
  vfov_ = 0;
}
inline float SLClassCameraConfig::vfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLClassCameraConfig.VFov)
  return vfov_;
}
inline void SLClassCameraConfig::set_vfov(float value) {
  
  vfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLClassCameraConfig.VFov)
}

// -------------------------------------------------------------------

// SLInstanceCameraConfig

// uint32 width = 1;
inline void SLInstanceCameraConfig::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInstanceCameraConfig::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLInstanceCameraConfig.width)
  return width_;
}
inline void SLInstanceCameraConfig::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLInstanceCameraConfig.width)
}

// uint32 height = 2;
inline void SLInstanceCameraConfig::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLInstanceCameraConfig::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLInstanceCameraConfig.height)
  return height_;
}
inline void SLInstanceCameraConfig::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLInstanceCameraConfig.height)
}

// float HFov = 3;
inline void SLInstanceCameraConfig::clear_hfov() {
  hfov_ = 0;
}
inline float SLInstanceCameraConfig::hfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLInstanceCameraConfig.HFov)
  return hfov_;
}
inline void SLInstanceCameraConfig::set_hfov(float value) {
  
  hfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLInstanceCameraConfig.HFov)
}

// float VFov = 4;
inline void SLInstanceCameraConfig::clear_vfov() {
  vfov_ = 0;
}
inline float SLInstanceCameraConfig::vfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLInstanceCameraConfig.VFov)
  return vfov_;
}
inline void SLInstanceCameraConfig::set_vfov(float value) {
  
  vfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLInstanceCameraConfig.VFov)
}

// -------------------------------------------------------------------

// SLMaterialCameraConfig

// uint32 width = 1;
inline void SLMaterialCameraConfig::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMaterialCameraConfig::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLMaterialCameraConfig.width)
  return width_;
}
inline void SLMaterialCameraConfig::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLMaterialCameraConfig.width)
}

// uint32 height = 2;
inline void SLMaterialCameraConfig::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLMaterialCameraConfig::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLMaterialCameraConfig.height)
  return height_;
}
inline void SLMaterialCameraConfig::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLMaterialCameraConfig.height)
}

// float HFov = 3;
inline void SLMaterialCameraConfig::clear_hfov() {
  hfov_ = 0;
}
inline float SLMaterialCameraConfig::hfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLMaterialCameraConfig.HFov)
  return hfov_;
}
inline void SLMaterialCameraConfig::set_hfov(float value) {
  
  hfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLMaterialCameraConfig.HFov)
}

// float VFov = 4;
inline void SLMaterialCameraConfig::clear_vfov() {
  vfov_ = 0;
}
inline float SLMaterialCameraConfig::vfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLMaterialCameraConfig.VFov)
  return vfov_;
}
inline void SLMaterialCameraConfig::set_vfov(float value) {
  
  vfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLMaterialCameraConfig.VFov)
}

// -------------------------------------------------------------------

// SLStructureCameraConfig

// uint32 width = 1;
inline void SLStructureCameraConfig::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLStructureCameraConfig::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLStructureCameraConfig.width)
  return width_;
}
inline void SLStructureCameraConfig::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLStructureCameraConfig.width)
}

// uint32 height = 2;
inline void SLStructureCameraConfig::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SLStructureCameraConfig::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLStructureCameraConfig.height)
  return height_;
}
inline void SLStructureCameraConfig::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLStructureCameraConfig.height)
}

// float HFov = 3;
inline void SLStructureCameraConfig::clear_hfov() {
  hfov_ = 0;
}
inline float SLStructureCameraConfig::hfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLStructureCameraConfig.HFov)
  return hfov_;
}
inline void SLStructureCameraConfig::set_hfov(float value) {
  
  hfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLStructureCameraConfig.HFov)
}

// float VFov = 4;
inline void SLStructureCameraConfig::clear_vfov() {
  vfov_ = 0;
}
inline float SLStructureCameraConfig::vfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SLStructureCameraConfig.VFov)
  return vfov_;
}
inline void SLStructureCameraConfig::set_vfov(float value) {
  
  vfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SLStructureCameraConfig.VFov)
}

// -------------------------------------------------------------------

// LidarConfig

// .Cognata.SDK.LidarMask mask = 1;
inline bool LidarConfig::has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline void LidarConfig::clear_mask() {
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
inline const ::Cognata::SDK::LidarMask& LidarConfig::mask() const {
  const ::Cognata::SDK::LidarMask* p = mask_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarConfig.mask)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::LidarMask*>(
      &::Cognata::SDK::_LidarMask_default_instance_);
}
inline ::Cognata::SDK::LidarMask* LidarConfig::release_mask() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.LidarConfig.mask)
  
  ::Cognata::SDK::LidarMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::LidarMask* LidarConfig::mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::LidarMask>(GetArenaNoVirtual());
    mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.LidarConfig.mask)
  return mask_;
}
inline void LidarConfig::set_allocated_mask(::Cognata::SDK::LidarMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.LidarConfig.mask)
}

// float HFov = 2;
inline void LidarConfig::clear_hfov() {
  hfov_ = 0;
}
inline float LidarConfig::hfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarConfig.HFov)
  return hfov_;
}
inline void LidarConfig::set_hfov(float value) {
  
  hfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarConfig.HFov)
}

// float VFov = 3;
inline void LidarConfig::clear_vfov() {
  vfov_ = 0;
}
inline float LidarConfig::vfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarConfig.VFov)
  return vfov_;
}
inline void LidarConfig::set_vfov(float value) {
  
  vfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarConfig.VFov)
}

// .Cognata.SDK.LidarDataType SLR = 4;
inline void LidarConfig::clear_slr() {
  slr_ = 0;
}
inline ::Cognata::SDK::LidarDataType LidarConfig::slr() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarConfig.SLR)
  return static_cast< ::Cognata::SDK::LidarDataType >(slr_);
}
inline void LidarConfig::set_slr(::Cognata::SDK::LidarDataType value) {
  
  slr_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarConfig.SLR)
}

// -------------------------------------------------------------------

// LidarMask

// string id = 1;
inline void LidarMask::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LidarMask::id() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarMask.id)
  return id_.GetNoArena();
}
inline void LidarMask::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarMask.id)
}
inline void LidarMask::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cognata.SDK.LidarMask.id)
}
inline void LidarMask::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cognata.SDK.LidarMask.id)
}
inline void LidarMask::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cognata.SDK.LidarMask.id)
}
inline std::string* LidarMask::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.LidarMask.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LidarMask::release_id() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.LidarMask.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LidarMask::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.LidarMask.id)
}

// uint32 HRes = 2;
inline void LidarMask::clear_hres() {
  hres_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LidarMask::hres() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarMask.HRes)
  return hres_;
}
inline void LidarMask::set_hres(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hres_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarMask.HRes)
}

// uint32 VRes = 3;
inline void LidarMask::clear_vres() {
  vres_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LidarMask::vres() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarMask.VRes)
  return vres_;
}
inline void LidarMask::set_vres(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vres_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarMask.VRes)
}

// repeated bool samplingTexture = 4;
inline int LidarMask::samplingtexture_size() const {
  return samplingtexture_.size();
}
inline void LidarMask::clear_samplingtexture() {
  samplingtexture_.Clear();
}
inline bool LidarMask::samplingtexture(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarMask.samplingTexture)
  return samplingtexture_.Get(index);
}
inline void LidarMask::set_samplingtexture(int index, bool value) {
  samplingtexture_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarMask.samplingTexture)
}
inline void LidarMask::add_samplingtexture(bool value) {
  samplingtexture_.Add(value);
  // @@protoc_insertion_point(field_add:Cognata.SDK.LidarMask.samplingTexture)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
LidarMask::samplingtexture() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.LidarMask.samplingTexture)
  return samplingtexture_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
LidarMask::mutable_samplingtexture() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.LidarMask.samplingTexture)
  return &samplingtexture_;
}

// repeated uint32 noiseMask = 5;
inline int LidarMask::noisemask_size() const {
  return noisemask_.size();
}
inline void LidarMask::clear_noisemask() {
  noisemask_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LidarMask::noisemask(int index) const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.LidarMask.noiseMask)
  return noisemask_.Get(index);
}
inline void LidarMask::set_noisemask(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  noisemask_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cognata.SDK.LidarMask.noiseMask)
}
inline void LidarMask::add_noisemask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  noisemask_.Add(value);
  // @@protoc_insertion_point(field_add:Cognata.SDK.LidarMask.noiseMask)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LidarMask::noisemask() const {
  // @@protoc_insertion_point(field_list:Cognata.SDK.LidarMask.noiseMask)
  return noisemask_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LidarMask::mutable_noisemask() {
  // @@protoc_insertion_point(field_mutable_list:Cognata.SDK.LidarMask.noiseMask)
  return &noisemask_;
}

// -------------------------------------------------------------------

// RadarConfig

// -------------------------------------------------------------------

// GPSConfig

// -------------------------------------------------------------------

// ROIConfig

// -------------------------------------------------------------------

// E2CConfig

// -------------------------------------------------------------------

// LaneDetectorConfig

// -------------------------------------------------------------------

// CarTelemetriesConfig

// -------------------------------------------------------------------

// ThermalCameraConfig

// uint32 width = 1;
inline void ThermalCameraConfig::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThermalCameraConfig::width() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ThermalCameraConfig.width)
  return width_;
}
inline void ThermalCameraConfig::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.ThermalCameraConfig.width)
}

// uint32 height = 2;
inline void ThermalCameraConfig::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThermalCameraConfig::height() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ThermalCameraConfig.height)
  return height_;
}
inline void ThermalCameraConfig::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.ThermalCameraConfig.height)
}

// float HFov = 3;
inline void ThermalCameraConfig::clear_hfov() {
  hfov_ = 0;
}
inline float ThermalCameraConfig::hfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ThermalCameraConfig.HFov)
  return hfov_;
}
inline void ThermalCameraConfig::set_hfov(float value) {
  
  hfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.ThermalCameraConfig.HFov)
}

// float VFov = 4;
inline void ThermalCameraConfig::clear_vfov() {
  vfov_ = 0;
}
inline float ThermalCameraConfig::vfov() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ThermalCameraConfig.VFov)
  return vfov_;
}
inline void ThermalCameraConfig::set_vfov(float value) {
  
  vfov_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.ThermalCameraConfig.VFov)
}

// .Cognata.SDK.ThermalCameraFormat formatType = 5;
inline void ThermalCameraConfig::clear_formattype() {
  formattype_ = 0;
}
inline ::Cognata::SDK::ThermalCameraFormat ThermalCameraConfig::formattype() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.ThermalCameraConfig.formatType)
  return static_cast< ::Cognata::SDK::ThermalCameraFormat >(formattype_);
}
inline void ThermalCameraConfig::set_formattype(::Cognata::SDK::ThermalCameraFormat value) {
  
  formattype_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.ThermalCameraConfig.formatType)
}

// -------------------------------------------------------------------

// DOGTConfig

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SDK
}  // namespace Cognata

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Cognata::SDK::DepthCameraDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::DepthCameraDataType>() {
  return ::Cognata::SDK::DepthCameraDataType_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::LidarDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::LidarDataType>() {
  return ::Cognata::SDK::LidarDataType_descriptor();
}
template <> struct is_proto_enum< ::Cognata::SDK::ThermalCameraFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cognata::SDK::ThermalCameraFormat>() {
  return ::Cognata::SDK::ThermalCameraFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Sensors_2eproto
