// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vectors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vectors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vectors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vectors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vectors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vectors_2eproto;
namespace Cognata {
namespace SDK {
class SDKVector2;
class SDKVector2DefaultTypeInternal;
extern SDKVector2DefaultTypeInternal _SDKVector2_default_instance_;
class SDKVector3;
class SDKVector3DefaultTypeInternal;
extern SDKVector3DefaultTypeInternal _SDKVector3_default_instance_;
class Transform3;
class Transform3DefaultTypeInternal;
extern Transform3DefaultTypeInternal _Transform3_default_instance_;
}  // namespace SDK
}  // namespace Cognata
PROTOBUF_NAMESPACE_OPEN
template<> ::Cognata::SDK::SDKVector2* Arena::CreateMaybeMessage<::Cognata::SDK::SDKVector2>(Arena*);
template<> ::Cognata::SDK::SDKVector3* Arena::CreateMaybeMessage<::Cognata::SDK::SDKVector3>(Arena*);
template<> ::Cognata::SDK::Transform3* Arena::CreateMaybeMessage<::Cognata::SDK::Transform3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Cognata {
namespace SDK {

// ===================================================================

class SDKVector2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SDKVector2) */ {
 public:
  SDKVector2();
  virtual ~SDKVector2();

  SDKVector2(const SDKVector2& from);
  SDKVector2(SDKVector2&& from) noexcept
    : SDKVector2() {
    *this = ::std::move(from);
  }

  inline SDKVector2& operator=(const SDKVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKVector2& operator=(SDKVector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDKVector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDKVector2* internal_default_instance() {
    return reinterpret_cast<const SDKVector2*>(
               &_SDKVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SDKVector2* other);
  friend void swap(SDKVector2& a, SDKVector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDKVector2* New() const final {
    return CreateMaybeMessage<SDKVector2>(nullptr);
  }

  SDKVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDKVector2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDKVector2& from);
  void MergeFrom(const SDKVector2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKVector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SDKVector2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vectors_2eproto);
    return ::descriptor_table_vectors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SDKVector2)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vectors_2eproto;
};
// -------------------------------------------------------------------

class SDKVector3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.SDKVector3) */ {
 public:
  SDKVector3();
  virtual ~SDKVector3();

  SDKVector3(const SDKVector3& from);
  SDKVector3(SDKVector3&& from) noexcept
    : SDKVector3() {
    *this = ::std::move(from);
  }

  inline SDKVector3& operator=(const SDKVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKVector3& operator=(SDKVector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDKVector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDKVector3* internal_default_instance() {
    return reinterpret_cast<const SDKVector3*>(
               &_SDKVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SDKVector3* other);
  friend void swap(SDKVector3& a, SDKVector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDKVector3* New() const final {
    return CreateMaybeMessage<SDKVector3>(nullptr);
  }

  SDKVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDKVector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDKVector3& from);
  void MergeFrom(const SDKVector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKVector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.SDKVector3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vectors_2eproto);
    return ::descriptor_table_vectors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.SDKVector3)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vectors_2eproto;
};
// -------------------------------------------------------------------

class Transform3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cognata.SDK.Transform3) */ {
 public:
  Transform3();
  virtual ~Transform3();

  Transform3(const Transform3& from);
  Transform3(Transform3&& from) noexcept
    : Transform3() {
    *this = ::std::move(from);
  }

  inline Transform3& operator=(const Transform3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform3& operator=(Transform3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform3* internal_default_instance() {
    return reinterpret_cast<const Transform3*>(
               &_Transform3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Transform3* other);
  friend void swap(Transform3& a, Transform3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transform3* New() const final {
    return CreateMaybeMessage<Transform3>(nullptr);
  }

  Transform3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform3& from);
  void MergeFrom(const Transform3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cognata.SDK.Transform3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vectors_2eproto);
    return ::descriptor_table_vectors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Cognata.SDK.SDKVector3 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::Cognata::SDK::SDKVector3& position() const;
  ::Cognata::SDK::SDKVector3* release_position();
  ::Cognata::SDK::SDKVector3* mutable_position();
  void set_allocated_position(::Cognata::SDK::SDKVector3* position);

  // .Cognata.SDK.SDKVector3 rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  const ::Cognata::SDK::SDKVector3& rotation() const;
  ::Cognata::SDK::SDKVector3* release_rotation();
  ::Cognata::SDK::SDKVector3* mutable_rotation();
  void set_allocated_rotation(::Cognata::SDK::SDKVector3* rotation);

  // @@protoc_insertion_point(class_scope:Cognata.SDK.Transform3)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Cognata::SDK::SDKVector3* position_;
  ::Cognata::SDK::SDKVector3* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vectors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SDKVector2

// float x = 1;
inline void SDKVector2::clear_x() {
  x_ = 0;
}
inline float SDKVector2::x() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SDKVector2.x)
  return x_;
}
inline void SDKVector2::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SDKVector2.x)
}

// float y = 2;
inline void SDKVector2::clear_y() {
  y_ = 0;
}
inline float SDKVector2::y() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SDKVector2.y)
  return y_;
}
inline void SDKVector2::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SDKVector2.y)
}

// -------------------------------------------------------------------

// SDKVector3

// float x = 1;
inline void SDKVector3::clear_x() {
  x_ = 0;
}
inline float SDKVector3::x() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SDKVector3.x)
  return x_;
}
inline void SDKVector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SDKVector3.x)
}

// float y = 2;
inline void SDKVector3::clear_y() {
  y_ = 0;
}
inline float SDKVector3::y() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SDKVector3.y)
  return y_;
}
inline void SDKVector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SDKVector3.y)
}

// float z = 3;
inline void SDKVector3::clear_z() {
  z_ = 0;
}
inline float SDKVector3::z() const {
  // @@protoc_insertion_point(field_get:Cognata.SDK.SDKVector3.z)
  return z_;
}
inline void SDKVector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Cognata.SDK.SDKVector3.z)
}

// -------------------------------------------------------------------

// Transform3

// .Cognata.SDK.SDKVector3 position = 1;
inline bool Transform3::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void Transform3::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Transform3::position() const {
  const ::Cognata::SDK::SDKVector3* p = position_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Transform3.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Transform3::release_position() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Transform3.position)
  
  ::Cognata::SDK::SDKVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Transform3::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Transform3.position)
  return position_;
}
inline void Transform3::set_allocated_position(::Cognata::SDK::SDKVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Transform3.position)
}

// .Cognata.SDK.SDKVector3 rotation = 2;
inline bool Transform3::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline void Transform3::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::Cognata::SDK::SDKVector3& Transform3::rotation() const {
  const ::Cognata::SDK::SDKVector3* p = rotation_;
  // @@protoc_insertion_point(field_get:Cognata.SDK.Transform3.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::Cognata::SDK::SDKVector3*>(
      &::Cognata::SDK::_SDKVector3_default_instance_);
}
inline ::Cognata::SDK::SDKVector3* Transform3::release_rotation() {
  // @@protoc_insertion_point(field_release:Cognata.SDK.Transform3.rotation)
  
  ::Cognata::SDK::SDKVector3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Cognata::SDK::SDKVector3* Transform3::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cognata::SDK::SDKVector3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Cognata.SDK.Transform3.rotation)
  return rotation_;
}
inline void Transform3::set_allocated_rotation(::Cognata::SDK::SDKVector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Cognata.SDK.Transform3.rotation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SDK
}  // namespace Cognata

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vectors_2eproto
